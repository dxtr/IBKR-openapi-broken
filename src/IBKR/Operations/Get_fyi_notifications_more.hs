-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_fyi_notifications_more
module IBKR.Operations.Get_fyi_notifications_more where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /fyi/notifications/more
-- 
-- Get more notifications based on a certain one
get_fyi_notifications_more :: forall m . IBKR.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ id: id of last notification in the list
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_fyi_notifications_moreResponse) -- ^ Monadic computation which returns the result of the operation
get_fyi_notifications_more id = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_fyi_notifications_moreResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_fyi_notifications_moreResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                               Notifications)
                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/fyi/notifications/more") [IBKR.Common.QueryParameter (Data.Text.pack "id") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON id) (Data.Text.pack "form") GHC.Types.False])
-- | Represents a response of the operation 'get_fyi_notifications_more'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_fyi_notifications_moreResponseError' is used.
data Get_fyi_notifications_moreResponse =
   Get_fyi_notifications_moreResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_fyi_notifications_moreResponse200 Notifications -- ^ An array
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > GET /fyi/notifications/more
-- 
-- The same as 'get_fyi_notifications_more' but accepts an explicit configuration.
get_fyi_notifications_moreWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ id: id of last notification in the list
  -> m (Network.HTTP.Client.Types.Response Get_fyi_notifications_moreResponse) -- ^ Monadic computation which returns the result of the operation
get_fyi_notifications_moreWithConfiguration config
                                            id = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Get_fyi_notifications_moreResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_fyi_notifications_moreResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                Notifications)
                                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/fyi/notifications/more") [IBKR.Common.QueryParameter (Data.Text.pack "id") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON id) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /fyi/notifications/more
-- 
-- The same as 'get_fyi_notifications_more' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_fyi_notifications_moreRaw :: forall m . IBKR.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ id: id of last notification in the list
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_fyi_notifications_moreRaw id = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/fyi/notifications/more") [IBKR.Common.QueryParameter (Data.Text.pack "id") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON id) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /fyi/notifications/more
-- 
-- The same as 'get_fyi_notifications_more' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_fyi_notifications_moreWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ id: id of last notification in the list
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_fyi_notifications_moreWithConfigurationRaw config
                                               id = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/fyi/notifications/more") [IBKR.Common.QueryParameter (Data.Text.pack "id") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON id) (Data.Text.pack "form") GHC.Types.False])
