-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_iserver_contract__conid__info_and_rules
module IBKR.Operations.Get_iserver_contract__conid__info_and_rules where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /iserver/contract/{conid}/info-and-rules
-- 
-- Returns both contract info and rules from a single endpoint.
-- For only contract rules, use the endpoint \/iserver\/contract\/rules.
-- For only contract info, use the endpoint \/iserver\/contract\/{conid}\/info. 
get_iserver_contract__conid__info_and_rules :: forall m . IBKR.Common.MonadHTTP m => Get_iserver_contract__conid__info_and_rulesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_iserver_contract__conid__info_and_rulesResponse) -- ^ Monadic computation which returns the result of the operation
get_iserver_contract__conid__info_and_rules parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_iserver_contract__conid__info_and_rulesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_iserver_contract__conid__info_and_rulesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Get_iserver_contract__conid__info_and_rulesResponseBody200)
                                                                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/iserver/contract/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (get_iserver_contract__conid__info_and_rulesParametersPathConid parameters))) GHC.Base.++ "/info-and-rules"))) [IBKR.Common.QueryParameter (Data.Text.pack "isBuy") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_contract__conid__info_and_rulesParametersQueryIsBuy parameters)) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/iserver\/contract\/{conid}\/info-and-rules.GET.parameters@ in the specification.
-- 
-- 
data Get_iserver_contract__conid__info_and_rulesParameters = Get_iserver_contract__conid__info_and_rulesParameters {
  -- | pathConid: Represents the parameter named \'conid\'
  -- 
  -- IBKR contract identifier
  get_iserver_contract__conid__info_and_rulesParametersPathConid :: Data.Text.Internal.Text
  -- | queryIsBuy: Represents the parameter named \'isBuy\'
  -- 
  -- Side of the market rules apply too. Set to **true** for Buy Orders, set to **false** for Sell Orders
  , get_iserver_contract__conid__info_and_rulesParametersQueryIsBuy :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_contract__conid__info_and_rulesParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathConid" Data.Aeson.Types.ToJSON..= get_iserver_contract__conid__info_and_rulesParametersPathConid obj] : ["queryIsBuy" Data.Aeson.Types.ToJSON..= get_iserver_contract__conid__info_and_rulesParametersQueryIsBuy obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathConid" Data.Aeson.Types.ToJSON..= get_iserver_contract__conid__info_and_rulesParametersPathConid obj] : ["queryIsBuy" Data.Aeson.Types.ToJSON..= get_iserver_contract__conid__info_and_rulesParametersQueryIsBuy obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_contract__conid__info_and_rulesParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_contract__conid__info_and_rulesParameters" (\obj -> (GHC.Base.pure Get_iserver_contract__conid__info_and_rulesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathConid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryIsBuy"))
-- | Create a new 'Get_iserver_contract__conid__info_and_rulesParameters' with all required fields.
mkGet_iserver_contract__conid__info_and_rulesParameters :: Data.Text.Internal.Text -- ^ 'get_iserver_contract__conid__info_and_rulesParametersPathConid'
  -> GHC.Types.Bool -- ^ 'get_iserver_contract__conid__info_and_rulesParametersQueryIsBuy'
  -> Get_iserver_contract__conid__info_and_rulesParameters
mkGet_iserver_contract__conid__info_and_rulesParameters get_iserver_contract__conid__info_and_rulesParametersPathConid get_iserver_contract__conid__info_and_rulesParametersQueryIsBuy = Get_iserver_contract__conid__info_and_rulesParameters{get_iserver_contract__conid__info_and_rulesParametersPathConid = get_iserver_contract__conid__info_and_rulesParametersPathConid,
                                                                                                                                                                                                                                               get_iserver_contract__conid__info_and_rulesParametersQueryIsBuy = get_iserver_contract__conid__info_and_rulesParametersQueryIsBuy}
-- | Represents a response of the operation 'get_iserver_contract__conid__info_and_rules'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_iserver_contract__conid__info_and_rulesResponseError' is used.
data Get_iserver_contract__conid__info_and_rulesResponse =
   Get_iserver_contract__conid__info_and_rulesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_iserver_contract__conid__info_and_rulesResponse200 Get_iserver_contract__conid__info_and_rulesResponseBody200 -- ^ returns an array
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/iserver\/contract\/{conid}\/info-and-rules.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Get_iserver_contract__conid__info_and_rulesResponseBody200 = Get_iserver_contract__conid__info_and_rulesResponseBody200 {
  -- | allow_sell_long: Allowed to sell shares that you own
  get_iserver_contract__conid__info_and_rulesResponseBody200Allow_sell_long :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | cfi_code: Classification of Financial Instrument codes
  , get_iserver_contract__conid__info_and_rulesResponseBody200Cfi_code :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | classifier
  , get_iserver_contract__conid__info_and_rulesResponseBody200Classifier :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | company_name: Contracts company name
  , get_iserver_contract__conid__info_and_rulesResponseBody200Company_name :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | con_id: IBKRs contract identifier
  , get_iserver_contract__conid__info_and_rulesResponseBody200Con_id :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | contract_month: Month the contract must be satisfied by making or accepting delivery
  , get_iserver_contract__conid__info_and_rulesResponseBody200Contract_month :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | currency: Currency contract trades in
  , get_iserver_contract__conid__info_and_rulesResponseBody200Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | cusip
  , get_iserver_contract__conid__info_and_rulesResponseBody200Cusip :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | exchange: Primary Exchange, Routing or Trading Venue
  , get_iserver_contract__conid__info_and_rulesResponseBody200Exchange :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | expiry_full: Expiration Date in the format YYYYMMDD
  , get_iserver_contract__conid__info_and_rulesResponseBody200Expiry_full :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | industry: Specific group of companies or businesses.
  , get_iserver_contract__conid__info_and_rulesResponseBody200Industry :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | instrument_type: Asset Class of the contract
  , get_iserver_contract__conid__info_and_rulesResponseBody200Instrument_type :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | is_zero_commission_security: Supports zero commission trades
  , get_iserver_contract__conid__info_and_rulesResponseBody200Is_zero_commission_security :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | local_symbol: Contracts symbol from primary exchange. For options it is the OCC symbol.
  , get_iserver_contract__conid__info_and_rulesResponseBody200Local_symbol :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | maturity_date: Date on which the underlying transaction settles if the option is exercised
  , get_iserver_contract__conid__info_and_rulesResponseBody200Maturity_date :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | multiplier: numerical value of each point of price movement
  , get_iserver_contract__conid__info_and_rulesResponseBody200Multiplier :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | r_t_h: Provides trading outside of Regular Trading Hours
  , get_iserver_contract__conid__info_and_rulesResponseBody200R_t_h :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | right: Put or Call of the option
  , get_iserver_contract__conid__info_and_rulesResponseBody200Right :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | rules
  , get_iserver_contract__conid__info_and_rulesResponseBody200Rules :: (GHC.Maybe.Maybe ([Get_iserver_contract__conid__info_and_rulesResponseBody200Rules]))
  -- | smart_available: Support IBKRs SMART routing
  , get_iserver_contract__conid__info_and_rulesResponseBody200Smart_available :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | strike: fixed price at which the owner of the option buys or sells the underlying
  , get_iserver_contract__conid__info_and_rulesResponseBody200Strike :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | symbol: Underlying symbol
  , get_iserver_contract__conid__info_and_rulesResponseBody200Symbol :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | text: Formatted contract parameters
  , get_iserver_contract__conid__info_and_rulesResponseBody200Text :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | trading_class: Designation of the contract
  , get_iserver_contract__conid__info_and_rulesResponseBody200Trading_class :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | underlying_con_id: IBKRs contract identifier for the underlying instrument
  , get_iserver_contract__conid__info_and_rulesResponseBody200Underlying_con_id :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | underlying_issuer: Legal entity for underlying contract
  , get_iserver_contract__conid__info_and_rulesResponseBody200Underlying_issuer :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | valid_exchanges: Comma separated list of exchanges or trading venues
  , get_iserver_contract__conid__info_and_rulesResponseBody200Valid_exchanges :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_contract__conid__info_and_rulesResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_sell_long" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Allow_sell_long obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cfi_code" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Cfi_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("classifier" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Classifier obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("company_name" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Company_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("con_id" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Con_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("contract_month" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Contract_month obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Currency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cusip" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Cusip obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exchange" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Exchange obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expiry_full" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Expiry_full obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("industry" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Industry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("instrument_type" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Instrument_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_zero_commission_security" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Is_zero_commission_security obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local_symbol" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Local_symbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("maturity_date" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Maturity_date obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("multiplier" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Multiplier obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("r_t_h" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200R_t_h obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("right" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Right obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("rules" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Rules obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("smart_available" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Smart_available obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("strike" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Strike obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Symbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("text" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Text obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trading_class" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Trading_class obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("underlying_con_id" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Underlying_con_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("underlying_issuer" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Underlying_issuer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("valid_exchanges" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Valid_exchanges obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_sell_long" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Allow_sell_long obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cfi_code" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Cfi_code obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("classifier" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Classifier obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("company_name" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Company_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("con_id" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Con_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("contract_month" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Contract_month obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Currency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cusip" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Cusip obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exchange" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Exchange obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expiry_full" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Expiry_full obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("industry" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Industry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("instrument_type" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Instrument_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_zero_commission_security" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Is_zero_commission_security obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local_symbol" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Local_symbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("maturity_date" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Maturity_date obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("multiplier" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Multiplier obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("r_t_h" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200R_t_h obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("right" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Right obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("rules" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Rules obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("smart_available" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Smart_available obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("strike" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Strike obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Symbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("text" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Text obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trading_class" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Trading_class obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("underlying_con_id" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Underlying_con_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("underlying_issuer" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Underlying_issuer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("valid_exchanges" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200Valid_exchanges obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_contract__conid__info_and_rulesResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_contract__conid__info_and_rulesResponseBody200" (\obj -> ((((((((((((((((((((((((((GHC.Base.pure Get_iserver_contract__conid__info_and_rulesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "allow_sell_long")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cfi_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "classifier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "company_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "con_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "contract_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cusip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exchange")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expiry_full")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "industry")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "instrument_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_zero_commission_security")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "local_symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "maturity_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "multiplier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "r_t_h")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "right")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "rules")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "smart_available")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "strike")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "text")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "trading_class")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "underlying_con_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "underlying_issuer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "valid_exchanges"))
-- | Create a new 'Get_iserver_contract__conid__info_and_rulesResponseBody200' with all required fields.
mkGet_iserver_contract__conid__info_and_rulesResponseBody200 :: Get_iserver_contract__conid__info_and_rulesResponseBody200
mkGet_iserver_contract__conid__info_and_rulesResponseBody200 = Get_iserver_contract__conid__info_and_rulesResponseBody200{get_iserver_contract__conid__info_and_rulesResponseBody200Allow_sell_long = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Cfi_code = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Classifier = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Company_name = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Con_id = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Contract_month = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Currency = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Cusip = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Exchange = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Expiry_full = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Industry = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Instrument_type = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Is_zero_commission_security = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Local_symbol = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Maturity_date = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Multiplier = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200R_t_h = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Right = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Rules = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Smart_available = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Strike = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Symbol = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Text = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Trading_class = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Underlying_con_id = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Underlying_issuer = GHC.Maybe.Nothing,
                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200Valid_exchanges = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/{conid}\/info-and-rules.GET.responses.200.content.application\/json.schema.properties.rules.items@ in the specification.
-- 
-- 
data Get_iserver_contract__conid__info_and_rulesResponseBody200Rules = Get_iserver_contract__conid__info_and_rulesResponseBody200Rules {
  -- | algoEligible: Contract supports algo orders
  get_iserver_contract__conid__info_and_rulesResponseBody200RulesAlgoEligible :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | canTradeAcctIds
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesCanTradeAcctIds :: (GHC.Maybe.Maybe ([Get_iserver_contract__conid__info_and_rulesResponseBody200RulesCanTradeAcctIds]))
  -- | cashCcy: Cash currency for the contract
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesCashCcy :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | cashQtyIncr: Increment value for cash quantity
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesCashQtyIncr :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | cashSize: cash value
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesCashSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | cqtTypes
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesCqtTypes :: (GHC.Maybe.Maybe ([Get_iserver_contract__conid__info_and_rulesResponseBody200RulesCqtTypes]))
  -- | defaultSize: Default quantity
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesDefaultSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | defaultTIF: Default time in force value
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesDefaultTIF :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | displaySize
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesDisplaySize :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | error: Returns a description on any errors with order presets
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesError :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | fraqInt: decimal places for fractional order size
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqInt :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | fraqTypes
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqTypes :: (GHC.Maybe.Maybe ([Get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqTypes]))
  -- | ibalgoTypes
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesIbalgoTypes :: (GHC.Maybe.Maybe ([Get_iserver_contract__conid__info_and_rulesResponseBody200RulesIbalgoTypes]))
  -- | increment: Price increment value
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesIncrement :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | incrementDigits: Number of digits for price increment
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesIncrementDigits :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | limitPrice: Limit price
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesLimitPrice :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | negativeCapable: trading negative price support
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesNegativeCapable :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | orderDefaults: If object returned will provide the defaults based on user settings
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaults :: (GHC.Maybe.Maybe ([Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaults]))
  -- | orderOrigination: Order origin designation for US securities options and Options Clearing Corporation
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderOrigination :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | orderTypes
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypes :: (GHC.Maybe.Maybe ([Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypes]))
  -- | orderTypesOutside
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypesOutside :: (GHC.Maybe.Maybe ([Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypesOutside]))
  -- | preview: order preview required
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesPreview :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | priceMagnifier: Price Magnifier
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesPriceMagnifier :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | sizeIncrement: increment quantity value
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesSizeIncrement :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | stopprice: Stop price
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesStopprice :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | tifTypes
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesTifTypes :: (GHC.Maybe.Maybe ([Get_iserver_contract__conid__info_and_rulesResponseBody200RulesTifTypes]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_contract__conid__info_and_rulesResponseBody200Rules
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("algoEligible" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesAlgoEligible obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("canTradeAcctIds" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesCanTradeAcctIds obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashCcy" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesCashCcy obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashQtyIncr" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesCashQtyIncr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashSize" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesCashSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cqtTypes" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesCqtTypes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("defaultSize" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesDefaultSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("defaultTIF" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesDefaultTIF obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("displaySize" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesDisplaySize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesError obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fraqInt" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqInt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fraqTypes" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqTypes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ibalgoTypes" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesIbalgoTypes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("increment" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesIncrement obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("incrementDigits" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesIncrementDigits obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("limitPrice" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesLimitPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("negativeCapable" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesNegativeCapable obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderDefaults" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaults obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderOrigination" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderOrigination obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderTypes" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderTypesOutside" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypesOutside obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preview" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesPreview obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("priceMagnifier" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesPriceMagnifier obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sizeIncrement" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesSizeIncrement obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stopprice" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesStopprice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tifTypes" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesTifTypes obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("algoEligible" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesAlgoEligible obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("canTradeAcctIds" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesCanTradeAcctIds obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashCcy" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesCashCcy obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashQtyIncr" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesCashQtyIncr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashSize" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesCashSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cqtTypes" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesCqtTypes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("defaultSize" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesDefaultSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("defaultTIF" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesDefaultTIF obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("displaySize" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesDisplaySize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesError obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fraqInt" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqInt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fraqTypes" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqTypes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ibalgoTypes" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesIbalgoTypes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("increment" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesIncrement obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("incrementDigits" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesIncrementDigits obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("limitPrice" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesLimitPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("negativeCapable" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesNegativeCapable obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderDefaults" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaults obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderOrigination" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderOrigination obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderTypes" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderTypesOutside" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypesOutside obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preview" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesPreview obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("priceMagnifier" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesPriceMagnifier obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sizeIncrement" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesSizeIncrement obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stopprice" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesStopprice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tifTypes" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesTifTypes obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_contract__conid__info_and_rulesResponseBody200Rules
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_contract__conid__info_and_rulesResponseBody200Rules" (\obj -> (((((((((((((((((((((((((GHC.Base.pure Get_iserver_contract__conid__info_and_rulesResponseBody200Rules GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "algoEligible")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "canTradeAcctIds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cashCcy")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cashQtyIncr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cashSize")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cqtTypes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "defaultSize")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "defaultTIF")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "displaySize")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fraqInt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fraqTypes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ibalgoTypes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "increment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "incrementDigits")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "limitPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "negativeCapable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "orderDefaults")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "orderOrigination")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "orderTypes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "orderTypesOutside")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "preview")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "priceMagnifier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sizeIncrement")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "stopprice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tifTypes"))
-- | Create a new 'Get_iserver_contract__conid__info_and_rulesResponseBody200Rules' with all required fields.
mkGet_iserver_contract__conid__info_and_rulesResponseBody200Rules :: Get_iserver_contract__conid__info_and_rulesResponseBody200Rules
mkGet_iserver_contract__conid__info_and_rulesResponseBody200Rules = Get_iserver_contract__conid__info_and_rulesResponseBody200Rules{get_iserver_contract__conid__info_and_rulesResponseBody200RulesAlgoEligible = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesCanTradeAcctIds = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesCashCcy = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesCashQtyIncr = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesCashSize = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesCqtTypes = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesDefaultSize = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesDefaultTIF = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesDisplaySize = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesError = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqInt = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqTypes = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesIbalgoTypes = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesIncrement = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesIncrementDigits = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesLimitPrice = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesNegativeCapable = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaults = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderOrigination = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypes = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypesOutside = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesPreview = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesPriceMagnifier = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesSizeIncrement = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesStopprice = GHC.Maybe.Nothing,
                                                                                                                                    get_iserver_contract__conid__info_and_rulesResponseBody200RulesTifTypes = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/{conid}\/info-and-rules.GET.responses.200.content.application\/json.schema.properties.rules.items.properties.canTradeAcctIds.items@ in the specification.
-- 
-- 
data Get_iserver_contract__conid__info_and_rulesResponseBody200RulesCanTradeAcctIds = Get_iserver_contract__conid__info_and_rulesResponseBody200RulesCanTradeAcctIds {
  -- | 0: List of Accounts that can be traded
  get_iserver_contract__conid__info_and_rulesResponseBody200RulesCanTradeAcctIds0 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_contract__conid__info_and_rulesResponseBody200RulesCanTradeAcctIds
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesCanTradeAcctIds0 obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesCanTradeAcctIds0 obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_contract__conid__info_and_rulesResponseBody200RulesCanTradeAcctIds
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_contract__conid__info_and_rulesResponseBody200RulesCanTradeAcctIds" (\obj -> GHC.Base.pure Get_iserver_contract__conid__info_and_rulesResponseBody200RulesCanTradeAcctIds GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "0"))
-- | Create a new 'Get_iserver_contract__conid__info_and_rulesResponseBody200RulesCanTradeAcctIds' with all required fields.
mkGet_iserver_contract__conid__info_and_rulesResponseBody200RulesCanTradeAcctIds :: Get_iserver_contract__conid__info_and_rulesResponseBody200RulesCanTradeAcctIds
mkGet_iserver_contract__conid__info_and_rulesResponseBody200RulesCanTradeAcctIds = Get_iserver_contract__conid__info_and_rulesResponseBody200RulesCanTradeAcctIds{get_iserver_contract__conid__info_and_rulesResponseBody200RulesCanTradeAcctIds0 = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/{conid}\/info-and-rules.GET.responses.200.content.application\/json.schema.properties.rules.items.properties.cqtTypes.items@ in the specification.
-- 
-- 
data Get_iserver_contract__conid__info_and_rulesResponseBody200RulesCqtTypes = Get_iserver_contract__conid__info_and_rulesResponseBody200RulesCqtTypes {
  -- | 0: order types that support cash quantity trades
  get_iserver_contract__conid__info_and_rulesResponseBody200RulesCqtTypes0 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_contract__conid__info_and_rulesResponseBody200RulesCqtTypes
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesCqtTypes0 obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesCqtTypes0 obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_contract__conid__info_and_rulesResponseBody200RulesCqtTypes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_contract__conid__info_and_rulesResponseBody200RulesCqtTypes" (\obj -> GHC.Base.pure Get_iserver_contract__conid__info_and_rulesResponseBody200RulesCqtTypes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "0"))
-- | Create a new 'Get_iserver_contract__conid__info_and_rulesResponseBody200RulesCqtTypes' with all required fields.
mkGet_iserver_contract__conid__info_and_rulesResponseBody200RulesCqtTypes :: Get_iserver_contract__conid__info_and_rulesResponseBody200RulesCqtTypes
mkGet_iserver_contract__conid__info_and_rulesResponseBody200RulesCqtTypes = Get_iserver_contract__conid__info_and_rulesResponseBody200RulesCqtTypes{get_iserver_contract__conid__info_and_rulesResponseBody200RulesCqtTypes0 = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/{conid}\/info-and-rules.GET.responses.200.content.application\/json.schema.properties.rules.items.properties.fraqTypes.items@ in the specification.
-- 
-- 
data Get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqTypes = Get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqTypes {
  -- | 0: order types that support fractional trades
  get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqTypes0 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqTypes
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqTypes0 obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqTypes0 obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqTypes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqTypes" (\obj -> GHC.Base.pure Get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqTypes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "0"))
-- | Create a new 'Get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqTypes' with all required fields.
mkGet_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqTypes :: Get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqTypes
mkGet_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqTypes = Get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqTypes{get_iserver_contract__conid__info_and_rulesResponseBody200RulesFraqTypes0 = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/{conid}\/info-and-rules.GET.responses.200.content.application\/json.schema.properties.rules.items.properties.ibalgoTypes.items@ in the specification.
-- 
-- 
data Get_iserver_contract__conid__info_and_rulesResponseBody200RulesIbalgoTypes = Get_iserver_contract__conid__info_and_rulesResponseBody200RulesIbalgoTypes {
  -- | 0: order types that support IB Algos
  get_iserver_contract__conid__info_and_rulesResponseBody200RulesIbalgoTypes0 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_contract__conid__info_and_rulesResponseBody200RulesIbalgoTypes
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesIbalgoTypes0 obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesIbalgoTypes0 obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_contract__conid__info_and_rulesResponseBody200RulesIbalgoTypes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_contract__conid__info_and_rulesResponseBody200RulesIbalgoTypes" (\obj -> GHC.Base.pure Get_iserver_contract__conid__info_and_rulesResponseBody200RulesIbalgoTypes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "0"))
-- | Create a new 'Get_iserver_contract__conid__info_and_rulesResponseBody200RulesIbalgoTypes' with all required fields.
mkGet_iserver_contract__conid__info_and_rulesResponseBody200RulesIbalgoTypes :: Get_iserver_contract__conid__info_and_rulesResponseBody200RulesIbalgoTypes
mkGet_iserver_contract__conid__info_and_rulesResponseBody200RulesIbalgoTypes = Get_iserver_contract__conid__info_and_rulesResponseBody200RulesIbalgoTypes{get_iserver_contract__conid__info_and_rulesResponseBody200RulesIbalgoTypes0 = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/{conid}\/info-and-rules.GET.responses.200.content.application\/json.schema.properties.rules.items.properties.orderDefaults.items@ in the specification.
-- 
-- 
data Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaults = Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaults {
  -- | string: orderType
  get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsString :: (GHC.Maybe.Maybe ([Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsString]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaults
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("string" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsString obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("string" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsString obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaults
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaults" (\obj -> GHC.Base.pure Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaults GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "string"))
-- | Create a new 'Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaults' with all required fields.
mkGet_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaults :: Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaults
mkGet_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaults = Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaults{get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsString = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/{conid}\/info-and-rules.GET.responses.200.content.application\/json.schema.properties.rules.items.properties.orderDefaults.items.properties.string.items@ in the specification.
-- 
-- 
data Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsString = Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsString {
  -- | LP: Limit Price value
  get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringLP :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ORTH: Outside of Regular Trading Hours
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringORTH :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | PC: Price Cap value
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringPC :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ROA: Releative offset amount
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringROA :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ROP: Relative offset percent
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringROP :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | SP: Stop Price value
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringSP :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | TA: Trailing amount value
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringTA :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | TT: Touch trigger price
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringTT :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | TU: Trailing unit
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringTU :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | UNP: Use Net Price for Bonds
  , get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringUNP :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsString
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("LP" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringLP obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ORTH" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringORTH obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("PC" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringPC obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ROA" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringROA obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ROP" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringROP obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("SP" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringSP obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("TA" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringTA obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("TT" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringTT obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("TU" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringTU obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("UNP" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringUNP obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("LP" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringLP obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ORTH" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringORTH obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("PC" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringPC obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ROA" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringROA obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ROP" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringROP obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("SP" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringSP obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("TA" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringTA obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("TT" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringTT obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("TU" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringTU obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("UNP" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringUNP obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsString
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsString" (\obj -> (((((((((GHC.Base.pure Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsString GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "LP")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ORTH")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "PC")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ROA")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ROP")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "SP")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "TA")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "TT")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "TU")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "UNP"))
-- | Create a new 'Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsString' with all required fields.
mkGet_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsString :: Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsString
mkGet_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsString = Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsString{get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringLP = GHC.Maybe.Nothing,
                                                                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringORTH = GHC.Maybe.Nothing,
                                                                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringPC = GHC.Maybe.Nothing,
                                                                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringROA = GHC.Maybe.Nothing,
                                                                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringROP = GHC.Maybe.Nothing,
                                                                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringSP = GHC.Maybe.Nothing,
                                                                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringTA = GHC.Maybe.Nothing,
                                                                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringTT = GHC.Maybe.Nothing,
                                                                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringTU = GHC.Maybe.Nothing,
                                                                                                                                                                          get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderDefaultsStringUNP = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/{conid}\/info-and-rules.GET.responses.200.content.application\/json.schema.properties.rules.items.properties.orderTypes.items@ in the specification.
-- 
-- 
data Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypes = Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypes {
  -- | 0: list of available order types
  get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypes0 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypes
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypes0 obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypes0 obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypes" (\obj -> GHC.Base.pure Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "0"))
-- | Create a new 'Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypes' with all required fields.
mkGet_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypes :: Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypes
mkGet_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypes = Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypes{get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypes0 = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/{conid}\/info-and-rules.GET.responses.200.content.application\/json.schema.properties.rules.items.properties.orderTypesOutside.items@ in the specification.
-- 
-- 
data Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypesOutside = Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypesOutside {
  -- | 0: order types that support outside of regular trading hours
  get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypesOutside0 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypesOutside
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypesOutside0 obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypesOutside0 obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypesOutside
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypesOutside" (\obj -> GHC.Base.pure Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypesOutside GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "0"))
-- | Create a new 'Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypesOutside' with all required fields.
mkGet_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypesOutside :: Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypesOutside
mkGet_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypesOutside = Get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypesOutside{get_iserver_contract__conid__info_and_rulesResponseBody200RulesOrderTypesOutside0 = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/{conid}\/info-and-rules.GET.responses.200.content.application\/json.schema.properties.rules.items.properties.tifTypes.items@ in the specification.
-- 
-- 
data Get_iserver_contract__conid__info_and_rulesResponseBody200RulesTifTypes = Get_iserver_contract__conid__info_and_rulesResponseBody200RulesTifTypes {
  -- | 0: Time in Force values, formatted with o for supporting Outside regular trading hours and a for Algo trading
  get_iserver_contract__conid__info_and_rulesResponseBody200RulesTifTypes0 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_contract__conid__info_and_rulesResponseBody200RulesTifTypes
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesTifTypes0 obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__info_and_rulesResponseBody200RulesTifTypes0 obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_contract__conid__info_and_rulesResponseBody200RulesTifTypes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_contract__conid__info_and_rulesResponseBody200RulesTifTypes" (\obj -> GHC.Base.pure Get_iserver_contract__conid__info_and_rulesResponseBody200RulesTifTypes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "0"))
-- | Create a new 'Get_iserver_contract__conid__info_and_rulesResponseBody200RulesTifTypes' with all required fields.
mkGet_iserver_contract__conid__info_and_rulesResponseBody200RulesTifTypes :: Get_iserver_contract__conid__info_and_rulesResponseBody200RulesTifTypes
mkGet_iserver_contract__conid__info_and_rulesResponseBody200RulesTifTypes = Get_iserver_contract__conid__info_and_rulesResponseBody200RulesTifTypes{get_iserver_contract__conid__info_and_rulesResponseBody200RulesTifTypes0 = GHC.Maybe.Nothing}
-- | > GET /iserver/contract/{conid}/info-and-rules
-- 
-- The same as 'get_iserver_contract__conid__info_and_rules' but accepts an explicit configuration.
get_iserver_contract__conid__info_and_rulesWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_iserver_contract__conid__info_and_rulesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Get_iserver_contract__conid__info_and_rulesResponse) -- ^ Monadic computation which returns the result of the operation
get_iserver_contract__conid__info_and_rulesWithConfiguration config
                                                             parameters = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Get_iserver_contract__conid__info_and_rulesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_iserver_contract__conid__info_and_rulesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
et_iserver_contract__conid__info_and_rulesResponseBody200)
                                                                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/iserver/contract/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (get_iserver_contract__conid__info_and_rulesParametersPathConid parameters))) GHC.Base.++ "/info-and-rules"))) [IBKR.Common.QueryParameter (Data.Text.pack "isBuy") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_contract__conid__info_and_rulesParametersQueryIsBuy parameters)) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /iserver/contract/{conid}/info-and-rules
-- 
-- The same as 'get_iserver_contract__conid__info_and_rules' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_iserver_contract__conid__info_and_rulesRaw :: forall m . IBKR.Common.MonadHTTP m => Get_iserver_contract__conid__info_and_rulesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_iserver_contract__conid__info_and_rulesRaw parameters = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/iserver/contract/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (get_iserver_contract__conid__info_and_rulesParametersPathConid parameters))) GHC.Base.++ "/info-and-rules"))) [IBKR.Common.QueryParameter (Data.Text.pack "isBuy") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_contract__conid__info_and_rulesParametersQueryIsBuy parameters)) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /iserver/contract/{conid}/info-and-rules
-- 
-- The same as 'get_iserver_contract__conid__info_and_rules' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_iserver_contract__conid__info_and_rulesWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_iserver_contract__conid__info_and_rulesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_iserver_contract__conid__info_and_rulesWithConfigurationRaw config
                                                                parameters = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/iserver/contract/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (get_iserver_contract__conid__info_and_rulesParametersPathConid parameters))) GHC.Base.++ "/info-and-rules"))) [IBKR.Common.QueryParameter (Data.Text.pack "isBuy") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_contract__conid__info_and_rulesParametersQueryIsBuy parameters)) (Data.Text.pack "form") GHC.Types.False])
