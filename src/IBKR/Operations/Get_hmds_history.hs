-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_hmds_history
module IBKR.Operations.Get_hmds_history where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /hmds/history
-- 
-- Using direct to market data farm connection, will provide a list of historical market data for a given conid
get_hmds_history :: forall m . IBKR.Common.MonadHTTP m => Get_hmds_historyParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_hmds_historyResponse) -- ^ Monadic computation which returns the result of the operation
get_hmds_history parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_hmds_historyResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_hmds_historyResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         History_result)
                                                                                                                                                                         | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_hmds_historyResponse400
                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/hmds/history") [IBKR.Common.QueryParameter (Data.Text.pack "conid") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_hmds_historyParametersQueryConid parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                          IBKR.Common.QueryParameter (Data.Text.pack "period") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_hmds_historyParametersQueryPeriod parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                          IBKR.Common.QueryParameter (Data.Text.pack "bar") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_hmds_historyParametersQueryBar parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                          IBKR.Common.QueryParameter (Data.Text.pack "outsideRth") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_hmds_historyParametersQueryOutsideRth parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/hmds\/history.GET.parameters@ in the specification.
-- 
-- 
data Get_hmds_historyParameters = Get_hmds_historyParameters {
  -- | queryBar: Represents the parameter named \'bar\'
  -- 
  -- Duration of time for each candlestick bar.
  --   * min: Minutes
  --   * h: Hours
  --   * d: Days
  --   * w: Weeks
  --   * m: Months
  get_hmds_historyParametersQueryBar :: (GHC.Maybe.Maybe Get_hmds_historyParametersQueryBar)
  -- | queryConid: Represents the parameter named \'conid\'
  -- 
  -- contract id
  , get_hmds_historyParametersQueryConid :: GHC.Types.Int
  -- | queryOutsideRth: Represents the parameter named \'outsideRth\'
  -- 
  -- For contracts that support it, will determine if history data includes outside of regular trading hours.
  , get_hmds_historyParametersQueryOutsideRth :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | queryPeriod: Represents the parameter named \'period\'
  -- 
  -- Time period for history request. 
  --   * min: Minutes
  --   * h: Hours
  --   * d: Days
  --   * w: Weeks
  --   * m: Months
  --   * y: Years
  , get_hmds_historyParametersQueryPeriod :: Get_hmds_historyParametersQueryPeriod
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_hmds_historyParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryBar" Data.Aeson.Types.ToJSON..=)) (get_hmds_historyParametersQueryBar obj) : ["queryConid" Data.Aeson.Types.ToJSON..= get_hmds_historyParametersQueryConid obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOutsideRth" Data.Aeson.Types.ToJSON..=)) (get_hmds_historyParametersQueryOutsideRth obj) : ["queryPeriod" Data.Aeson.Types.ToJSON..= get_hmds_historyParametersQueryPeriod obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryBar" Data.Aeson.Types.ToJSON..=)) (get_hmds_historyParametersQueryBar obj) : ["queryConid" Data.Aeson.Types.ToJSON..= get_hmds_historyParametersQueryConid obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOutsideRth" Data.Aeson.Types.ToJSON..=)) (get_hmds_historyParametersQueryOutsideRth obj) : ["queryPeriod" Data.Aeson.Types.ToJSON..= get_hmds_historyParametersQueryPeriod obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_hmds_historyParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_hmds_historyParameters" (\obj -> (((GHC.Base.pure Get_hmds_historyParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryBar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryConid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryOutsideRth")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryPeriod"))
-- | Create a new 'Get_hmds_historyParameters' with all required fields.
mkGet_hmds_historyParameters :: GHC.Types.Int -- ^ 'get_hmds_historyParametersQueryConid'
  -> Get_hmds_historyParametersQueryPeriod -- ^ 'get_hmds_historyParametersQueryPeriod'
  -> Get_hmds_historyParameters
mkGet_hmds_historyParameters get_hmds_historyParametersQueryConid get_hmds_historyParametersQueryPeriod = Get_hmds_historyParameters{get_hmds_historyParametersQueryBar = GHC.Maybe.Nothing,
                                                                                                                                     get_hmds_historyParametersQueryConid = get_hmds_historyParametersQueryConid,
                                                                                                                                     get_hmds_historyParametersQueryOutsideRth = GHC.Maybe.Nothing,
                                                                                                                                     get_hmds_historyParametersQueryPeriod = get_hmds_historyParametersQueryPeriod}
-- | Defines the enum schema located at @paths.\/hmds\/history.GET.parameters.properties.queryBar@ in the specification.
-- 
-- Represents the parameter named \'bar\'
-- 
-- Duration of time for each candlestick bar.
--   * min: Minutes
--   * h: Hours
--   * d: Days
--   * w: Weeks
--   * m: Months
data Get_hmds_historyParametersQueryBar =
   Get_hmds_historyParametersQueryBarOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Get_hmds_historyParametersQueryBarTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Get_hmds_historyParametersQueryBarEnumMin -- ^ Represents the JSON value @"min"@
  | Get_hmds_historyParametersQueryBarEnumH -- ^ Represents the JSON value @"h"@
  | Get_hmds_historyParametersQueryBarEnumD -- ^ Represents the JSON value @"d"@
  | Get_hmds_historyParametersQueryBarEnumW -- ^ Represents the JSON value @"w"@
  | Get_hmds_historyParametersQueryBarEnumM -- ^ Represents the JSON value @"m"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_hmds_historyParametersQueryBar
    where toJSON (Get_hmds_historyParametersQueryBarOther val) = val
          toJSON (Get_hmds_historyParametersQueryBarTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (Get_hmds_historyParametersQueryBarEnumMin) = "min"
          toJSON (Get_hmds_historyParametersQueryBarEnumH) = "h"
          toJSON (Get_hmds_historyParametersQueryBarEnumD) = "d"
          toJSON (Get_hmds_historyParametersQueryBarEnumW) = "w"
          toJSON (Get_hmds_historyParametersQueryBarEnumM) = "m"
instance Data.Aeson.Types.FromJSON.FromJSON Get_hmds_historyParametersQueryBar
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "min" -> Get_hmds_historyParametersQueryBarEnumMin
                                            | val GHC.Classes.== "h" -> Get_hmds_historyParametersQueryBarEnumH
                                            | val GHC.Classes.== "d" -> Get_hmds_historyParametersQueryBarEnumD
                                            | val GHC.Classes.== "w" -> Get_hmds_historyParametersQueryBarEnumW
                                            | val GHC.Classes.== "m" -> Get_hmds_historyParametersQueryBarEnumM
                                            | GHC.Base.otherwise -> Get_hmds_historyParametersQueryBarOther val)
-- | Defines the enum schema located at @paths.\/hmds\/history.GET.parameters.properties.queryPeriod@ in the specification.
-- 
-- Represents the parameter named \'period\'
-- 
-- Time period for history request. 
--   * min: Minutes
--   * h: Hours
--   * d: Days
--   * w: Weeks
--   * m: Months
--   * y: Years
data Get_hmds_historyParametersQueryPeriod =
   Get_hmds_historyParametersQueryPeriodOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Get_hmds_historyParametersQueryPeriodTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Get_hmds_historyParametersQueryPeriodEnumMin -- ^ Represents the JSON value @"min"@
  | Get_hmds_historyParametersQueryPeriodEnumH -- ^ Represents the JSON value @"h"@
  | Get_hmds_historyParametersQueryPeriodEnumD -- ^ Represents the JSON value @"d"@
  | Get_hmds_historyParametersQueryPeriodEnumW -- ^ Represents the JSON value @"w"@
  | Get_hmds_historyParametersQueryPeriodEnumM -- ^ Represents the JSON value @"m"@
  | Get_hmds_historyParametersQueryPeriodEnumTrue -- ^ Represents the JSON value @true@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_hmds_historyParametersQueryPeriod
    where toJSON (Get_hmds_historyParametersQueryPeriodOther val) = val
          toJSON (Get_hmds_historyParametersQueryPeriodTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (Get_hmds_historyParametersQueryPeriodEnumMin) = "min"
          toJSON (Get_hmds_historyParametersQueryPeriodEnumH) = "h"
          toJSON (Get_hmds_historyParametersQueryPeriodEnumD) = "d"
          toJSON (Get_hmds_historyParametersQueryPeriodEnumW) = "w"
          toJSON (Get_hmds_historyParametersQueryPeriodEnumM) = "m"
          toJSON (Get_hmds_historyParametersQueryPeriodEnumTrue) = Data.Aeson.Types.Internal.Bool GHC.Types.True
instance Data.Aeson.Types.FromJSON.FromJSON Get_hmds_historyParametersQueryPeriod
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "min" -> Get_hmds_historyParametersQueryPeriodEnumMin
                                            | val GHC.Classes.== "h" -> Get_hmds_historyParametersQueryPeriodEnumH
                                            | val GHC.Classes.== "d" -> Get_hmds_historyParametersQueryPeriodEnumD
                                            | val GHC.Classes.== "w" -> Get_hmds_historyParametersQueryPeriodEnumW
                                            | val GHC.Classes.== "m" -> Get_hmds_historyParametersQueryPeriodEnumM
                                            | val GHC.Classes.== Data.Aeson.Types.Internal.Bool GHC.Types.True -> Get_hmds_historyParametersQueryPeriodEnumTrue
                                            | GHC.Base.otherwise -> Get_hmds_historyParametersQueryPeriodOther val)
-- | Represents a response of the operation 'get_hmds_history'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_hmds_historyResponseError' is used.
data Get_hmds_historyResponse =
   Get_hmds_historyResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_hmds_historyResponse200 History_result -- ^ Valid result
  | Get_hmds_historyResponse400 -- ^ Bad request
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > GET /hmds/history
-- 
-- The same as 'get_hmds_history' but accepts an explicit configuration.
get_hmds_historyWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_hmds_historyParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Get_hmds_historyResponse) -- ^ Monadic computation which returns the result of the operation
get_hmds_historyWithConfiguration config
                                  parameters = GHC.Base.fmap (\response_3 -> GHC.Base.fmap (Data.Either.either Get_hmds_historyResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_hmds_historyResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          History_result)
                                                                                                                                                                                          | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_hmds_historyResponse400
                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_3) response_3) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/hmds/history") [IBKR.Common.QueryParameter (Data.Text.pack "conid") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_hmds_historyParametersQueryConid parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                 IBKR.Common.QueryParameter (Data.Text.pack "period") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_hmds_historyParametersQueryPeriod parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                 IBKR.Common.QueryParameter (Data.Text.pack "bar") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_hmds_historyParametersQueryBar parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                 IBKR.Common.QueryParameter (Data.Text.pack "outsideRth") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_hmds_historyParametersQueryOutsideRth parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /hmds/history
-- 
-- The same as 'get_hmds_history' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_hmds_historyRaw :: forall m . IBKR.Common.MonadHTTP m => Get_hmds_historyParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_hmds_historyRaw parameters = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/hmds/history") [IBKR.Common.QueryParameter (Data.Text.pack "conid") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_hmds_historyParametersQueryConid parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                            IBKR.Common.QueryParameter (Data.Text.pack "period") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_hmds_historyParametersQueryPeriod parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                            IBKR.Common.QueryParameter (Data.Text.pack "bar") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_hmds_historyParametersQueryBar parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                            IBKR.Common.QueryParameter (Data.Text.pack "outsideRth") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_hmds_historyParametersQueryOutsideRth parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /hmds/history
-- 
-- The same as 'get_hmds_history' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_hmds_historyWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_hmds_historyParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_hmds_historyWithConfigurationRaw config
                                     parameters = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/hmds/history") [IBKR.Common.QueryParameter (Data.Text.pack "conid") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_hmds_historyParametersQueryConid parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                   IBKR.Common.QueryParameter (Data.Text.pack "period") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_hmds_historyParametersQueryPeriod parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                   IBKR.Common.QueryParameter (Data.Text.pack "bar") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_hmds_historyParametersQueryBar parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                   IBKR.Common.QueryParameter (Data.Text.pack "outsideRth") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_hmds_historyParametersQueryOutsideRth parameters) (Data.Text.pack "form") GHC.Types.False])
