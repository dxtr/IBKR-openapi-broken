-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_fyi_deliveryoptions
module IBKR.Operations.Get_fyi_deliveryoptions where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /fyi/deliveryoptions
-- 
-- options for sending fyis to email and other devices
get_fyi_deliveryoptions :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_fyi_deliveryoptionsResponse) -- ^ Monadic computation which returns the result of the operation
get_fyi_deliveryoptions = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_fyi_deliveryoptionsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_fyi_deliveryoptionsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   Get_fyi_deliveryoptionsResponseBody200)
                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/fyi/deliveryoptions") GHC.Base.mempty)
-- | Represents a response of the operation 'get_fyi_deliveryoptions'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_fyi_deliveryoptionsResponseError' is used.
data Get_fyi_deliveryoptionsResponse =
   Get_fyi_deliveryoptionsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_fyi_deliveryoptionsResponse200 Get_fyi_deliveryoptionsResponseBody200 -- ^ An object
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/fyi\/deliveryoptions.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Get_fyi_deliveryoptionsResponseBody200 = Get_fyi_deliveryoptionsResponseBody200 {
  -- | E
  get_fyi_deliveryoptionsResponseBody200E :: (GHC.Maybe.Maybe ([Get_fyi_deliveryoptionsResponseBody200E]))
  -- | M: Email option is enabled or not 0-off, 1-on.
  , get_fyi_deliveryoptionsResponseBody200M :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_fyi_deliveryoptionsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("E" Data.Aeson.Types.ToJSON..=)) (get_fyi_deliveryoptionsResponseBody200E obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("M" Data.Aeson.Types.ToJSON..=)) (get_fyi_deliveryoptionsResponseBody200M obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("E" Data.Aeson.Types.ToJSON..=)) (get_fyi_deliveryoptionsResponseBody200E obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("M" Data.Aeson.Types.ToJSON..=)) (get_fyi_deliveryoptionsResponseBody200M obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_fyi_deliveryoptionsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_fyi_deliveryoptionsResponseBody200" (\obj -> (GHC.Base.pure Get_fyi_deliveryoptionsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "E")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "M"))
-- | Create a new 'Get_fyi_deliveryoptionsResponseBody200' with all required fields.
mkGet_fyi_deliveryoptionsResponseBody200 :: Get_fyi_deliveryoptionsResponseBody200
mkGet_fyi_deliveryoptionsResponseBody200 = Get_fyi_deliveryoptionsResponseBody200{get_fyi_deliveryoptionsResponseBody200E = GHC.Maybe.Nothing,
                                                                                  get_fyi_deliveryoptionsResponseBody200M = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/fyi\/deliveryoptions.GET.responses.200.content.application\/json.schema.properties.E.items@ in the specification.
-- 
-- device
data Get_fyi_deliveryoptionsResponseBody200E = Get_fyi_deliveryoptionsResponseBody200E {
  -- | A: device is enabled or not 0-true, 1-false.
  get_fyi_deliveryoptionsResponseBody200EA :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | I: device id
  , get_fyi_deliveryoptionsResponseBody200EI :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | NM: device name
  , get_fyi_deliveryoptionsResponseBody200ENM :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | UI: unique device id
  , get_fyi_deliveryoptionsResponseBody200EUI :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_fyi_deliveryoptionsResponseBody200E
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("A" Data.Aeson.Types.ToJSON..=)) (get_fyi_deliveryoptionsResponseBody200EA obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("I" Data.Aeson.Types.ToJSON..=)) (get_fyi_deliveryoptionsResponseBody200EI obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("NM" Data.Aeson.Types.ToJSON..=)) (get_fyi_deliveryoptionsResponseBody200ENM obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("UI" Data.Aeson.Types.ToJSON..=)) (get_fyi_deliveryoptionsResponseBody200EUI obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("A" Data.Aeson.Types.ToJSON..=)) (get_fyi_deliveryoptionsResponseBody200EA obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("I" Data.Aeson.Types.ToJSON..=)) (get_fyi_deliveryoptionsResponseBody200EI obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("NM" Data.Aeson.Types.ToJSON..=)) (get_fyi_deliveryoptionsResponseBody200ENM obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("UI" Data.Aeson.Types.ToJSON..=)) (get_fyi_deliveryoptionsResponseBody200EUI obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_fyi_deliveryoptionsResponseBody200E
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_fyi_deliveryoptionsResponseBody200E" (\obj -> (((GHC.Base.pure Get_fyi_deliveryoptionsResponseBody200E GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "A")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "I")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "NM")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "UI"))
-- | Create a new 'Get_fyi_deliveryoptionsResponseBody200E' with all required fields.
mkGet_fyi_deliveryoptionsResponseBody200E :: Get_fyi_deliveryoptionsResponseBody200E
mkGet_fyi_deliveryoptionsResponseBody200E = Get_fyi_deliveryoptionsResponseBody200E{get_fyi_deliveryoptionsResponseBody200EA = GHC.Maybe.Nothing,
                                                                                    get_fyi_deliveryoptionsResponseBody200EI = GHC.Maybe.Nothing,
                                                                                    get_fyi_deliveryoptionsResponseBody200ENM = GHC.Maybe.Nothing,
                                                                                    get_fyi_deliveryoptionsResponseBody200EUI = GHC.Maybe.Nothing}
-- | > GET /fyi/deliveryoptions
-- 
-- The same as 'get_fyi_deliveryoptions' but accepts an explicit configuration.
get_fyi_deliveryoptionsWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Get_fyi_deliveryoptionsResponse) -- ^ Monadic computation which returns the result of the operation
get_fyi_deliveryoptionsWithConfiguration config = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Get_fyi_deliveryoptionsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_fyi_deliveryoptionsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                           Get_fyi_deliveryoptionsResponseBody200)
                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/fyi/deliveryoptions") GHC.Base.mempty)
-- | > GET /fyi/deliveryoptions
-- 
-- The same as 'get_fyi_deliveryoptions' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_fyi_deliveryoptionsRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_fyi_deliveryoptionsRaw = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/fyi/deliveryoptions") GHC.Base.mempty)
-- | > GET /fyi/deliveryoptions
-- 
-- The same as 'get_fyi_deliveryoptions' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_fyi_deliveryoptionsWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_fyi_deliveryoptionsWithConfigurationRaw config = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/fyi/deliveryoptions") GHC.Base.mempty)
