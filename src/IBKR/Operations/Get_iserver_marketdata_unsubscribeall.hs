-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_iserver_marketdata_unsubscribeall
module IBKR.Operations.Get_iserver_marketdata_unsubscribeall where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /iserver/marketdata/unsubscribeall
-- 
-- Cancel all market data request(s). To cancel market data for given conid, see \/iserver\/marketdata\/{conid}\/unsubscribe.
get_iserver_marketdata_unsubscribeall :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_iserver_marketdata_unsubscribeallResponse) -- ^ Monadic computation which returns the result of the operation
get_iserver_marketdata_unsubscribeall = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_iserver_marketdata_unsubscribeallResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_iserver_marketdata_unsubscribeallResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Get_iserver_marketdata_unsubscribeallResponseBody200)
                                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/iserver/marketdata/unsubscribeall") GHC.Base.mempty)
-- | Represents a response of the operation 'get_iserver_marketdata_unsubscribeall'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_iserver_marketdata_unsubscribeallResponseError' is used.
data Get_iserver_marketdata_unsubscribeallResponse =
   Get_iserver_marketdata_unsubscribeallResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_iserver_marketdata_unsubscribeallResponse200 Get_iserver_marketdata_unsubscribeallResponseBody200 -- ^ confirms market data is cancelled
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/iserver\/marketdata\/unsubscribeall.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Get_iserver_marketdata_unsubscribeallResponseBody200 = Get_iserver_marketdata_unsubscribeallResponseBody200 {
  -- | confirmed: true means market data is cancelled, false means it is not.
  get_iserver_marketdata_unsubscribeallResponseBody200Confirmed :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_marketdata_unsubscribeallResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("confirmed" Data.Aeson.Types.ToJSON..=)) (get_iserver_marketdata_unsubscribeallResponseBody200Confirmed obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("confirmed" Data.Aeson.Types.ToJSON..=)) (get_iserver_marketdata_unsubscribeallResponseBody200Confirmed obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_marketdata_unsubscribeallResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_marketdata_unsubscribeallResponseBody200" (\obj -> GHC.Base.pure Get_iserver_marketdata_unsubscribeallResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "confirmed"))
-- | Create a new 'Get_iserver_marketdata_unsubscribeallResponseBody200' with all required fields.
mkGet_iserver_marketdata_unsubscribeallResponseBody200 :: Get_iserver_marketdata_unsubscribeallResponseBody200
mkGet_iserver_marketdata_unsubscribeallResponseBody200 = Get_iserver_marketdata_unsubscribeallResponseBody200{get_iserver_marketdata_unsubscribeallResponseBody200Confirmed = GHC.Maybe.Nothing}
-- | > GET /iserver/marketdata/unsubscribeall
-- 
-- The same as 'get_iserver_marketdata_unsubscribeall' but accepts an explicit configuration.
get_iserver_marketdata_unsubscribeallWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Get_iserver_marketdata_unsubscribeallResponse) -- ^ Monadic computation which returns the result of the operation
get_iserver_marketdata_unsubscribeallWithConfiguration config = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Get_iserver_marketdata_unsubscribeallResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_iserver_marketdata_unsubscribeallResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Get_iserver_marketdata_unsubscribeallResponseBody200)
                                                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/iserver/marketdata/unsubscribeall") GHC.Base.mempty)
-- | > GET /iserver/marketdata/unsubscribeall
-- 
-- The same as 'get_iserver_marketdata_unsubscribeall' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_iserver_marketdata_unsubscribeallRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_iserver_marketdata_unsubscribeallRaw = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/iserver/marketdata/unsubscribeall") GHC.Base.mempty)
-- | > GET /iserver/marketdata/unsubscribeall
-- 
-- The same as 'get_iserver_marketdata_unsubscribeall' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_iserver_marketdata_unsubscribeallWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_iserver_marketdata_unsubscribeallWithConfigurationRaw config = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/iserver/marketdata/unsubscribeall") GHC.Base.mempty)
