-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation delete_ccp_order
module IBKR.Operations.Delete_ccp_order where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > DELETE /ccp/order
-- 
-- Sends an Order cancellation request. The status of the order can be queried through \/ccp\/order. Passing arguments as GET is also supported (requires passing action=delete) (GET is meant for development only)
delete_ccp_order :: forall m . IBKR.Common.MonadHTTP m => Delete_ccp_orderParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Delete_ccp_orderResponse) -- ^ Monadic computation which returns the result of the operation
delete_ccp_order parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Delete_ccp_orderResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Delete_ccp_orderResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         Order_data)
                                                                                                                                                                         | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Delete_ccp_orderResponse401
                                                                                                                                                                         | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Delete_ccp_orderResponse500
                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack "/ccp/order") [IBKR.Common.QueryParameter (Data.Text.pack "acct") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (delete_ccp_orderParametersQueryAcct parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                          IBKR.Common.QueryParameter (Data.Text.pack "id") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (delete_ccp_orderParametersQueryId parameters)) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/ccp\/order.DELETE.parameters@ in the specification.
-- 
-- 
data Delete_ccp_orderParameters = Delete_ccp_orderParameters {
  -- | queryAcct: Represents the parameter named \'acct\'
  -- 
  -- Account Number
  delete_ccp_orderParametersQueryAcct :: Data.Text.Internal.Text
  -- | queryId: Represents the parameter named \'id\'
  -- 
  -- Order Identifier of original submit order
  , delete_ccp_orderParametersQueryId :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Delete_ccp_orderParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryAcct" Data.Aeson.Types.ToJSON..= delete_ccp_orderParametersQueryAcct obj] : ["queryId" Data.Aeson.Types.ToJSON..= delete_ccp_orderParametersQueryId obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryAcct" Data.Aeson.Types.ToJSON..= delete_ccp_orderParametersQueryAcct obj] : ["queryId" Data.Aeson.Types.ToJSON..= delete_ccp_orderParametersQueryId obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Delete_ccp_orderParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Delete_ccp_orderParameters" (\obj -> (GHC.Base.pure Delete_ccp_orderParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryAcct")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryId"))
-- | Create a new 'Delete_ccp_orderParameters' with all required fields.
mkDelete_ccp_orderParameters :: Data.Text.Internal.Text -- ^ 'delete_ccp_orderParametersQueryAcct'
  -> GHC.Types.Double -- ^ 'delete_ccp_orderParametersQueryId'
  -> Delete_ccp_orderParameters
mkDelete_ccp_orderParameters delete_ccp_orderParametersQueryAcct delete_ccp_orderParametersQueryId = Delete_ccp_orderParameters{delete_ccp_orderParametersQueryAcct = delete_ccp_orderParametersQueryAcct,
                                                                                                                                delete_ccp_orderParametersQueryId = delete_ccp_orderParametersQueryId}
-- | Represents a response of the operation 'delete_ccp_order'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Delete_ccp_orderResponseError' is used.
data Delete_ccp_orderResponse =
   Delete_ccp_orderResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Delete_ccp_orderResponse200 Order_data -- ^ An Object
  | Delete_ccp_orderResponse401 -- ^ Access denied
  | Delete_ccp_orderResponse500 -- ^ System error, for example when connection to CCP failed
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > DELETE /ccp/order
-- 
-- The same as 'delete_ccp_order' but accepts an explicit configuration.
delete_ccp_orderWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Delete_ccp_orderParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Delete_ccp_orderResponse) -- ^ Monadic computation which returns the result of the operation
delete_ccp_orderWithConfiguration config
                                  parameters = GHC.Base.fmap (\response_4 -> GHC.Base.fmap (Data.Either.either Delete_ccp_orderResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Delete_ccp_orderResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          Order_data)
                                                                                                                                                                                          | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Delete_ccp_orderResponse401
                                                                                                                                                                                          | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Delete_ccp_orderResponse500
                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_4) response_4) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack "/ccp/order") [IBKR.Common.QueryParameter (Data.Text.pack "acct") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (delete_ccp_orderParametersQueryAcct parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                 IBKR.Common.QueryParameter (Data.Text.pack "id") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (delete_ccp_orderParametersQueryId parameters)) (Data.Text.pack "form") GHC.Types.False])
-- | > DELETE /ccp/order
-- 
-- The same as 'delete_ccp_order' but returns the raw 'Data.ByteString.Char8.ByteString'.
delete_ccp_orderRaw :: forall m . IBKR.Common.MonadHTTP m => Delete_ccp_orderParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
delete_ccp_orderRaw parameters = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack "/ccp/order") [IBKR.Common.QueryParameter (Data.Text.pack "acct") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (delete_ccp_orderParametersQueryAcct parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                            IBKR.Common.QueryParameter (Data.Text.pack "id") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (delete_ccp_orderParametersQueryId parameters)) (Data.Text.pack "form") GHC.Types.False])
-- | > DELETE /ccp/order
-- 
-- The same as 'delete_ccp_order' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
delete_ccp_orderWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Delete_ccp_orderParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
delete_ccp_orderWithConfigurationRaw config
                                     parameters = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack "/ccp/order") [IBKR.Common.QueryParameter (Data.Text.pack "acct") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (delete_ccp_orderParametersQueryAcct parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                   IBKR.Common.QueryParameter (Data.Text.pack "id") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (delete_ccp_orderParametersQueryId parameters)) (Data.Text.pack "form") GHC.Types.False])
