-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation post_iserver_contract_rules
module IBKR.Operations.Post_iserver_contract_rules where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > POST /iserver/contract/rules
-- 
-- Returns trading related rules for a specific contract and side. For both contract info and rules use the endpoint \/iserver\/contract\/{conid}\/info-and-rules.
post_iserver_contract_rules :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Post_iserver_contract_rulesResponse) -- ^ Monadic computation which returns the result of the operation
post_iserver_contract_rules = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Post_iserver_contract_rulesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_iserver_contract_rulesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                               Post_iserver_contract_rulesResponseBody200)
                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/iserver/contract/rules") GHC.Base.mempty)
-- | Represents a response of the operation 'post_iserver_contract_rules'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Post_iserver_contract_rulesResponseError' is used.
data Post_iserver_contract_rulesResponse =
   Post_iserver_contract_rulesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Post_iserver_contract_rulesResponse200 Post_iserver_contract_rulesResponseBody200 -- ^ returns an array
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/iserver\/contract\/rules.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Post_iserver_contract_rulesResponseBody200 = Post_iserver_contract_rulesResponseBody200 {
  -- | rules
  post_iserver_contract_rulesResponseBody200Rules :: (GHC.Maybe.Maybe ([Post_iserver_contract_rulesResponseBody200Rules]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_iserver_contract_rulesResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("rules" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200Rules obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("rules" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200Rules obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_iserver_contract_rulesResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_iserver_contract_rulesResponseBody200" (\obj -> GHC.Base.pure Post_iserver_contract_rulesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "rules"))
-- | Create a new 'Post_iserver_contract_rulesResponseBody200' with all required fields.
mkPost_iserver_contract_rulesResponseBody200 :: Post_iserver_contract_rulesResponseBody200
mkPost_iserver_contract_rulesResponseBody200 = Post_iserver_contract_rulesResponseBody200{post_iserver_contract_rulesResponseBody200Rules = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/rules.POST.responses.200.content.application\/json.schema.properties.rules.items@ in the specification.
-- 
-- 
data Post_iserver_contract_rulesResponseBody200Rules = Post_iserver_contract_rulesResponseBody200Rules {
  -- | algoEligible
  post_iserver_contract_rulesResponseBody200RulesAlgoEligible :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | canTradeAcctIds
  , post_iserver_contract_rulesResponseBody200RulesCanTradeAcctIds :: (GHC.Maybe.Maybe ([Post_iserver_contract_rulesResponseBody200RulesCanTradeAcctIds]))
  -- | cashCcy: Cash currency for the contract
  , post_iserver_contract_rulesResponseBody200RulesCashCcy :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | cashQtyIncr: Increment value for cash quantity
  , post_iserver_contract_rulesResponseBody200RulesCashQtyIncr :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | cashSize: cash value
  , post_iserver_contract_rulesResponseBody200RulesCashSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | cqtTypes
  , post_iserver_contract_rulesResponseBody200RulesCqtTypes :: (GHC.Maybe.Maybe ([Post_iserver_contract_rulesResponseBody200RulesCqtTypes]))
  -- | defaultSize: Default quantity
  , post_iserver_contract_rulesResponseBody200RulesDefaultSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | defaultTIF: Default time in force value
  , post_iserver_contract_rulesResponseBody200RulesDefaultTIF :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | displaySize
  , post_iserver_contract_rulesResponseBody200RulesDisplaySize :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | error: Returns a description on any errors with order presets
  , post_iserver_contract_rulesResponseBody200RulesError :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | fraqInt: decimal places for fractional order size
  , post_iserver_contract_rulesResponseBody200RulesFraqInt :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | fraqTypes
  , post_iserver_contract_rulesResponseBody200RulesFraqTypes :: (GHC.Maybe.Maybe ([Post_iserver_contract_rulesResponseBody200RulesFraqTypes]))
  -- | ibalgoTypes
  , post_iserver_contract_rulesResponseBody200RulesIbalgoTypes :: (GHC.Maybe.Maybe ([Post_iserver_contract_rulesResponseBody200RulesIbalgoTypes]))
  -- | increment: Price increment value
  , post_iserver_contract_rulesResponseBody200RulesIncrement :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | incrementDigits: Number of digits for price increment
  , post_iserver_contract_rulesResponseBody200RulesIncrementDigits :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | limitPrice: Limit price
  , post_iserver_contract_rulesResponseBody200RulesLimitPrice :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | negativeCapable: trading negative price support
  , post_iserver_contract_rulesResponseBody200RulesNegativeCapable :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | orderDefaults: If object returned will provide the defaults based on user settings
  , post_iserver_contract_rulesResponseBody200RulesOrderDefaults :: (GHC.Maybe.Maybe ([Post_iserver_contract_rulesResponseBody200RulesOrderDefaults]))
  -- | orderOrigination: Order origin designation for US securities options and Options Clearing Corporation
  , post_iserver_contract_rulesResponseBody200RulesOrderOrigination :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | orderTypes
  , post_iserver_contract_rulesResponseBody200RulesOrderTypes :: (GHC.Maybe.Maybe ([Post_iserver_contract_rulesResponseBody200RulesOrderTypes]))
  -- | orderTypesOutside
  , post_iserver_contract_rulesResponseBody200RulesOrderTypesOutside :: (GHC.Maybe.Maybe ([Post_iserver_contract_rulesResponseBody200RulesOrderTypesOutside]))
  -- | preview: order preview required
  , post_iserver_contract_rulesResponseBody200RulesPreview :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | priceMagnifier: Price Magnifier
  , post_iserver_contract_rulesResponseBody200RulesPriceMagnifier :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | sizeIncrement: increment quantity value
  , post_iserver_contract_rulesResponseBody200RulesSizeIncrement :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | stopprice: Stop price
  , post_iserver_contract_rulesResponseBody200RulesStopprice :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | tifTypes
  , post_iserver_contract_rulesResponseBody200RulesTifTypes :: (GHC.Maybe.Maybe ([Post_iserver_contract_rulesResponseBody200RulesTifTypes]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_iserver_contract_rulesResponseBody200Rules
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("algoEligible" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesAlgoEligible obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("canTradeAcctIds" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesCanTradeAcctIds obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashCcy" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesCashCcy obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashQtyIncr" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesCashQtyIncr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashSize" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesCashSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cqtTypes" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesCqtTypes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("defaultSize" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesDefaultSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("defaultTIF" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesDefaultTIF obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("displaySize" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesDisplaySize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesError obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fraqInt" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesFraqInt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fraqTypes" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesFraqTypes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ibalgoTypes" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesIbalgoTypes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("increment" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesIncrement obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("incrementDigits" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesIncrementDigits obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("limitPrice" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesLimitPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("negativeCapable" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesNegativeCapable obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderDefaults" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaults obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderOrigination" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderOrigination obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderTypes" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderTypes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderTypesOutside" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderTypesOutside obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preview" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesPreview obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("priceMagnifier" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesPriceMagnifier obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sizeIncrement" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesSizeIncrement obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stopprice" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesStopprice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tifTypes" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesTifTypes obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("algoEligible" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesAlgoEligible obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("canTradeAcctIds" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesCanTradeAcctIds obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashCcy" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesCashCcy obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashQtyIncr" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesCashQtyIncr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashSize" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesCashSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cqtTypes" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesCqtTypes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("defaultSize" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesDefaultSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("defaultTIF" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesDefaultTIF obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("displaySize" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesDisplaySize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesError obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fraqInt" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesFraqInt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fraqTypes" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesFraqTypes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ibalgoTypes" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesIbalgoTypes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("increment" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesIncrement obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("incrementDigits" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesIncrementDigits obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("limitPrice" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesLimitPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("negativeCapable" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesNegativeCapable obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderDefaults" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaults obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderOrigination" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderOrigination obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderTypes" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderTypes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderTypesOutside" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderTypesOutside obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preview" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesPreview obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("priceMagnifier" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesPriceMagnifier obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sizeIncrement" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesSizeIncrement obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stopprice" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesStopprice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tifTypes" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesTifTypes obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_iserver_contract_rulesResponseBody200Rules
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_iserver_contract_rulesResponseBody200Rules" (\obj -> (((((((((((((((((((((((((GHC.Base.pure Post_iserver_contract_rulesResponseBody200Rules GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "algoEligible")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "canTradeAcctIds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cashCcy")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cashQtyIncr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cashSize")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cqtTypes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "defaultSize")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "defaultTIF")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "displaySize")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fraqInt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fraqTypes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ibalgoTypes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "increment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "incrementDigits")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "limitPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "negativeCapable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "orderDefaults")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "orderOrigination")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "orderTypes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "orderTypesOutside")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "preview")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "priceMagnifier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sizeIncrement")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "stopprice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tifTypes"))
-- | Create a new 'Post_iserver_contract_rulesResponseBody200Rules' with all required fields.
mkPost_iserver_contract_rulesResponseBody200Rules :: Post_iserver_contract_rulesResponseBody200Rules
mkPost_iserver_contract_rulesResponseBody200Rules = Post_iserver_contract_rulesResponseBody200Rules{post_iserver_contract_rulesResponseBody200RulesAlgoEligible = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesCanTradeAcctIds = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesCashCcy = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesCashQtyIncr = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesCashSize = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesCqtTypes = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesDefaultSize = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesDefaultTIF = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesDisplaySize = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesError = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesFraqInt = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesFraqTypes = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesIbalgoTypes = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesIncrement = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesIncrementDigits = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesLimitPrice = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesNegativeCapable = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesOrderDefaults = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesOrderOrigination = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesOrderTypes = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesOrderTypesOutside = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesPreview = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesPriceMagnifier = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesSizeIncrement = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesStopprice = GHC.Maybe.Nothing,
                                                                                                    post_iserver_contract_rulesResponseBody200RulesTifTypes = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/rules.POST.responses.200.content.application\/json.schema.properties.rules.items.properties.canTradeAcctIds.items@ in the specification.
-- 
-- 
data Post_iserver_contract_rulesResponseBody200RulesCanTradeAcctIds = Post_iserver_contract_rulesResponseBody200RulesCanTradeAcctIds {
  -- | 0: List of Accounts that can be traded
  post_iserver_contract_rulesResponseBody200RulesCanTradeAcctIds0 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_iserver_contract_rulesResponseBody200RulesCanTradeAcctIds
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesCanTradeAcctIds0 obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesCanTradeAcctIds0 obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_iserver_contract_rulesResponseBody200RulesCanTradeAcctIds
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_iserver_contract_rulesResponseBody200RulesCanTradeAcctIds" (\obj -> GHC.Base.pure Post_iserver_contract_rulesResponseBody200RulesCanTradeAcctIds GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "0"))
-- | Create a new 'Post_iserver_contract_rulesResponseBody200RulesCanTradeAcctIds' with all required fields.
mkPost_iserver_contract_rulesResponseBody200RulesCanTradeAcctIds :: Post_iserver_contract_rulesResponseBody200RulesCanTradeAcctIds
mkPost_iserver_contract_rulesResponseBody200RulesCanTradeAcctIds = Post_iserver_contract_rulesResponseBody200RulesCanTradeAcctIds{post_iserver_contract_rulesResponseBody200RulesCanTradeAcctIds0 = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/rules.POST.responses.200.content.application\/json.schema.properties.rules.items.properties.cqtTypes.items@ in the specification.
-- 
-- 
data Post_iserver_contract_rulesResponseBody200RulesCqtTypes = Post_iserver_contract_rulesResponseBody200RulesCqtTypes {
  -- | 0: order types that support cash quantity trades
  post_iserver_contract_rulesResponseBody200RulesCqtTypes0 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_iserver_contract_rulesResponseBody200RulesCqtTypes
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesCqtTypes0 obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesCqtTypes0 obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_iserver_contract_rulesResponseBody200RulesCqtTypes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_iserver_contract_rulesResponseBody200RulesCqtTypes" (\obj -> GHC.Base.pure Post_iserver_contract_rulesResponseBody200RulesCqtTypes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "0"))
-- | Create a new 'Post_iserver_contract_rulesResponseBody200RulesCqtTypes' with all required fields.
mkPost_iserver_contract_rulesResponseBody200RulesCqtTypes :: Post_iserver_contract_rulesResponseBody200RulesCqtTypes
mkPost_iserver_contract_rulesResponseBody200RulesCqtTypes = Post_iserver_contract_rulesResponseBody200RulesCqtTypes{post_iserver_contract_rulesResponseBody200RulesCqtTypes0 = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/rules.POST.responses.200.content.application\/json.schema.properties.rules.items.properties.fraqTypes.items@ in the specification.
-- 
-- 
data Post_iserver_contract_rulesResponseBody200RulesFraqTypes = Post_iserver_contract_rulesResponseBody200RulesFraqTypes {
  -- | 0: order types that support fractional trades
  post_iserver_contract_rulesResponseBody200RulesFraqTypes0 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_iserver_contract_rulesResponseBody200RulesFraqTypes
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesFraqTypes0 obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesFraqTypes0 obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_iserver_contract_rulesResponseBody200RulesFraqTypes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_iserver_contract_rulesResponseBody200RulesFraqTypes" (\obj -> GHC.Base.pure Post_iserver_contract_rulesResponseBody200RulesFraqTypes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "0"))
-- | Create a new 'Post_iserver_contract_rulesResponseBody200RulesFraqTypes' with all required fields.
mkPost_iserver_contract_rulesResponseBody200RulesFraqTypes :: Post_iserver_contract_rulesResponseBody200RulesFraqTypes
mkPost_iserver_contract_rulesResponseBody200RulesFraqTypes = Post_iserver_contract_rulesResponseBody200RulesFraqTypes{post_iserver_contract_rulesResponseBody200RulesFraqTypes0 = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/rules.POST.responses.200.content.application\/json.schema.properties.rules.items.properties.ibalgoTypes.items@ in the specification.
-- 
-- 
data Post_iserver_contract_rulesResponseBody200RulesIbalgoTypes = Post_iserver_contract_rulesResponseBody200RulesIbalgoTypes {
  -- | 0: order types that support IB Algos
  post_iserver_contract_rulesResponseBody200RulesIbalgoTypes0 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_iserver_contract_rulesResponseBody200RulesIbalgoTypes
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesIbalgoTypes0 obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesIbalgoTypes0 obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_iserver_contract_rulesResponseBody200RulesIbalgoTypes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_iserver_contract_rulesResponseBody200RulesIbalgoTypes" (\obj -> GHC.Base.pure Post_iserver_contract_rulesResponseBody200RulesIbalgoTypes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "0"))
-- | Create a new 'Post_iserver_contract_rulesResponseBody200RulesIbalgoTypes' with all required fields.
mkPost_iserver_contract_rulesResponseBody200RulesIbalgoTypes :: Post_iserver_contract_rulesResponseBody200RulesIbalgoTypes
mkPost_iserver_contract_rulesResponseBody200RulesIbalgoTypes = Post_iserver_contract_rulesResponseBody200RulesIbalgoTypes{post_iserver_contract_rulesResponseBody200RulesIbalgoTypes0 = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/rules.POST.responses.200.content.application\/json.schema.properties.rules.items.properties.orderDefaults.items@ in the specification.
-- 
-- 
data Post_iserver_contract_rulesResponseBody200RulesOrderDefaults = Post_iserver_contract_rulesResponseBody200RulesOrderDefaults {
  -- | string: orderType
  post_iserver_contract_rulesResponseBody200RulesOrderDefaultsString :: (GHC.Maybe.Maybe ([Post_iserver_contract_rulesResponseBody200RulesOrderDefaultsString]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_iserver_contract_rulesResponseBody200RulesOrderDefaults
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("string" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsString obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("string" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsString obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_iserver_contract_rulesResponseBody200RulesOrderDefaults
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_iserver_contract_rulesResponseBody200RulesOrderDefaults" (\obj -> GHC.Base.pure Post_iserver_contract_rulesResponseBody200RulesOrderDefaults GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "string"))
-- | Create a new 'Post_iserver_contract_rulesResponseBody200RulesOrderDefaults' with all required fields.
mkPost_iserver_contract_rulesResponseBody200RulesOrderDefaults :: Post_iserver_contract_rulesResponseBody200RulesOrderDefaults
mkPost_iserver_contract_rulesResponseBody200RulesOrderDefaults = Post_iserver_contract_rulesResponseBody200RulesOrderDefaults{post_iserver_contract_rulesResponseBody200RulesOrderDefaultsString = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/rules.POST.responses.200.content.application\/json.schema.properties.rules.items.properties.orderDefaults.items.properties.string.items@ in the specification.
-- 
-- 
data Post_iserver_contract_rulesResponseBody200RulesOrderDefaultsString = Post_iserver_contract_rulesResponseBody200RulesOrderDefaultsString {
  -- | LP: Limit Price value
  post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringLP :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ORTH: Outside of Regular Trading Hours
  , post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringORTH :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | PC: Price Cap value
  , post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringPC :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ROA: Releative offset amount
  , post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringROA :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ROP: Relative offset percent
  , post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringROP :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | SP: Stop Price value
  , post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringSP :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | TA: Trailing amount value
  , post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringTA :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | TT: Touch trigger price
  , post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringTT :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | TU: Trailing unit
  , post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringTU :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | UNP: Use Net Price for Bonds
  , post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringUNP :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_iserver_contract_rulesResponseBody200RulesOrderDefaultsString
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("LP" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringLP obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ORTH" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringORTH obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("PC" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringPC obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ROA" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringROA obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ROP" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringROP obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("SP" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringSP obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("TA" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringTA obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("TT" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringTT obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("TU" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringTU obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("UNP" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringUNP obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("LP" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringLP obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ORTH" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringORTH obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("PC" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringPC obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ROA" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringROA obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ROP" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringROP obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("SP" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringSP obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("TA" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringTA obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("TT" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringTT obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("TU" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringTU obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("UNP" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringUNP obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_iserver_contract_rulesResponseBody200RulesOrderDefaultsString
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_iserver_contract_rulesResponseBody200RulesOrderDefaultsString" (\obj -> (((((((((GHC.Base.pure Post_iserver_contract_rulesResponseBody200RulesOrderDefaultsString GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "LP")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ORTH")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "PC")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ROA")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ROP")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "SP")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "TA")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "TT")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "TU")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "UNP"))
-- | Create a new 'Post_iserver_contract_rulesResponseBody200RulesOrderDefaultsString' with all required fields.
mkPost_iserver_contract_rulesResponseBody200RulesOrderDefaultsString :: Post_iserver_contract_rulesResponseBody200RulesOrderDefaultsString
mkPost_iserver_contract_rulesResponseBody200RulesOrderDefaultsString = Post_iserver_contract_rulesResponseBody200RulesOrderDefaultsString{post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringLP = GHC.Maybe.Nothing,
                                                                                                                                          post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringORTH = GHC.Maybe.Nothing,
                                                                                                                                          post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringPC = GHC.Maybe.Nothing,
                                                                                                                                          post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringROA = GHC.Maybe.Nothing,
                                                                                                                                          post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringROP = GHC.Maybe.Nothing,
                                                                                                                                          post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringSP = GHC.Maybe.Nothing,
                                                                                                                                          post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringTA = GHC.Maybe.Nothing,
                                                                                                                                          post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringTT = GHC.Maybe.Nothing,
                                                                                                                                          post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringTU = GHC.Maybe.Nothing,
                                                                                                                                          post_iserver_contract_rulesResponseBody200RulesOrderDefaultsStringUNP = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/rules.POST.responses.200.content.application\/json.schema.properties.rules.items.properties.orderTypes.items@ in the specification.
-- 
-- 
data Post_iserver_contract_rulesResponseBody200RulesOrderTypes = Post_iserver_contract_rulesResponseBody200RulesOrderTypes {
  -- | 0: list of available order types
  post_iserver_contract_rulesResponseBody200RulesOrderTypes0 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_iserver_contract_rulesResponseBody200RulesOrderTypes
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderTypes0 obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderTypes0 obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_iserver_contract_rulesResponseBody200RulesOrderTypes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_iserver_contract_rulesResponseBody200RulesOrderTypes" (\obj -> GHC.Base.pure Post_iserver_contract_rulesResponseBody200RulesOrderTypes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "0"))
-- | Create a new 'Post_iserver_contract_rulesResponseBody200RulesOrderTypes' with all required fields.
mkPost_iserver_contract_rulesResponseBody200RulesOrderTypes :: Post_iserver_contract_rulesResponseBody200RulesOrderTypes
mkPost_iserver_contract_rulesResponseBody200RulesOrderTypes = Post_iserver_contract_rulesResponseBody200RulesOrderTypes{post_iserver_contract_rulesResponseBody200RulesOrderTypes0 = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/rules.POST.responses.200.content.application\/json.schema.properties.rules.items.properties.orderTypesOutside.items@ in the specification.
-- 
-- 
data Post_iserver_contract_rulesResponseBody200RulesOrderTypesOutside = Post_iserver_contract_rulesResponseBody200RulesOrderTypesOutside {
  -- | 0: order types that support outside of regular trading hours
  post_iserver_contract_rulesResponseBody200RulesOrderTypesOutside0 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_iserver_contract_rulesResponseBody200RulesOrderTypesOutside
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderTypesOutside0 obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesOrderTypesOutside0 obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_iserver_contract_rulesResponseBody200RulesOrderTypesOutside
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_iserver_contract_rulesResponseBody200RulesOrderTypesOutside" (\obj -> GHC.Base.pure Post_iserver_contract_rulesResponseBody200RulesOrderTypesOutside GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "0"))
-- | Create a new 'Post_iserver_contract_rulesResponseBody200RulesOrderTypesOutside' with all required fields.
mkPost_iserver_contract_rulesResponseBody200RulesOrderTypesOutside :: Post_iserver_contract_rulesResponseBody200RulesOrderTypesOutside
mkPost_iserver_contract_rulesResponseBody200RulesOrderTypesOutside = Post_iserver_contract_rulesResponseBody200RulesOrderTypesOutside{post_iserver_contract_rulesResponseBody200RulesOrderTypesOutside0 = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/rules.POST.responses.200.content.application\/json.schema.properties.rules.items.properties.tifTypes.items@ in the specification.
-- 
-- 
data Post_iserver_contract_rulesResponseBody200RulesTifTypes = Post_iserver_contract_rulesResponseBody200RulesTifTypes {
  -- | 0: Time in Force values, formatted with o for supporting Outside regular trading hours and a for Algo trading
  post_iserver_contract_rulesResponseBody200RulesTifTypes0 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_iserver_contract_rulesResponseBody200RulesTifTypes
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesTifTypes0 obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (post_iserver_contract_rulesResponseBody200RulesTifTypes0 obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_iserver_contract_rulesResponseBody200RulesTifTypes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_iserver_contract_rulesResponseBody200RulesTifTypes" (\obj -> GHC.Base.pure Post_iserver_contract_rulesResponseBody200RulesTifTypes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "0"))
-- | Create a new 'Post_iserver_contract_rulesResponseBody200RulesTifTypes' with all required fields.
mkPost_iserver_contract_rulesResponseBody200RulesTifTypes :: Post_iserver_contract_rulesResponseBody200RulesTifTypes
mkPost_iserver_contract_rulesResponseBody200RulesTifTypes = Post_iserver_contract_rulesResponseBody200RulesTifTypes{post_iserver_contract_rulesResponseBody200RulesTifTypes0 = GHC.Maybe.Nothing}
-- | > POST /iserver/contract/rules
-- 
-- The same as 'post_iserver_contract_rules' but accepts an explicit configuration.
post_iserver_contract_rulesWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Post_iserver_contract_rulesResponse) -- ^ Monadic computation which returns the result of the operation
post_iserver_contract_rulesWithConfiguration config = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Post_iserver_contract_rulesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_iserver_contract_rulesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Post_iserver_contract_rulesResponseBody200)
                                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/iserver/contract/rules") GHC.Base.mempty)
-- | > POST /iserver/contract/rules
-- 
-- The same as 'post_iserver_contract_rules' but returns the raw 'Data.ByteString.Char8.ByteString'.
post_iserver_contract_rulesRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_iserver_contract_rulesRaw = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/iserver/contract/rules") GHC.Base.mempty)
-- | > POST /iserver/contract/rules
-- 
-- The same as 'post_iserver_contract_rules' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
post_iserver_contract_rulesWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_iserver_contract_rulesWithConfigurationRaw config = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/iserver/contract/rules") GHC.Base.mempty)
