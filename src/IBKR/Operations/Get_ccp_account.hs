-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_ccp_account
module IBKR.Operations.Get_ccp_account where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /ccp/account
-- 
-- Provides the list of tradeable accounts
get_ccp_account :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_ccp_accountResponse) -- ^ Monadic computation which returns the result of the operation
get_ccp_account = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_ccp_accountResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_ccp_accountResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                           Get_ccp_accountResponseBody200)
                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/ccp/account") GHC.Base.mempty)
-- | Represents a response of the operation 'get_ccp_account'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_ccp_accountResponseError' is used.
data Get_ccp_accountResponse =
   Get_ccp_accountResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_ccp_accountResponse200 Get_ccp_accountResponseBody200 -- ^ An array of accounts
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/ccp\/account.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Get_ccp_accountResponseBody200 = Get_ccp_accountResponseBody200 {
  -- | acctList: List of tradeable or Sub Accounts
  get_ccp_accountResponseBody200AcctList :: (GHC.Maybe.Maybe ([Get_ccp_accountResponseBody200AcctList]))
  -- | mainAcct: The primary or parent account.
  , get_ccp_accountResponseBody200MainAcct :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_ccp_accountResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acctList" Data.Aeson.Types.ToJSON..=)) (get_ccp_accountResponseBody200AcctList obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mainAcct" Data.Aeson.Types.ToJSON..=)) (get_ccp_accountResponseBody200MainAcct obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acctList" Data.Aeson.Types.ToJSON..=)) (get_ccp_accountResponseBody200AcctList obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mainAcct" Data.Aeson.Types.ToJSON..=)) (get_ccp_accountResponseBody200MainAcct obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_ccp_accountResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_ccp_accountResponseBody200" (\obj -> (GHC.Base.pure Get_ccp_accountResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "acctList")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mainAcct"))
-- | Create a new 'Get_ccp_accountResponseBody200' with all required fields.
mkGet_ccp_accountResponseBody200 :: Get_ccp_accountResponseBody200
mkGet_ccp_accountResponseBody200 = Get_ccp_accountResponseBody200{get_ccp_accountResponseBody200AcctList = GHC.Maybe.Nothing,
                                                                  get_ccp_accountResponseBody200MainAcct = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/ccp\/account.GET.responses.200.content.application\/json.schema.properties.acctList.items@ in the specification.
-- 
-- 
data Get_ccp_accountResponseBody200AcctList = Get_ccp_accountResponseBody200AcctList {
  -- | 0: For multi-account structures each trading account will numbered from 0 to ...
  get_ccp_accountResponseBody200AcctList0 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_ccp_accountResponseBody200AcctList
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (get_ccp_accountResponseBody200AcctList0 obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("0" Data.Aeson.Types.ToJSON..=)) (get_ccp_accountResponseBody200AcctList0 obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_ccp_accountResponseBody200AcctList
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_ccp_accountResponseBody200AcctList" (\obj -> GHC.Base.pure Get_ccp_accountResponseBody200AcctList GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "0"))
-- | Create a new 'Get_ccp_accountResponseBody200AcctList' with all required fields.
mkGet_ccp_accountResponseBody200AcctList :: Get_ccp_accountResponseBody200AcctList
mkGet_ccp_accountResponseBody200AcctList = Get_ccp_accountResponseBody200AcctList{get_ccp_accountResponseBody200AcctList0 = GHC.Maybe.Nothing}
-- | > GET /ccp/account
-- 
-- The same as 'get_ccp_account' but accepts an explicit configuration.
get_ccp_accountWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Get_ccp_accountResponse) -- ^ Monadic computation which returns the result of the operation
get_ccp_accountWithConfiguration config = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Get_ccp_accountResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_ccp_accountResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   Get_ccp_accountResponseBody200)
                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/ccp/account") GHC.Base.mempty)
-- | > GET /ccp/account
-- 
-- The same as 'get_ccp_account' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_ccp_accountRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_ccp_accountRaw = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/ccp/account") GHC.Base.mempty)
-- | > GET /ccp/account
-- 
-- The same as 'get_ccp_account' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_ccp_accountWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_ccp_accountWithConfigurationRaw config = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/ccp/account") GHC.Base.mempty)
