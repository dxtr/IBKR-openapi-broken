-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_iserver_secdef_info
module IBKR.Operations.Get_iserver_secdef_info where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /iserver/secdef/info
-- 
-- Provides Contract Details of Futures, Options, Warrants, Cash and CFDs based on conid. To get the strike price for Options\/Warrants use \"\/iserver\/secdef\/strikes\" endpoint. Must call \/secdef\/search for the underlying contract first.
get_iserver_secdef_info :: forall m . IBKR.Common.MonadHTTP m => Get_iserver_secdef_infoParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_iserver_secdef_infoResponse) -- ^ Monadic computation which returns the result of the operation
get_iserver_secdef_info parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_iserver_secdef_infoResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_iserver_secdef_infoResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                              Data.Aeson.Types.Internal.Object)
                                                                                                                                                                                       | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Get_iserver_secdef_infoResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                              Get_iserver_secdef_infoResponseBody500)
                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/iserver/secdef/info") [IBKR.Common.QueryParameter (Data.Text.pack "conid") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_secdef_infoParametersQueryConid parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                               IBKR.Common.QueryParameter (Data.Text.pack "sectype") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_secdef_infoParametersQuerySectype parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                               IBKR.Common.QueryParameter (Data.Text.pack "month") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_secdef_infoParametersQueryMonth parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                               IBKR.Common.QueryParameter (Data.Text.pack "exchange") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_secdef_infoParametersQueryExchange parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                               IBKR.Common.QueryParameter (Data.Text.pack "strike") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_secdef_infoParametersQueryStrike parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                               IBKR.Common.QueryParameter (Data.Text.pack "right") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_secdef_infoParametersQueryRight parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/iserver\/secdef\/info.GET.parameters@ in the specification.
-- 
-- 
data Get_iserver_secdef_infoParameters = Get_iserver_secdef_infoParameters {
  -- | queryConid: Represents the parameter named \'conid\'
  -- 
  -- underlying contract id
  get_iserver_secdef_infoParametersQueryConid :: Data.Text.Internal.Text
  -- | queryExchange: Represents the parameter named \'exchange\'
  -- 
  -- optional, default is SMART
  , get_iserver_secdef_infoParametersQueryExchange :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryMonth: Represents the parameter named \'month\'
  -- 
  -- contract month, only required for FUT\/OPT\/WAR in the format MMMYY, example JAN00
  , get_iserver_secdef_infoParametersQueryMonth :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryRight: Represents the parameter named \'right\'
  -- 
  -- C for call, P for put
  , get_iserver_secdef_infoParametersQueryRight :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | querySectype: Represents the parameter named \'sectype\'
  -- 
  -- FUT\/OPT\/WAR\/CASH\/CFD
  , get_iserver_secdef_infoParametersQuerySectype :: Data.Text.Internal.Text
  -- | queryStrike: Represents the parameter named \'strike\'
  -- 
  -- optional, only required for OPT\/WAR
  , get_iserver_secdef_infoParametersQueryStrike :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_secdef_infoParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryConid" Data.Aeson.Types.ToJSON..= get_iserver_secdef_infoParametersQueryConid obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExchange" Data.Aeson.Types.ToJSON..=)) (get_iserver_secdef_infoParametersQueryExchange obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryMonth" Data.Aeson.Types.ToJSON..=)) (get_iserver_secdef_infoParametersQueryMonth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRight" Data.Aeson.Types.ToJSON..=)) (get_iserver_secdef_infoParametersQueryRight obj) : ["querySectype" Data.Aeson.Types.ToJSON..= get_iserver_secdef_infoParametersQuerySectype obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStrike" Data.Aeson.Types.ToJSON..=)) (get_iserver_secdef_infoParametersQueryStrike obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryConid" Data.Aeson.Types.ToJSON..= get_iserver_secdef_infoParametersQueryConid obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExchange" Data.Aeson.Types.ToJSON..=)) (get_iserver_secdef_infoParametersQueryExchange obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryMonth" Data.Aeson.Types.ToJSON..=)) (get_iserver_secdef_infoParametersQueryMonth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRight" Data.Aeson.Types.ToJSON..=)) (get_iserver_secdef_infoParametersQueryRight obj) : ["querySectype" Data.Aeson.Types.ToJSON..= get_iserver_secdef_infoParametersQuerySectype obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStrike" Data.Aeson.Types.ToJSON..=)) (get_iserver_secdef_infoParametersQueryStrike obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_secdef_infoParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_secdef_infoParameters" (\obj -> (((((GHC.Base.pure Get_iserver_secdef_infoParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryConid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExchange")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryMonth")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRight")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySectype")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStrike"))
-- | Create a new 'Get_iserver_secdef_infoParameters' with all required fields.
mkGet_iserver_secdef_infoParameters :: Data.Text.Internal.Text -- ^ 'get_iserver_secdef_infoParametersQueryConid'
  -> Data.Text.Internal.Text -- ^ 'get_iserver_secdef_infoParametersQuerySectype'
  -> Get_iserver_secdef_infoParameters
mkGet_iserver_secdef_infoParameters get_iserver_secdef_infoParametersQueryConid get_iserver_secdef_infoParametersQuerySectype = Get_iserver_secdef_infoParameters{get_iserver_secdef_infoParametersQueryConid = get_iserver_secdef_infoParametersQueryConid,
                                                                                                                                                                  get_iserver_secdef_infoParametersQueryExchange = GHC.Maybe.Nothing,
                                                                                                                                                                  get_iserver_secdef_infoParametersQueryMonth = GHC.Maybe.Nothing,
                                                                                                                                                                  get_iserver_secdef_infoParametersQueryRight = GHC.Maybe.Nothing,
                                                                                                                                                                  get_iserver_secdef_infoParametersQuerySectype = get_iserver_secdef_infoParametersQuerySectype,
                                                                                                                                                                  get_iserver_secdef_infoParametersQueryStrike = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'get_iserver_secdef_info'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_iserver_secdef_infoResponseError' is used.
data Get_iserver_secdef_infoResponse =
   Get_iserver_secdef_infoResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_iserver_secdef_infoResponse200 Data.Aeson.Types.Internal.Object -- ^ returns an array of objects
  | Get_iserver_secdef_infoResponse500 Get_iserver_secdef_infoResponseBody500 -- ^ error while processing the request
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/iserver\/secdef\/info.GET.responses.500.content.application\/json.schema@ in the specification.
-- 
-- 
data Get_iserver_secdef_infoResponseBody500 = Get_iserver_secdef_infoResponseBody500 {
  -- | error
  get_iserver_secdef_infoResponseBody500Error :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_secdef_infoResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error" Data.Aeson.Types.ToJSON..=)) (get_iserver_secdef_infoResponseBody500Error obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error" Data.Aeson.Types.ToJSON..=)) (get_iserver_secdef_infoResponseBody500Error obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_secdef_infoResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_secdef_infoResponseBody500" (\obj -> GHC.Base.pure Get_iserver_secdef_infoResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "error"))
-- | Create a new 'Get_iserver_secdef_infoResponseBody500' with all required fields.
mkGet_iserver_secdef_infoResponseBody500 :: Get_iserver_secdef_infoResponseBody500
mkGet_iserver_secdef_infoResponseBody500 = Get_iserver_secdef_infoResponseBody500{get_iserver_secdef_infoResponseBody500Error = GHC.Maybe.Nothing}
-- | > GET /iserver/secdef/info
-- 
-- The same as 'get_iserver_secdef_info' but accepts an explicit configuration.
get_iserver_secdef_infoWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_iserver_secdef_infoParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Get_iserver_secdef_infoResponse) -- ^ Monadic computation which returns the result of the operation
get_iserver_secdef_infoWithConfiguration config
                                         parameters = GHC.Base.fmap (\response_3 -> GHC.Base.fmap (Data.Either.either Get_iserver_secdef_infoResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_iserver_secdef_infoResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                               Data.Aeson.Types.Internal.Object)
                                                                                                                                                                                                        | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Get_iserver_secdef_infoResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                               Get_iserver_secdef_infoResponseBody500)
                                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_3) response_3) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/iserver/secdef/info") [IBKR.Common.QueryParameter (Data.Text.pack "conid") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_secdef_infoParametersQueryConid parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                      IBKR.Common.QueryParameter (Data.Text.pack "sectype") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_secdef_infoParametersQuerySectype parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                      IBKR.Common.QueryParameter (Data.Text.pack "month") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_secdef_infoParametersQueryMonth parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                      IBKR.Common.QueryParameter (Data.Text.pack "exchange") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_secdef_infoParametersQueryExchange parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                      IBKR.Common.QueryParameter (Data.Text.pack "strike") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_secdef_infoParametersQueryStrike parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                      IBKR.Common.QueryParameter (Data.Text.pack "right") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_secdef_infoParametersQueryRight parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /iserver/secdef/info
-- 
-- The same as 'get_iserver_secdef_info' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_iserver_secdef_infoRaw :: forall m . IBKR.Common.MonadHTTP m => Get_iserver_secdef_infoParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_iserver_secdef_infoRaw parameters = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/iserver/secdef/info") [IBKR.Common.QueryParameter (Data.Text.pack "conid") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_secdef_infoParametersQueryConid parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                          IBKR.Common.QueryParameter (Data.Text.pack "sectype") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_secdef_infoParametersQuerySectype parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                          IBKR.Common.QueryParameter (Data.Text.pack "month") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_secdef_infoParametersQueryMonth parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                          IBKR.Common.QueryParameter (Data.Text.pack "exchange") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_secdef_infoParametersQueryExchange parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                          IBKR.Common.QueryParameter (Data.Text.pack "strike") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_secdef_infoParametersQueryStrike parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                          IBKR.Common.QueryParameter (Data.Text.pack "right") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_secdef_infoParametersQueryRight parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /iserver/secdef/info
-- 
-- The same as 'get_iserver_secdef_info' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_iserver_secdef_infoWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_iserver_secdef_infoParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_iserver_secdef_infoWithConfigurationRaw config
                                            parameters = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/iserver/secdef/info") [IBKR.Common.QueryParameter (Data.Text.pack "conid") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_secdef_infoParametersQueryConid parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                 IBKR.Common.QueryParameter (Data.Text.pack "sectype") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_secdef_infoParametersQuerySectype parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                 IBKR.Common.QueryParameter (Data.Text.pack "month") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_secdef_infoParametersQueryMonth parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                 IBKR.Common.QueryParameter (Data.Text.pack "exchange") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_secdef_infoParametersQueryExchange parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                 IBKR.Common.QueryParameter (Data.Text.pack "strike") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_secdef_infoParametersQueryStrike parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                 IBKR.Common.QueryParameter (Data.Text.pack "right") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_secdef_infoParametersQueryRight parameters) (Data.Text.pack "form") GHC.Types.False])
