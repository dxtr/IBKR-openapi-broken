-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_fyi_notifications
module IBKR.Operations.Get_fyi_notifications where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /fyi/notifications
-- 
-- Get a list of notifications
get_fyi_notifications :: forall m . IBKR.Common.MonadHTTP m => Get_fyi_notificationsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_fyi_notificationsResponse) -- ^ Monadic computation which returns the result of the operation
get_fyi_notifications parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_fyi_notificationsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_fyi_notificationsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        Notifications)
                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/fyi/notifications") [IBKR.Common.QueryParameter (Data.Text.pack "exclude") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_fyi_notificationsParametersQueryExclude parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                         IBKR.Common.QueryParameter (Data.Text.pack "include") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_fyi_notificationsParametersQueryInclude parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                         IBKR.Common.QueryParameter (Data.Text.pack "max") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_fyi_notificationsParametersQueryMax parameters)) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/fyi\/notifications.GET.parameters@ in the specification.
-- 
-- 
data Get_fyi_notificationsParameters = Get_fyi_notificationsParameters {
  -- | queryExclude: Represents the parameter named \'exclude\'
  -- 
  -- if set, don\'t set include
  get_fyi_notificationsParametersQueryExclude :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryInclude: Represents the parameter named \'include\'
  -- 
  -- if set, don\'t set exclude
  , get_fyi_notificationsParametersQueryInclude :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryMax: Represents the parameter named \'max\'
  -- 
  -- max number of fyis in response
  , get_fyi_notificationsParametersQueryMax :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_fyi_notificationsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExclude" Data.Aeson.Types.ToJSON..=)) (get_fyi_notificationsParametersQueryExclude obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryInclude" Data.Aeson.Types.ToJSON..=)) (get_fyi_notificationsParametersQueryInclude obj) : ["queryMax" Data.Aeson.Types.ToJSON..= get_fyi_notificationsParametersQueryMax obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExclude" Data.Aeson.Types.ToJSON..=)) (get_fyi_notificationsParametersQueryExclude obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryInclude" Data.Aeson.Types.ToJSON..=)) (get_fyi_notificationsParametersQueryInclude obj) : ["queryMax" Data.Aeson.Types.ToJSON..= get_fyi_notificationsParametersQueryMax obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_fyi_notificationsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_fyi_notificationsParameters" (\obj -> ((GHC.Base.pure Get_fyi_notificationsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExclude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryInclude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryMax"))
-- | Create a new 'Get_fyi_notificationsParameters' with all required fields.
mkGet_fyi_notificationsParameters :: Data.Text.Internal.Text -- ^ 'get_fyi_notificationsParametersQueryMax'
  -> Get_fyi_notificationsParameters
mkGet_fyi_notificationsParameters get_fyi_notificationsParametersQueryMax = Get_fyi_notificationsParameters{get_fyi_notificationsParametersQueryExclude = GHC.Maybe.Nothing,
                                                                                                            get_fyi_notificationsParametersQueryInclude = GHC.Maybe.Nothing,
                                                                                                            get_fyi_notificationsParametersQueryMax = get_fyi_notificationsParametersQueryMax}
-- | Represents a response of the operation 'get_fyi_notifications'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_fyi_notificationsResponseError' is used.
data Get_fyi_notificationsResponse =
   Get_fyi_notificationsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_fyi_notificationsResponse200 Notifications -- ^ An array
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > GET /fyi/notifications
-- 
-- The same as 'get_fyi_notifications' but accepts an explicit configuration.
get_fyi_notificationsWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_fyi_notificationsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Get_fyi_notificationsResponse) -- ^ Monadic computation which returns the result of the operation
get_fyi_notificationsWithConfiguration config
                                       parameters = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Get_fyi_notificationsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_fyi_notificationsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                         Notifications)
                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/fyi/notifications") [IBKR.Common.QueryParameter (Data.Text.pack "exclude") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_fyi_notificationsParametersQueryExclude parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                IBKR.Common.QueryParameter (Data.Text.pack "include") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_fyi_notificationsParametersQueryInclude parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                IBKR.Common.QueryParameter (Data.Text.pack "max") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_fyi_notificationsParametersQueryMax parameters)) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /fyi/notifications
-- 
-- The same as 'get_fyi_notifications' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_fyi_notificationsRaw :: forall m . IBKR.Common.MonadHTTP m => Get_fyi_notificationsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_fyi_notificationsRaw parameters = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/fyi/notifications") [IBKR.Common.QueryParameter (Data.Text.pack "exclude") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_fyi_notificationsParametersQueryExclude parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                      IBKR.Common.QueryParameter (Data.Text.pack "include") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_fyi_notificationsParametersQueryInclude parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                      IBKR.Common.QueryParameter (Data.Text.pack "max") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_fyi_notificationsParametersQueryMax parameters)) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /fyi/notifications
-- 
-- The same as 'get_fyi_notifications' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_fyi_notificationsWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_fyi_notificationsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_fyi_notificationsWithConfigurationRaw config
                                          parameters = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/fyi/notifications") [IBKR.Common.QueryParameter (Data.Text.pack "exclude") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_fyi_notificationsParametersQueryExclude parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                             IBKR.Common.QueryParameter (Data.Text.pack "include") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_fyi_notificationsParametersQueryInclude parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                             IBKR.Common.QueryParameter (Data.Text.pack "max") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_fyi_notificationsParametersQueryMax parameters)) (Data.Text.pack "form") GHC.Types.False])
