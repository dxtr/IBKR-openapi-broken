-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_iserver_account_pnl_partitioned
module IBKR.Operations.Get_iserver_account_pnl_partitioned where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /iserver/account/pnl/partitioned
-- 
-- Returns an object containing PnL for the selected account and its models (if any).
-- To receive streaming PnL the endpoint \/ws can be used. Refer to [Streaming WebSocket Data](https:\/\/interactivebrokers.github.io\/cpwebapi\/RealtimeSubscription.html) for details.
get_iserver_account_pnl_partitioned :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_iserver_account_pnl_partitionedResponse) -- ^ Monadic computation which returns the result of the operation
get_iserver_account_pnl_partitioned = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_iserver_account_pnl_partitionedResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_iserver_account_pnl_partitionedResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Get_iserver_account_pnl_partitionedResponseBody200)
                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/iserver/account/pnl/partitioned") GHC.Base.mempty)
-- | Represents a response of the operation 'get_iserver_account_pnl_partitioned'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_iserver_account_pnl_partitionedResponseError' is used.
data Get_iserver_account_pnl_partitionedResponse =
   Get_iserver_account_pnl_partitionedResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_iserver_account_pnl_partitionedResponse200 Get_iserver_account_pnl_partitionedResponseBody200 -- ^ An object containing account and model(s) pnl
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/iserver\/account\/pnl\/partitioned.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Get_iserver_account_pnl_partitionedResponseBody200 = Get_iserver_account_pnl_partitionedResponseBody200 {
  -- | acctId
  get_iserver_account_pnl_partitionedResponseBody200AcctId :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_account_pnl_partitionedResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acctId" Data.Aeson.Types.ToJSON..=)) (get_iserver_account_pnl_partitionedResponseBody200AcctId obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acctId" Data.Aeson.Types.ToJSON..=)) (get_iserver_account_pnl_partitionedResponseBody200AcctId obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_account_pnl_partitionedResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_account_pnl_partitionedResponseBody200" (\obj -> GHC.Base.pure Get_iserver_account_pnl_partitionedResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "acctId"))
-- | Create a new 'Get_iserver_account_pnl_partitionedResponseBody200' with all required fields.
mkGet_iserver_account_pnl_partitionedResponseBody200 :: Get_iserver_account_pnl_partitionedResponseBody200
mkGet_iserver_account_pnl_partitionedResponseBody200 = Get_iserver_account_pnl_partitionedResponseBody200{get_iserver_account_pnl_partitionedResponseBody200AcctId = GHC.Maybe.Nothing}
-- | > GET /iserver/account/pnl/partitioned
-- 
-- The same as 'get_iserver_account_pnl_partitioned' but accepts an explicit configuration.
get_iserver_account_pnl_partitionedWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Get_iserver_account_pnl_partitionedResponse) -- ^ Monadic computation which returns the result of the operation
get_iserver_account_pnl_partitionedWithConfiguration config = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Get_iserver_account_pnl_partitionedResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_iserver_account_pnl_partitionedResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Get_iserver_account_pnl_partitionedResponseBody200)
                                                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/iserver/account/pnl/partitioned") GHC.Base.mempty)
-- | > GET /iserver/account/pnl/partitioned
-- 
-- The same as 'get_iserver_account_pnl_partitioned' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_iserver_account_pnl_partitionedRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_iserver_account_pnl_partitionedRaw = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/iserver/account/pnl/partitioned") GHC.Base.mempty)
-- | > GET /iserver/account/pnl/partitioned
-- 
-- The same as 'get_iserver_account_pnl_partitioned' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_iserver_account_pnl_partitionedWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_iserver_account_pnl_partitionedWithConfigurationRaw config = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/iserver/account/pnl/partitioned") GHC.Base.mempty)
