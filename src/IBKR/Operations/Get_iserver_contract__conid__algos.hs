-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_iserver_contract__conid__algos
module IBKR.Operations.Get_iserver_contract__conid__algos where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /iserver/contract/{conid}/algos
-- 
-- Returns supported IB Algos for contract. Must be called a second time to query the list of available parameters.
get_iserver_contract__conid__algos :: forall m . IBKR.Common.MonadHTTP m => Get_iserver_contract__conid__algosParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_iserver_contract__conid__algosResponse) -- ^ Monadic computation which returns the result of the operation
get_iserver_contract__conid__algos parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_iserver_contract__conid__algosResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_iserver_contract__conid__algosResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ([Get_iserver_contract__conid__algosResponseBody200]))
                                                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/iserver/contract/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (get_iserver_contract__conid__algosParametersPathConid parameters))) GHC.Base.++ "/algos"))) [IBKR.Common.QueryParameter (Data.Text.pack "algos") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_contract__conid__algosParametersQueryAlgos parameters) (Data.Text.pack "form") GHC.Types.False,
ommon.QueryParameter (Data.Text.pack "addDescription") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_contract__conid__algosParametersQueryAddDescription parameters) (Data.Text.pack "form") GHC.Types.False,
ommon.QueryParameter (Data.Text.pack "addParams") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_contract__conid__algosParametersQueryAddParams parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/iserver\/contract\/{conid}\/algos.GET.parameters@ in the specification.
-- 
-- 
data Get_iserver_contract__conid__algosParameters = Get_iserver_contract__conid__algosParameters {
  -- | pathConid: Represents the parameter named \'conid\'
  -- 
  -- IBKR contract identifier
  get_iserver_contract__conid__algosParametersPathConid :: Data.Text.Internal.Text
  -- | queryAddDescription: Represents the parameter named \'addDescription\'
  -- 
  -- Whether or not to add algo descriptions to response. Set to 1 for yes, 0 for no.
  , get_iserver_contract__conid__algosParametersQueryAddDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryAddParams: Represents the parameter named \'addParams\'
  -- 
  -- Whether or not to show algo parameters.  Set to 1 for yes, 0 for no.
  , get_iserver_contract__conid__algosParametersQueryAddParams :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryAlgos: Represents the parameter named \'algos\'
  -- 
  -- List of algo ids delimited by \";\" to filter by. Max of 8 algos ids can be specified.
  , get_iserver_contract__conid__algosParametersQueryAlgos :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_contract__conid__algosParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathConid" Data.Aeson.Types.ToJSON..= get_iserver_contract__conid__algosParametersPathConid obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAddDescription" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosParametersQueryAddDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAddParams" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosParametersQueryAddParams obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAlgos" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosParametersQueryAlgos obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathConid" Data.Aeson.Types.ToJSON..= get_iserver_contract__conid__algosParametersPathConid obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAddDescription" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosParametersQueryAddDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAddParams" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosParametersQueryAddParams obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAlgos" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosParametersQueryAlgos obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_contract__conid__algosParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_contract__conid__algosParameters" (\obj -> (((GHC.Base.pure Get_iserver_contract__conid__algosParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathConid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryAddDescription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryAddParams")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryAlgos"))
-- | Create a new 'Get_iserver_contract__conid__algosParameters' with all required fields.
mkGet_iserver_contract__conid__algosParameters :: Data.Text.Internal.Text -- ^ 'get_iserver_contract__conid__algosParametersPathConid'
  -> Get_iserver_contract__conid__algosParameters
mkGet_iserver_contract__conid__algosParameters get_iserver_contract__conid__algosParametersPathConid = Get_iserver_contract__conid__algosParameters{get_iserver_contract__conid__algosParametersPathConid = get_iserver_contract__conid__algosParametersPathConid,
                                                                                                                                                    get_iserver_contract__conid__algosParametersQueryAddDescription = GHC.Maybe.Nothing,
                                                                                                                                                    get_iserver_contract__conid__algosParametersQueryAddParams = GHC.Maybe.Nothing,
                                                                                                                                                    get_iserver_contract__conid__algosParametersQueryAlgos = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'get_iserver_contract__conid__algos'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_iserver_contract__conid__algosResponseError' is used.
data Get_iserver_contract__conid__algosResponse =
   Get_iserver_contract__conid__algosResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_iserver_contract__conid__algosResponse200 ([Get_iserver_contract__conid__algosResponseBody200]) -- ^ returns an array of algos
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/iserver\/contract\/{conid}\/algos.GET.responses.200.content.application\/json.schema.items@ in the specification.
-- 
-- 
data Get_iserver_contract__conid__algosResponseBody200 = Get_iserver_contract__conid__algosResponseBody200 {
  -- | description
  get_iserver_contract__conid__algosResponseBody200Description :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id
  , get_iserver_contract__conid__algosResponseBody200Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | name
  , get_iserver_contract__conid__algosResponseBody200Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | parameters
  , get_iserver_contract__conid__algosResponseBody200Parameters :: (GHC.Maybe.Maybe ([Get_iserver_contract__conid__algosResponseBody200Parameters]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_contract__conid__algosResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200Description obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200Name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parameters" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200Parameters obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200Description obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200Name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parameters" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200Parameters obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_contract__conid__algosResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_contract__conid__algosResponseBody200" (\obj -> (((GHC.Base.pure Get_iserver_contract__conid__algosResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "parameters"))
-- | Create a new 'Get_iserver_contract__conid__algosResponseBody200' with all required fields.
mkGet_iserver_contract__conid__algosResponseBody200 :: Get_iserver_contract__conid__algosResponseBody200
mkGet_iserver_contract__conid__algosResponseBody200 = Get_iserver_contract__conid__algosResponseBody200{get_iserver_contract__conid__algosResponseBody200Description = GHC.Maybe.Nothing,
                                                                                                        get_iserver_contract__conid__algosResponseBody200Id = GHC.Maybe.Nothing,
                                                                                                        get_iserver_contract__conid__algosResponseBody200Name = GHC.Maybe.Nothing,
                                                                                                        get_iserver_contract__conid__algosResponseBody200Parameters = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/contract\/{conid}\/algos.GET.responses.200.content.application\/json.schema.items.properties.parameters.items@ in the specification.
-- 
-- 
data Get_iserver_contract__conid__algosResponseBody200Parameters = Get_iserver_contract__conid__algosResponseBody200Parameters {
  -- | defaultValue: User configured preset for this parameter.
  get_iserver_contract__conid__algosResponseBody200ParametersDefaultValue :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | description: Detailed description of the parameter.
  , get_iserver_contract__conid__algosResponseBody200ParametersDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | enabledConditions: The rules that UI should apply to algo parameters depending on chosen order type:
  --  * MKT:speedUp:=:no - hide SpeedUp param when MKT is chosen for order type.
  --  * LMT:strategyType:\<>:empty - strategyType param cannot be empty when LMT is chosen for order type.
  --  * MKT:strategyType:=:Marketable - set strategyType param to Marketable and disable (no other choice) when MKT is chosen for order type.
  , get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditions :: (GHC.Maybe.Maybe Get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditions)
  -- | guiRank: The order in UI, used when building dynamic UI so that more important parameters are presented first.
  , get_iserver_contract__conid__algosResponseBody200ParametersGuiRank :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | id: The algo parameter
  , get_iserver_contract__conid__algosResponseBody200ParametersId :: Data.Text.Internal.Text
  -- | legalStrings: The list of choices
  , get_iserver_contract__conid__algosResponseBody200ParametersLegalStrings :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | maxValue: Largest value, only applies to parameters with valueClassName=Double.
  , get_iserver_contract__conid__algosResponseBody200ParametersMaxValue :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | minValue: Smallest value, only applies to parameters with valueClassName=Double.
  , get_iserver_contract__conid__algosResponseBody200ParametersMinValue :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | name: Descriptive name of the parameter.
  , get_iserver_contract__conid__algosResponseBody200ParametersName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | priceMarketRule: If true, must specify parameter using market rule format. Only applies to parameters with valueClassName=Double.
  , get_iserver_contract__conid__algosResponseBody200ParametersPriceMarketRule :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | required: If true a value must be entered.
  , get_iserver_contract__conid__algosResponseBody200ParametersRequired :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | valueClassName: Format of the parameter.
  , get_iserver_contract__conid__algosResponseBody200ParametersValueClassName :: Get_iserver_contract__conid__algosResponseBody200ParametersValueClassName
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_contract__conid__algosResponseBody200Parameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("defaultValue" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200ParametersDefaultValue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200ParametersDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabledConditions" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("guiRank" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200ParametersGuiRank obj) : ["id" Data.Aeson.Types.ToJSON..= get_iserver_contract__conid__algosResponseBody200ParametersId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("legalStrings" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200ParametersLegalStrings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("maxValue" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200ParametersMaxValue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("minValue" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200ParametersMinValue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200ParametersName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("priceMarketRule" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200ParametersPriceMarketRule obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("required" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200ParametersRequired obj) : ["valueClassName" Data.Aeson.Types.ToJSON..= get_iserver_contract__conid__algosResponseBody200ParametersValueClassName obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("defaultValue" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200ParametersDefaultValue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200ParametersDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabledConditions" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("guiRank" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200ParametersGuiRank obj) : ["id" Data.Aeson.Types.ToJSON..= get_iserver_contract__conid__algosResponseBody200ParametersId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("legalStrings" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200ParametersLegalStrings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("maxValue" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200ParametersMaxValue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("minValue" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200ParametersMinValue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200ParametersName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("priceMarketRule" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200ParametersPriceMarketRule obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("required" Data.Aeson.Types.ToJSON..=)) (get_iserver_contract__conid__algosResponseBody200ParametersRequired obj) : ["valueClassName" Data.Aeson.Types.ToJSON..= get_iserver_contract__conid__algosResponseBody200ParametersValueClassName obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_contract__conid__algosResponseBody200Parameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_contract__conid__algosResponseBody200Parameters" (\obj -> (((((((((((GHC.Base.pure Get_iserver_contract__conid__algosResponseBody200Parameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "defaultValue")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enabledConditions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "guiRank")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "legalStrings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "maxValue")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "minValue")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "priceMarketRule")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "required")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "valueClassName"))
-- | Create a new 'Get_iserver_contract__conid__algosResponseBody200Parameters' with all required fields.
mkGet_iserver_contract__conid__algosResponseBody200Parameters :: Data.Text.Internal.Text -- ^ 'get_iserver_contract__conid__algosResponseBody200ParametersId'
  -> Get_iserver_contract__conid__algosResponseBody200ParametersValueClassName -- ^ 'get_iserver_contract__conid__algosResponseBody200ParametersValueClassName'
  -> Get_iserver_contract__conid__algosResponseBody200Parameters
mkGet_iserver_contract__conid__algosResponseBody200Parameters get_iserver_contract__conid__algosResponseBody200ParametersId get_iserver_contract__conid__algosResponseBody200ParametersValueClassName = Get_iserver_contract__conid__algosResponseBody200Parameters{get_iserver_contract__conid__algosResponseBody200ParametersDefaultValue = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                    get_iserver_contract__conid__algosResponseBody200ParametersDescription = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                    get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditions = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                    get_iserver_contract__conid__algosResponseBody200ParametersGuiRank = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                    get_iserver_contract__conid__algosResponseBody200ParametersId = get_iserver_contract__conid__algosResponseBody200ParametersId,
                                                                                                                                                                                                                                                                    get_iserver_contract__conid__algosResponseBody200ParametersLegalStrings = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                    get_iserver_contract__conid__algosResponseBody200ParametersMaxValue = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                    get_iserver_contract__conid__algosResponseBody200ParametersMinValue = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                    get_iserver_contract__conid__algosResponseBody200ParametersName = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                    get_iserver_contract__conid__algosResponseBody200ParametersPriceMarketRule = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                    get_iserver_contract__conid__algosResponseBody200ParametersRequired = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                    get_iserver_contract__conid__algosResponseBody200ParametersValueClassName = get_iserver_contract__conid__algosResponseBody200ParametersValueClassName}
-- | Defines the enum schema located at @paths.\/iserver\/contract\/{conid}\/algos.GET.responses.200.content.application\/json.schema.items.properties.parameters.items.properties.enabledConditions@ in the specification.
-- 
-- The rules that UI should apply to algo parameters depending on chosen order type:
--  * MKT:speedUp:=:no - hide SpeedUp param when MKT is chosen for order type.
--  * LMT:strategyType:\<>:empty - strategyType param cannot be empty when LMT is chosen for order type.
--  * MKT:strategyType:=:Marketable - set strategyType param to Marketable and disable (no other choice) when MKT is chosen for order type.
data Get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditions =
   Get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditionsOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditionsTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditionsEnumMKT_speedUp___no -- ^ Represents the JSON value @"MKT:speedUp:=:no"@
  | Get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditionsEnumLMT_strategyType____empty -- ^ Represents the JSON value @"LMT:strategyType:<>:empty"@
  | Get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditionsEnumMKT_strategyType___Marketable -- ^ Represents the JSON value @"MKT:strategyType:=:Marketable"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditions
    where toJSON (Get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditionsOther val) = val
          toJSON (Get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditionsTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (Get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditionsEnumMKT_speedUp___no) = "MKT:speedUp:=:no"
          toJSON (Get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditionsEnumLMT_strategyType____empty) = "LMT:strategyType:<>:empty"
          toJSON (Get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditionsEnumMKT_strategyType___Marketable) = "MKT:strategyType:=:Marketable"
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditions
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "MKT:speedUp:=:no" -> Get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditionsEnumMKT_speedUp___no
                                            | val GHC.Classes.== "LMT:strategyType:<>:empty" -> Get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditionsEnumLMT_strategyType____empty
                                            | val GHC.Classes.== "MKT:strategyType:=:Marketable" -> Get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditionsEnumMKT_strategyType___Marketable
                                            | GHC.Base.otherwise -> Get_iserver_contract__conid__algosResponseBody200ParametersEnabledConditionsOther val)
-- | Defines the enum schema located at @paths.\/iserver\/contract\/{conid}\/algos.GET.responses.200.content.application\/json.schema.items.properties.parameters.items.properties.valueClassName@ in the specification.
-- 
-- Format of the parameter.
data Get_iserver_contract__conid__algosResponseBody200ParametersValueClassName =
   Get_iserver_contract__conid__algosResponseBody200ParametersValueClassNameOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Get_iserver_contract__conid__algosResponseBody200ParametersValueClassNameTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Get_iserver_contract__conid__algosResponseBody200ParametersValueClassNameEnumDouble -- ^ Represents the JSON value @"double"@
  | Get_iserver_contract__conid__algosResponseBody200ParametersValueClassNameEnumString -- ^ Represents the JSON value @"string"@
  | Get_iserver_contract__conid__algosResponseBody200ParametersValueClassNameEnumTime -- ^ Represents the JSON value @"time"@
  | Get_iserver_contract__conid__algosResponseBody200ParametersValueClassNameEnumBoolean -- ^ Represents the JSON value @"boolean"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_contract__conid__algosResponseBody200ParametersValueClassName
    where toJSON (Get_iserver_contract__conid__algosResponseBody200ParametersValueClassNameOther val) = val
          toJSON (Get_iserver_contract__conid__algosResponseBody200ParametersValueClassNameTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (Get_iserver_contract__conid__algosResponseBody200ParametersValueClassNameEnumDouble) = "double"
          toJSON (Get_iserver_contract__conid__algosResponseBody200ParametersValueClassNameEnumString) = "string"
          toJSON (Get_iserver_contract__conid__algosResponseBody200ParametersValueClassNameEnumTime) = "time"
          toJSON (Get_iserver_contract__conid__algosResponseBody200ParametersValueClassNameEnumBoolean) = "boolean"
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_contract__conid__algosResponseBody200ParametersValueClassName
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "double" -> Get_iserver_contract__conid__algosResponseBody200ParametersValueClassNameEnumDouble
                                            | val GHC.Classes.== "string" -> Get_iserver_contract__conid__algosResponseBody200ParametersValueClassNameEnumString
                                            | val GHC.Classes.== "time" -> Get_iserver_contract__conid__algosResponseBody200ParametersValueClassNameEnumTime
                                            | val GHC.Classes.== "boolean" -> Get_iserver_contract__conid__algosResponseBody200ParametersValueClassNameEnumBoolean
                                            | GHC.Base.otherwise -> Get_iserver_contract__conid__algosResponseBody200ParametersValueClassNameOther val)
-- | > GET /iserver/contract/{conid}/algos
-- 
-- The same as 'get_iserver_contract__conid__algos' but accepts an explicit configuration.
get_iserver_contract__conid__algosWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_iserver_contract__conid__algosParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Get_iserver_contract__conid__algosResponse) -- ^ Monadic computation which returns the result of the operation
get_iserver_contract__conid__algosWithConfiguration config
                                                    parameters = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Get_iserver_contract__conid__algosResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_iserver_contract__conid__algosResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ([Get_iserver_contract__conid__algosResponseBody200]))
                                                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/iserver/contract/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (get_iserver_contract__conid__algosParametersPathConid parameters))) GHC.Base.++ "/algos"))) [IBKR.Common.QueryParameter (Data.Text.pack "algos") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_contract__conid__algosParametersQueryAlgos parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  IBKR.Common.QueryParameter (Data.Text.pack "addDescription") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_contract__conid__algosParametersQueryAddDescription parameters) (Data.Text.pack "form") GHC.Types.False,
ommon.QueryParameter (Data.Text.pack "addParams") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_contract__conid__algosParametersQueryAddParams parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /iserver/contract/{conid}/algos
-- 
-- The same as 'get_iserver_contract__conid__algos' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_iserver_contract__conid__algosRaw :: forall m . IBKR.Common.MonadHTTP m => Get_iserver_contract__conid__algosParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_iserver_contract__conid__algosRaw parameters = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/iserver/contract/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (get_iserver_contract__conid__algosParametersPathConid parameters))) GHC.Base.++ "/algos"))) [IBKR.Common.QueryParameter (Data.Text.pack "algos") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_contract__conid__algosParametersQueryAlgos parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           IBKR.Common.QueryParameter (Data.Text.pack "addDescription") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_contract__conid__algosParametersQueryAddDescription parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           IBKR.Common.QueryParameter (Data.Text.pack "addParams") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_contract__conid__algosParametersQueryAddParams parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /iserver/contract/{conid}/algos
-- 
-- The same as 'get_iserver_contract__conid__algos' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_iserver_contract__conid__algosWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_iserver_contract__conid__algosParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_iserver_contract__conid__algosWithConfigurationRaw config
                                                       parameters = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/iserver/contract/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (get_iserver_contract__conid__algosParametersPathConid parameters))) GHC.Base.++ "/algos"))) [IBKR.Common.QueryParameter (Data.Text.pack "algos") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_contract__conid__algosParametersQueryAlgos parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  IBKR.Common.QueryParameter (Data.Text.pack "addDescription") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_contract__conid__algosParametersQueryAddDescription parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  IBKR.Common.QueryParameter (Data.Text.pack "addParams") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_contract__conid__algosParametersQueryAddParams parameters) (Data.Text.pack "form") GHC.Types.False])
