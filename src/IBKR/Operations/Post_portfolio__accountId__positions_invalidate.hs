-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation post_portfolio__accountId__positions_invalidate
module IBKR.Operations.Post_portfolio__accountId__positions_invalidate where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > POST /portfolio/{accountId}/positions/invalidate
-- 
-- Invalidates the backend cache of the Portfolio
post_portfolio__accountId__positions_invalidate :: forall m . IBKR.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ accountId: account id
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Post_portfolio__accountId__positions_invalidateResponse) -- ^ Monadic computation which returns the result of the operation
post_portfolio__accountId__positions_invalidate accountId = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Post_portfolio__accountId__positions_invalidateResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_portfolio__accountId__positions_invalidateResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
ata.Aeson.Types.Internal.Object)
                                                                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/portfolio/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel accountId)) GHC.Base.++ "/positions/invalidate"))) GHC.Base.mempty)
-- | Represents a response of the operation 'post_portfolio__accountId__positions_invalidate'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Post_portfolio__accountId__positions_invalidateResponseError' is used.
data Post_portfolio__accountId__positions_invalidateResponse =
   Post_portfolio__accountId__positions_invalidateResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Post_portfolio__accountId__positions_invalidateResponse200 Data.Aeson.Types.Internal.Object -- ^ Means successful
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > POST /portfolio/{accountId}/positions/invalidate
-- 
-- The same as 'post_portfolio__accountId__positions_invalidate' but accepts an explicit configuration.
post_portfolio__accountId__positions_invalidateWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ accountId: account id
  -> m (Network.HTTP.Client.Types.Response Post_portfolio__accountId__positions_invalidateResponse) -- ^ Monadic computation which returns the result of the operation
post_portfolio__accountId__positions_invalidateWithConfiguration config
                                                                 accountId = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Post_portfolio__accountId__positions_invalidateResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_portfolio__accountId__positions_invalidateResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
ata.Aeson.Types.Internal.Object)
                                                                                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/portfolio/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel accountId)) GHC.Base.++ "/positions/invalidate"))) GHC.Base.mempty)
-- | > POST /portfolio/{accountId}/positions/invalidate
-- 
-- The same as 'post_portfolio__accountId__positions_invalidate' but returns the raw 'Data.ByteString.Char8.ByteString'.
post_portfolio__accountId__positions_invalidateRaw :: forall m . IBKR.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ accountId: account id
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_portfolio__accountId__positions_invalidateRaw accountId = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/portfolio/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel accountId)) GHC.Base.++ "/positions/invalidate"))) GHC.Base.mempty)
-- | > POST /portfolio/{accountId}/positions/invalidate
-- 
-- The same as 'post_portfolio__accountId__positions_invalidate' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
post_portfolio__accountId__positions_invalidateWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ accountId: account id
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_portfolio__accountId__positions_invalidateWithConfigurationRaw config
                                                                    accountId = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/portfolio/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel accountId)) GHC.Base.++ "/positions/invalidate"))) GHC.Base.mempty)
