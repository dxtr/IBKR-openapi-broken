-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation put_fyi_deliveryoptions_email
module IBKR.Operations.Put_fyi_deliveryoptions_email where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > PUT /fyi/deliveryoptions/email
-- 
-- Enable\/Disable email option
put_fyi_deliveryoptions_email :: forall m . IBKR.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ enabled: true\/false
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Put_fyi_deliveryoptions_emailResponse) -- ^ Monadic computation which returns the result of the operation
put_fyi_deliveryoptions_email enabled = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Put_fyi_deliveryoptions_emailResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Put_fyi_deliveryoptions_emailResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                             Put_fyi_deliveryoptions_emailResponseBody200)
                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/fyi/deliveryoptions/email") [IBKR.Common.QueryParameter (Data.Text.pack "enabled") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON enabled) (Data.Text.pack "form") GHC.Types.False])
-- | Represents a response of the operation 'put_fyi_deliveryoptions_email'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Put_fyi_deliveryoptions_emailResponseError' is used.
data Put_fyi_deliveryoptions_emailResponse =
   Put_fyi_deliveryoptions_emailResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Put_fyi_deliveryoptions_emailResponse200 Put_fyi_deliveryoptions_emailResponseBody200 -- ^ 200 means successful
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/fyi\/deliveryoptions\/email.PUT.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Put_fyi_deliveryoptions_emailResponseBody200 = Put_fyi_deliveryoptions_emailResponseBody200 {
  -- | T
  put_fyi_deliveryoptions_emailResponseBody200T :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | V
  , put_fyi_deliveryoptions_emailResponseBody200V :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Put_fyi_deliveryoptions_emailResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("T" Data.Aeson.Types.ToJSON..=)) (put_fyi_deliveryoptions_emailResponseBody200T obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("V" Data.Aeson.Types.ToJSON..=)) (put_fyi_deliveryoptions_emailResponseBody200V obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("T" Data.Aeson.Types.ToJSON..=)) (put_fyi_deliveryoptions_emailResponseBody200T obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("V" Data.Aeson.Types.ToJSON..=)) (put_fyi_deliveryoptions_emailResponseBody200V obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Put_fyi_deliveryoptions_emailResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Put_fyi_deliveryoptions_emailResponseBody200" (\obj -> (GHC.Base.pure Put_fyi_deliveryoptions_emailResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "T")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "V"))
-- | Create a new 'Put_fyi_deliveryoptions_emailResponseBody200' with all required fields.
mkPut_fyi_deliveryoptions_emailResponseBody200 :: Put_fyi_deliveryoptions_emailResponseBody200
mkPut_fyi_deliveryoptions_emailResponseBody200 = Put_fyi_deliveryoptions_emailResponseBody200{put_fyi_deliveryoptions_emailResponseBody200T = GHC.Maybe.Nothing,
                                                                                              put_fyi_deliveryoptions_emailResponseBody200V = GHC.Maybe.Nothing}
-- | > PUT /fyi/deliveryoptions/email
-- 
-- The same as 'put_fyi_deliveryoptions_email' but accepts an explicit configuration.
put_fyi_deliveryoptions_emailWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ enabled: true\/false
  -> m (Network.HTTP.Client.Types.Response Put_fyi_deliveryoptions_emailResponse) -- ^ Monadic computation which returns the result of the operation
put_fyi_deliveryoptions_emailWithConfiguration config
                                               enabled = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Put_fyi_deliveryoptions_emailResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Put_fyi_deliveryoptions_emailResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Put_fyi_deliveryoptions_emailResponseBody200)
                                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/fyi/deliveryoptions/email") [IBKR.Common.QueryParameter (Data.Text.pack "enabled") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON enabled) (Data.Text.pack "form") GHC.Types.False])
-- | > PUT /fyi/deliveryoptions/email
-- 
-- The same as 'put_fyi_deliveryoptions_email' but returns the raw 'Data.ByteString.Char8.ByteString'.
put_fyi_deliveryoptions_emailRaw :: forall m . IBKR.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ enabled: true\/false
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
put_fyi_deliveryoptions_emailRaw enabled = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/fyi/deliveryoptions/email") [IBKR.Common.QueryParameter (Data.Text.pack "enabled") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON enabled) (Data.Text.pack "form") GHC.Types.False])
-- | > PUT /fyi/deliveryoptions/email
-- 
-- The same as 'put_fyi_deliveryoptions_email' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
put_fyi_deliveryoptions_emailWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ enabled: true\/false
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
put_fyi_deliveryoptions_emailWithConfigurationRaw config
                                                  enabled = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/fyi/deliveryoptions/email") [IBKR.Common.QueryParameter (Data.Text.pack "enabled") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON enabled) (Data.Text.pack "form") GHC.Types.False])
