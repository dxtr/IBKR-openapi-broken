-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation delete_iserver_account__accountId__order__orderId_
module IBKR.Operations.Delete_iserver_account__accountId__order__orderId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > DELETE /iserver/account/{accountId}/order/{orderId}
-- 
-- Cancels an open order. Must call \/iserver\/accounts endpoint prior to cancelling an order. Use \/iservers\/account\/orders endpoint to review open-order(s) and get latest order status.
delete_iserver_account__accountId__order__orderId_ :: forall m . IBKR.Common.MonadHTTP m => Delete_iserver_account__accountId__order__orderId_Parameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Delete_iserver_account__accountId__order__orderId_Response) -- ^ Monadic computation which returns the result of the operation
delete_iserver_account__accountId__order__orderId_ parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Delete_iserver_account__accountId__order__orderId_ResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Delete_iserver_account__accountId__order__orderId_Response200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
elete_iserver_account__accountId__order__orderId_ResponseBody200)
                                                                                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/iserver/account/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (delete_iserver_account__accountId__order__orderId_ParametersPathAccountId parameters))) GHC.Base.++ ("/order/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (delete_iserver_account__accountId__order__orderId_ParametersPathOrderId parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/iserver\/account\/{accountId}\/order\/{orderId}.DELETE.parameters@ in the specification.
-- 
-- 
data Delete_iserver_account__accountId__order__orderId_Parameters = Delete_iserver_account__accountId__order__orderId_Parameters {
  -- | pathAccountId: Represents the parameter named \'accountId\'
  -- 
  -- account id, or fa group if deleting a group order
  delete_iserver_account__accountId__order__orderId_ParametersPathAccountId :: Data.Text.Internal.Text
  -- | pathOrderId: Represents the parameter named \'orderId\'
  -- 
  -- Customer order id, use \/iservers\/account\/orders endpoint to query orderId.
  , delete_iserver_account__accountId__order__orderId_ParametersPathOrderId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Delete_iserver_account__accountId__order__orderId_Parameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathAccountId" Data.Aeson.Types.ToJSON..= delete_iserver_account__accountId__order__orderId_ParametersPathAccountId obj] : ["pathOrderId" Data.Aeson.Types.ToJSON..= delete_iserver_account__accountId__order__orderId_ParametersPathOrderId obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathAccountId" Data.Aeson.Types.ToJSON..= delete_iserver_account__accountId__order__orderId_ParametersPathAccountId obj] : ["pathOrderId" Data.Aeson.Types.ToJSON..= delete_iserver_account__accountId__order__orderId_ParametersPathOrderId obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Delete_iserver_account__accountId__order__orderId_Parameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Delete_iserver_account__accountId__order__orderId_Parameters" (\obj -> (GHC.Base.pure Delete_iserver_account__accountId__order__orderId_Parameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathAccountId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathOrderId"))
-- | Create a new 'Delete_iserver_account__accountId__order__orderId_Parameters' with all required fields.
mkDelete_iserver_account__accountId__order__orderId_Parameters :: Data.Text.Internal.Text -- ^ 'delete_iserver_account__accountId__order__orderId_ParametersPathAccountId'
  -> Data.Text.Internal.Text -- ^ 'delete_iserver_account__accountId__order__orderId_ParametersPathOrderId'
  -> Delete_iserver_account__accountId__order__orderId_Parameters
mkDelete_iserver_account__accountId__order__orderId_Parameters delete_iserver_account__accountId__order__orderId_ParametersPathAccountId delete_iserver_account__accountId__order__orderId_ParametersPathOrderId = Delete_iserver_account__accountId__order__orderId_Parameters{delete_iserver_account__accountId__order__orderId_ParametersPathAccountId = delete_iserver_account__accountId__order__orderId_ParametersPathAccountId,
                                                                                                                                                                                                                                                                                delete_iserver_account__accountId__order__orderId_ParametersPathOrderId = delete_iserver_account__accountId__order__orderId_ParametersPathOrderId}
-- | Represents a response of the operation 'delete_iserver_account__accountId__order__orderId_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Delete_iserver_account__accountId__order__orderId_ResponseError' is used.
data Delete_iserver_account__accountId__order__orderId_Response =
   Delete_iserver_account__accountId__order__orderId_ResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Delete_iserver_account__accountId__order__orderId_Response200 Delete_iserver_account__accountId__order__orderId_ResponseBody200 -- ^ returns an object with order id, message, conid and account id
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/iserver\/account\/{accountId}\/order\/{orderId}.DELETE.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Delete_iserver_account__accountId__order__orderId_ResponseBody200 = Delete_iserver_account__accountId__order__orderId_ResponseBody200 {
  -- | account
  delete_iserver_account__accountId__order__orderId_ResponseBody200Account :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | conid
  , delete_iserver_account__accountId__order__orderId_ResponseBody200Conid :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | msg
  , delete_iserver_account__accountId__order__orderId_ResponseBody200Msg :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | order_id
  , delete_iserver_account__accountId__order__orderId_ResponseBody200Order_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Delete_iserver_account__accountId__order__orderId_ResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (delete_iserver_account__accountId__order__orderId_ResponseBody200Account obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conid" Data.Aeson.Types.ToJSON..=)) (delete_iserver_account__accountId__order__orderId_ResponseBody200Conid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("msg" Data.Aeson.Types.ToJSON..=)) (delete_iserver_account__accountId__order__orderId_ResponseBody200Msg obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("order_id" Data.Aeson.Types.ToJSON..=)) (delete_iserver_account__accountId__order__orderId_ResponseBody200Order_id obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (delete_iserver_account__accountId__order__orderId_ResponseBody200Account obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conid" Data.Aeson.Types.ToJSON..=)) (delete_iserver_account__accountId__order__orderId_ResponseBody200Conid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("msg" Data.Aeson.Types.ToJSON..=)) (delete_iserver_account__accountId__order__orderId_ResponseBody200Msg obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("order_id" Data.Aeson.Types.ToJSON..=)) (delete_iserver_account__accountId__order__orderId_ResponseBody200Order_id obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Delete_iserver_account__accountId__order__orderId_ResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Delete_iserver_account__accountId__order__orderId_ResponseBody200" (\obj -> (((GHC.Base.pure Delete_iserver_account__accountId__order__orderId_ResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "conid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "msg")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "order_id"))
-- | Create a new 'Delete_iserver_account__accountId__order__orderId_ResponseBody200' with all required fields.
mkDelete_iserver_account__accountId__order__orderId_ResponseBody200 :: Delete_iserver_account__accountId__order__orderId_ResponseBody200
mkDelete_iserver_account__accountId__order__orderId_ResponseBody200 = Delete_iserver_account__accountId__order__orderId_ResponseBody200{delete_iserver_account__accountId__order__orderId_ResponseBody200Account = GHC.Maybe.Nothing,
                                                                                                                                        delete_iserver_account__accountId__order__orderId_ResponseBody200Conid = GHC.Maybe.Nothing,
                                                                                                                                        delete_iserver_account__accountId__order__orderId_ResponseBody200Msg = GHC.Maybe.Nothing,
                                                                                                                                        delete_iserver_account__accountId__order__orderId_ResponseBody200Order_id = GHC.Maybe.Nothing}
-- | > DELETE /iserver/account/{accountId}/order/{orderId}
-- 
-- The same as 'delete_iserver_account__accountId__order__orderId_' but accepts an explicit configuration.
delete_iserver_account__accountId__order__orderId_WithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Delete_iserver_account__accountId__order__orderId_Parameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Delete_iserver_account__accountId__order__orderId_Response) -- ^ Monadic computation which returns the result of the operation
delete_iserver_account__accountId__order__orderId_WithConfiguration config
                                                                    parameters = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Delete_iserver_account__accountId__order__orderId_ResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Delete_iserver_account__accountId__order__orderId_Response200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
elete_iserver_account__accountId__order__orderId_ResponseBody200)
                                                                                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/iserver/account/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (delete_iserver_account__accountId__order__orderId_ParametersPathAccountId parameters))) GHC.Base.++ ("/order/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (delete_iserver_account__accountId__order__orderId_ParametersPathOrderId parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
-- | > DELETE /iserver/account/{accountId}/order/{orderId}
-- 
-- The same as 'delete_iserver_account__accountId__order__orderId_' but returns the raw 'Data.ByteString.Char8.ByteString'.
delete_iserver_account__accountId__order__orderId_Raw :: forall m . IBKR.Common.MonadHTTP m => Delete_iserver_account__accountId__order__orderId_Parameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
delete_iserver_account__accountId__order__orderId_Raw parameters = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/iserver/account/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (delete_iserver_account__accountId__order__orderId_ParametersPathAccountId parameters))) GHC.Base.++ ("/order/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (delete_iserver_account__accountId__order__orderId_ParametersPathOrderId parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
-- | > DELETE /iserver/account/{accountId}/order/{orderId}
-- 
-- The same as 'delete_iserver_account__accountId__order__orderId_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
delete_iserver_account__accountId__order__orderId_WithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Delete_iserver_account__accountId__order__orderId_Parameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
delete_iserver_account__accountId__order__orderId_WithConfigurationRaw config
                                                                       parameters = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/iserver/account/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (delete_iserver_account__accountId__order__orderId_ParametersPathAccountId parameters))) GHC.Base.++ ("/order/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (delete_iserver_account__accountId__order__orderId_ParametersPathOrderId parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
