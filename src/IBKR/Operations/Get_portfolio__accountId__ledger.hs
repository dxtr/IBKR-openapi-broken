-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_portfolio__accountId__ledger
module IBKR.Operations.Get_portfolio__accountId__ledger where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /portfolio/{accountId}/ledger
-- 
-- Information regarding settled cash, cash balances, etc. in the account\'s base currency and any other cash balances hold in other currencies.  \/portfolio\/accounts or \/portfolio\/subaccounts must be called prior to this endpoint. The list of supported currencies is available at https:\/\/www.interactivebrokers.com\/en\/index.php?f=3185.
get_portfolio__accountId__ledger :: forall m . IBKR.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ accountId: account id
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_portfolio__accountId__ledgerResponse) -- ^ Monadic computation which returns the result of the operation
get_portfolio__accountId__ledger accountId = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_portfolio__accountId__ledgerResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_portfolio__accountId__ledgerResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Get_portfolio__accountId__ledgerResponseBody200)
                                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/portfolio/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel accountId)) GHC.Base.++ "/ledger"))) GHC.Base.mempty)
-- | Represents a response of the operation 'get_portfolio__accountId__ledger'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_portfolio__accountId__ledgerResponseError' is used.
data Get_portfolio__accountId__ledgerResponse =
   Get_portfolio__accountId__ledgerResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_portfolio__accountId__ledgerResponse200 Get_portfolio__accountId__ledgerResponseBody200 -- ^ 200 means successful
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/portfolio\/{accountId}\/ledger.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Get_portfolio__accountId__ledgerResponseBody200 = Get_portfolio__accountId__ledgerResponseBody200 {
  -- | BASE
  get_portfolio__accountId__ledgerResponseBody200BASE :: (GHC.Maybe.Maybe Ledger)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_portfolio__accountId__ledgerResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("BASE" Data.Aeson.Types.ToJSON..=)) (get_portfolio__accountId__ledgerResponseBody200BASE obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("BASE" Data.Aeson.Types.ToJSON..=)) (get_portfolio__accountId__ledgerResponseBody200BASE obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_portfolio__accountId__ledgerResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_portfolio__accountId__ledgerResponseBody200" (\obj -> GHC.Base.pure Get_portfolio__accountId__ledgerResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "BASE"))
-- | Create a new 'Get_portfolio__accountId__ledgerResponseBody200' with all required fields.
mkGet_portfolio__accountId__ledgerResponseBody200 :: Get_portfolio__accountId__ledgerResponseBody200
mkGet_portfolio__accountId__ledgerResponseBody200 = Get_portfolio__accountId__ledgerResponseBody200{get_portfolio__accountId__ledgerResponseBody200BASE = GHC.Maybe.Nothing}
-- | > GET /portfolio/{accountId}/ledger
-- 
-- The same as 'get_portfolio__accountId__ledger' but accepts an explicit configuration.
get_portfolio__accountId__ledgerWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ accountId: account id
  -> m (Network.HTTP.Client.Types.Response Get_portfolio__accountId__ledgerResponse) -- ^ Monadic computation which returns the result of the operation
get_portfolio__accountId__ledgerWithConfiguration config
                                                  accountId = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Get_portfolio__accountId__ledgerResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_portfolio__accountId__ledgerResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Get_portfolio__accountId__ledgerResponseBody200)
                                                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/portfolio/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel accountId)) GHC.Base.++ "/ledger"))) GHC.Base.mempty)
-- | > GET /portfolio/{accountId}/ledger
-- 
-- The same as 'get_portfolio__accountId__ledger' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_portfolio__accountId__ledgerRaw :: forall m . IBKR.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ accountId: account id
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_portfolio__accountId__ledgerRaw accountId = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/portfolio/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel accountId)) GHC.Base.++ "/ledger"))) GHC.Base.mempty)
-- | > GET /portfolio/{accountId}/ledger
-- 
-- The same as 'get_portfolio__accountId__ledger' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_portfolio__accountId__ledgerWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ accountId: account id
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_portfolio__accountId__ledgerWithConfigurationRaw config
                                                     accountId = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/portfolio/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel accountId)) GHC.Base.++ "/ledger"))) GHC.Base.mempty)
