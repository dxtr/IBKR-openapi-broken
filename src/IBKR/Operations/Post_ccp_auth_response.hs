-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation post_ccp_auth_response
module IBKR.Operations.Post_ccp_auth_response where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > POST /ccp/auth/response
-- 
-- Session Token Authentication
post_ccp_auth_response :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Post_ccp_auth_responseResponse) -- ^ Monadic computation which returns the result of the operation
post_ccp_auth_response = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Post_ccp_auth_responseResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_ccp_auth_responseResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                Post_ccp_auth_responseResponseBody200)
                                                                                                                                                                          | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Post_ccp_auth_responseResponse401
                                                                                                                                                                          | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Post_ccp_auth_responseResponse500
                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/ccp/auth/response") GHC.Base.mempty)
-- | Represents a response of the operation 'post_ccp_auth_response'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Post_ccp_auth_responseResponseError' is used.
data Post_ccp_auth_responseResponse =
   Post_ccp_auth_responseResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Post_ccp_auth_responseResponse200 Post_ccp_auth_responseResponseBody200 -- ^ Valid result
  | Post_ccp_auth_responseResponse401 -- ^ Access denied
  | Post_ccp_auth_responseResponse500 -- ^ System error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/ccp\/auth\/response.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Post_ccp_auth_responseResponseBody200 = Post_ccp_auth_responseResponseBody200 {
  -- | authenticated: If connection is authenticated
  post_ccp_auth_responseResponseBody200Authenticated :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | competing: If user already has an existing brokerage session running.
  , post_ccp_auth_responseResponseBody200Competing :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | connected: Connected to CCP session
  , post_ccp_auth_responseResponseBody200Connected :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | passed: If sso authentication completed
  , post_ccp_auth_responseResponseBody200Passed :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_ccp_auth_responseResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authenticated" Data.Aeson.Types.ToJSON..=)) (post_ccp_auth_responseResponseBody200Authenticated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("competing" Data.Aeson.Types.ToJSON..=)) (post_ccp_auth_responseResponseBody200Competing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("connected" Data.Aeson.Types.ToJSON..=)) (post_ccp_auth_responseResponseBody200Connected obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("passed" Data.Aeson.Types.ToJSON..=)) (post_ccp_auth_responseResponseBody200Passed obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authenticated" Data.Aeson.Types.ToJSON..=)) (post_ccp_auth_responseResponseBody200Authenticated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("competing" Data.Aeson.Types.ToJSON..=)) (post_ccp_auth_responseResponseBody200Competing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("connected" Data.Aeson.Types.ToJSON..=)) (post_ccp_auth_responseResponseBody200Connected obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("passed" Data.Aeson.Types.ToJSON..=)) (post_ccp_auth_responseResponseBody200Passed obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_ccp_auth_responseResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_ccp_auth_responseResponseBody200" (\obj -> (((GHC.Base.pure Post_ccp_auth_responseResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authenticated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "competing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "connected")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "passed"))
-- | Create a new 'Post_ccp_auth_responseResponseBody200' with all required fields.
mkPost_ccp_auth_responseResponseBody200 :: Post_ccp_auth_responseResponseBody200
mkPost_ccp_auth_responseResponseBody200 = Post_ccp_auth_responseResponseBody200{post_ccp_auth_responseResponseBody200Authenticated = GHC.Maybe.Nothing,
                                                                                post_ccp_auth_responseResponseBody200Competing = GHC.Maybe.Nothing,
                                                                                post_ccp_auth_responseResponseBody200Connected = GHC.Maybe.Nothing,
                                                                                post_ccp_auth_responseResponseBody200Passed = GHC.Maybe.Nothing}
-- | > POST /ccp/auth/response
-- 
-- The same as 'post_ccp_auth_response' but accepts an explicit configuration.
post_ccp_auth_responseWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Post_ccp_auth_responseResponse) -- ^ Monadic computation which returns the result of the operation
post_ccp_auth_responseWithConfiguration config = GHC.Base.fmap (\response_4 -> GHC.Base.fmap (Data.Either.either Post_ccp_auth_responseResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_ccp_auth_responseResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                        Post_ccp_auth_responseResponseBody200)
                                                                                                                                                                                                  | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Post_ccp_auth_responseResponse401
                                                                                                                                                                                                  | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Post_ccp_auth_responseResponse500
                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_4) response_4) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/ccp/auth/response") GHC.Base.mempty)
-- | > POST /ccp/auth/response
-- 
-- The same as 'post_ccp_auth_response' but returns the raw 'Data.ByteString.Char8.ByteString'.
post_ccp_auth_responseRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_ccp_auth_responseRaw = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/ccp/auth/response") GHC.Base.mempty)
-- | > POST /ccp/auth/response
-- 
-- The same as 'post_ccp_auth_response' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
post_ccp_auth_responseWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_ccp_auth_responseWithConfigurationRaw config = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/ccp/auth/response") GHC.Base.mempty)
