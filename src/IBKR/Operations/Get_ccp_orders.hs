-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_ccp_orders
module IBKR.Operations.Get_ccp_orders where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /ccp/orders
-- 
-- Get status for all orders
get_ccp_orders :: forall m . IBKR.Common.MonadHTTP m => Get_ccp_ordersParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_ccp_ordersResponse) -- ^ Monadic computation which returns the result of the operation
get_ccp_orders parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_ccp_ordersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_ccp_ordersResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   Get_ccp_ordersResponseBody200)
                                                                                                                                                                     | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_ccp_ordersResponse400
                                                                                                                                                                     | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_ccp_ordersResponse401
                                                                                                                                                                     | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_ccp_ordersResponse500
                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/ccp/orders") [IBKR.Common.QueryParameter (Data.Text.pack "acct") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_ccp_ordersParametersQueryAcct parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                    IBKR.Common.QueryParameter (Data.Text.pack "cancelled") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_ccp_ordersParametersQueryCancelled parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/ccp\/orders.GET.parameters@ in the specification.
-- 
-- 
data Get_ccp_ordersParameters = Get_ccp_ordersParameters {
  -- | queryAcct: Represents the parameter named \'acct\'
  -- 
  -- User Account
  get_ccp_ordersParametersQueryAcct :: Data.Text.Internal.Text
  -- | queryCancelled: Represents the parameter named \'cancelled\'
  -- 
  -- Return only Rejected or Cancelled orders since today midnight
  , get_ccp_ordersParametersQueryCancelled :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_ccp_ordersParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryAcct" Data.Aeson.Types.ToJSON..= get_ccp_ordersParametersQueryAcct obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCancelled" Data.Aeson.Types.ToJSON..=)) (get_ccp_ordersParametersQueryCancelled obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryAcct" Data.Aeson.Types.ToJSON..= get_ccp_ordersParametersQueryAcct obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCancelled" Data.Aeson.Types.ToJSON..=)) (get_ccp_ordersParametersQueryCancelled obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_ccp_ordersParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_ccp_ordersParameters" (\obj -> (GHC.Base.pure Get_ccp_ordersParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryAcct")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryCancelled"))
-- | Create a new 'Get_ccp_ordersParameters' with all required fields.
mkGet_ccp_ordersParameters :: Data.Text.Internal.Text -- ^ 'get_ccp_ordersParametersQueryAcct'
  -> Get_ccp_ordersParameters
mkGet_ccp_ordersParameters get_ccp_ordersParametersQueryAcct = Get_ccp_ordersParameters{get_ccp_ordersParametersQueryAcct = get_ccp_ordersParametersQueryAcct,
                                                                                        get_ccp_ordersParametersQueryCancelled = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'get_ccp_orders'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_ccp_ordersResponseError' is used.
data Get_ccp_ordersResponse =
   Get_ccp_ordersResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_ccp_ordersResponse200 Get_ccp_ordersResponseBody200 -- ^ An Object
  | Get_ccp_ordersResponse400 -- ^ Bad request
  | Get_ccp_ordersResponse401 -- ^ Access denied
  | Get_ccp_ordersResponse500 -- ^ System error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/ccp\/orders.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Get_ccp_ordersResponseBody200 = Get_ccp_ordersResponseBody200 {
  -- | orders
  get_ccp_ordersResponseBody200Orders :: (GHC.Maybe.Maybe ([Order_data]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_ccp_ordersResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orders" Data.Aeson.Types.ToJSON..=)) (get_ccp_ordersResponseBody200Orders obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orders" Data.Aeson.Types.ToJSON..=)) (get_ccp_ordersResponseBody200Orders obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_ccp_ordersResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_ccp_ordersResponseBody200" (\obj -> GHC.Base.pure Get_ccp_ordersResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "orders"))
-- | Create a new 'Get_ccp_ordersResponseBody200' with all required fields.
mkGet_ccp_ordersResponseBody200 :: Get_ccp_ordersResponseBody200
mkGet_ccp_ordersResponseBody200 = Get_ccp_ordersResponseBody200{get_ccp_ordersResponseBody200Orders = GHC.Maybe.Nothing}
-- | > GET /ccp/orders
-- 
-- The same as 'get_ccp_orders' but accepts an explicit configuration.
get_ccp_ordersWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_ccp_ordersParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Get_ccp_ordersResponse) -- ^ Monadic computation which returns the result of the operation
get_ccp_ordersWithConfiguration config
                                parameters = GHC.Base.fmap (\response_5 -> GHC.Base.fmap (Data.Either.either Get_ccp_ordersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_ccp_ordersResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    Get_ccp_ordersResponseBody200)
                                                                                                                                                                                      | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_ccp_ordersResponse400
                                                                                                                                                                                      | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_ccp_ordersResponse401
                                                                                                                                                                                      | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_ccp_ordersResponse500
                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_5) response_5) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/ccp/orders") [IBKR.Common.QueryParameter (Data.Text.pack "acct") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_ccp_ordersParametersQueryAcct parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                           IBKR.Common.QueryParameter (Data.Text.pack "cancelled") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_ccp_ordersParametersQueryCancelled parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /ccp/orders
-- 
-- The same as 'get_ccp_orders' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_ccp_ordersRaw :: forall m . IBKR.Common.MonadHTTP m => Get_ccp_ordersParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_ccp_ordersRaw parameters = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/ccp/orders") [IBKR.Common.QueryParameter (Data.Text.pack "acct") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_ccp_ordersParametersQueryAcct parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                        IBKR.Common.QueryParameter (Data.Text.pack "cancelled") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_ccp_ordersParametersQueryCancelled parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /ccp/orders
-- 
-- The same as 'get_ccp_orders' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_ccp_ordersWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_ccp_ordersParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_ccp_ordersWithConfigurationRaw config
                                   parameters = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/ccp/orders") [IBKR.Common.QueryParameter (Data.Text.pack "acct") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_ccp_ordersParametersQueryAcct parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                               IBKR.Common.QueryParameter (Data.Text.pack "cancelled") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_ccp_ordersParametersQueryCancelled parameters) (Data.Text.pack "form") GHC.Types.False])
