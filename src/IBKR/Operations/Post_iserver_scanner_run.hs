-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation post_iserver_scanner_run
module IBKR.Operations.Post_iserver_scanner_run where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > POST /iserver/scanner/run
-- 
-- run scanner to get a list of contracts
post_iserver_scanner_run :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Post_iserver_scanner_runResponse) -- ^ Monadic computation which returns the result of the operation
post_iserver_scanner_run = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Post_iserver_scanner_runResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_iserver_scanner_runResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                      ([Post_iserver_scanner_runResponseBody200]))
                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/iserver/scanner/run") GHC.Base.mempty)
-- | Represents a response of the operation 'post_iserver_scanner_run'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Post_iserver_scanner_runResponseError' is used.
data Post_iserver_scanner_runResponse =
   Post_iserver_scanner_runResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Post_iserver_scanner_runResponse200 ([Post_iserver_scanner_runResponseBody200]) -- ^ returns an array
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/iserver\/scanner\/run.POST.responses.200.content.application\/json.schema.items@ in the specification.
-- 
-- 
data Post_iserver_scanner_runResponseBody200 = Post_iserver_scanner_runResponseBody200 {
  -- | available_chart_periods: List of available chart periods
  post_iserver_scanner_runResponseBody200Available_chart_periods :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | column_name
  , post_iserver_scanner_runResponseBody200Column_name :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | company_name: Contracts company name
  , post_iserver_scanner_runResponseBody200Company_name :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | con_id
  , post_iserver_scanner_runResponseBody200Con_id :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | conidex: conid and exchange. Format supports conid or conid\@exchange
  , post_iserver_scanner_runResponseBody200Conidex :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | contract_description_1: Format contract name
  , post_iserver_scanner_runResponseBody200Contract_description_1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | listing_exchange
  , post_iserver_scanner_runResponseBody200Listing_exchange :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | sec_type
  , post_iserver_scanner_runResponseBody200Sec_type :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | server_id
  , post_iserver_scanner_runResponseBody200Server_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | symbol: Underlying symbol
  , post_iserver_scanner_runResponseBody200Symbol :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_iserver_scanner_runResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available_chart_periods" Data.Aeson.Types.ToJSON..=)) (post_iserver_scanner_runResponseBody200Available_chart_periods obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("column_name" Data.Aeson.Types.ToJSON..=)) (post_iserver_scanner_runResponseBody200Column_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("company_name" Data.Aeson.Types.ToJSON..=)) (post_iserver_scanner_runResponseBody200Company_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("con_id" Data.Aeson.Types.ToJSON..=)) (post_iserver_scanner_runResponseBody200Con_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conidex" Data.Aeson.Types.ToJSON..=)) (post_iserver_scanner_runResponseBody200Conidex obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("contract_description_1" Data.Aeson.Types.ToJSON..=)) (post_iserver_scanner_runResponseBody200Contract_description_1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("listing_exchange" Data.Aeson.Types.ToJSON..=)) (post_iserver_scanner_runResponseBody200Listing_exchange obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sec_type" Data.Aeson.Types.ToJSON..=)) (post_iserver_scanner_runResponseBody200Sec_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("server_id" Data.Aeson.Types.ToJSON..=)) (post_iserver_scanner_runResponseBody200Server_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol" Data.Aeson.Types.ToJSON..=)) (post_iserver_scanner_runResponseBody200Symbol obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available_chart_periods" Data.Aeson.Types.ToJSON..=)) (post_iserver_scanner_runResponseBody200Available_chart_periods obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("column_name" Data.Aeson.Types.ToJSON..=)) (post_iserver_scanner_runResponseBody200Column_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("company_name" Data.Aeson.Types.ToJSON..=)) (post_iserver_scanner_runResponseBody200Company_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("con_id" Data.Aeson.Types.ToJSON..=)) (post_iserver_scanner_runResponseBody200Con_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conidex" Data.Aeson.Types.ToJSON..=)) (post_iserver_scanner_runResponseBody200Conidex obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("contract_description_1" Data.Aeson.Types.ToJSON..=)) (post_iserver_scanner_runResponseBody200Contract_description_1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("listing_exchange" Data.Aeson.Types.ToJSON..=)) (post_iserver_scanner_runResponseBody200Listing_exchange obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sec_type" Data.Aeson.Types.ToJSON..=)) (post_iserver_scanner_runResponseBody200Sec_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("server_id" Data.Aeson.Types.ToJSON..=)) (post_iserver_scanner_runResponseBody200Server_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol" Data.Aeson.Types.ToJSON..=)) (post_iserver_scanner_runResponseBody200Symbol obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_iserver_scanner_runResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_iserver_scanner_runResponseBody200" (\obj -> (((((((((GHC.Base.pure Post_iserver_scanner_runResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "available_chart_periods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "column_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "company_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "con_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "conidex")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "contract_description_1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "listing_exchange")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sec_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "server_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "symbol"))
-- | Create a new 'Post_iserver_scanner_runResponseBody200' with all required fields.
mkPost_iserver_scanner_runResponseBody200 :: Post_iserver_scanner_runResponseBody200
mkPost_iserver_scanner_runResponseBody200 = Post_iserver_scanner_runResponseBody200{post_iserver_scanner_runResponseBody200Available_chart_periods = GHC.Maybe.Nothing,
                                                                                    post_iserver_scanner_runResponseBody200Column_name = GHC.Maybe.Nothing,
                                                                                    post_iserver_scanner_runResponseBody200Company_name = GHC.Maybe.Nothing,
                                                                                    post_iserver_scanner_runResponseBody200Con_id = GHC.Maybe.Nothing,
                                                                                    post_iserver_scanner_runResponseBody200Conidex = GHC.Maybe.Nothing,
                                                                                    post_iserver_scanner_runResponseBody200Contract_description_1 = GHC.Maybe.Nothing,
                                                                                    post_iserver_scanner_runResponseBody200Listing_exchange = GHC.Maybe.Nothing,
                                                                                    post_iserver_scanner_runResponseBody200Sec_type = GHC.Maybe.Nothing,
                                                                                    post_iserver_scanner_runResponseBody200Server_id = GHC.Maybe.Nothing,
                                                                                    post_iserver_scanner_runResponseBody200Symbol = GHC.Maybe.Nothing}
-- | > POST /iserver/scanner/run
-- 
-- The same as 'post_iserver_scanner_run' but accepts an explicit configuration.
post_iserver_scanner_runWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Post_iserver_scanner_runResponse) -- ^ Monadic computation which returns the result of the operation
post_iserver_scanner_runWithConfiguration config = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Post_iserver_scanner_runResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_iserver_scanner_runResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              ([Post_iserver_scanner_runResponseBody200]))
                                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/iserver/scanner/run") GHC.Base.mempty)
-- | > POST /iserver/scanner/run
-- 
-- The same as 'post_iserver_scanner_run' but returns the raw 'Data.ByteString.Char8.ByteString'.
post_iserver_scanner_runRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_iserver_scanner_runRaw = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/iserver/scanner/run") GHC.Base.mempty)
-- | > POST /iserver/scanner/run
-- 
-- The same as 'post_iserver_scanner_run' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
post_iserver_scanner_runWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_iserver_scanner_runWithConfigurationRaw config = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/iserver/scanner/run") GHC.Base.mempty)
