-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation post_iserver_account__accountId__orders
module IBKR.Operations.Post_iserver_account__accountId__orders where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > POST /iserver/account/{accountId}/orders
-- 
-- When connected to an IServer Brokerage Session, this endpoint will allow you to submit orders. 
-- CP WEB API supports various advanced orderTypes, for additional details and examples refer to [IBKR Quant Blog](https:\/\/www.tradersinsight.news\/category\/ibkr-quant-news\/programming_languages\/rest-development\/).
--   * Bracket - Attach additional opposite-side order(s) by using a single **cOID** sent with the parent and set the same value for **parentId** in each child order(s).
--   * Cash Quantity -  Send orders using monetary value by specifying **cashQty** instead of quantity, e.g. cashQty: 200. The endpoint \/iserver\/contract\/rules returns list of valid orderTypes in cqtTypes.
--   * Currency Conversion - Convert cash from one currency to another by including **isCcyConv** = **true**. To specify the cash quantity use **fxQTY** instead of quantity, e.g. fxQTY: 100.
--   * Fractional - Contracts that support fractional shares can be traded by specifying **quantity** as a float, e.g. quantity: 0.001. The endpoint \/iserver\/contract\/rules returns a list of valid orderTypes in fraqTypes.
--   * IB Algos - Attached user-defined settings to your trades by using any of IBKR\'s Algo Orders. Use the endpoint \/iserver\/contract\/{conid}\/algos to identify the available strategies for a contract.
--   * One-Cancels-All (OCA) - Group multiple unrelated orders by passing order request info in an array and including **isSingleGroup = true** for each order. All orders will be assigned the same oca_group_id.
post_iserver_account__accountId__orders :: forall m . IBKR.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ accountId: account id
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Post_iserver_account__accountId__ordersResponse) -- ^ Monadic computation which returns the result of the operation
post_iserver_account__accountId__orders accountId = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Post_iserver_account__accountId__ordersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_iserver_account__accountId__ordersResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ([Post_iserver_account__accountId__ordersResponseBody200]))
                                                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/iserver/account/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel accountId)) GHC.Base.++ "/orders"))) GHC.Base.mempty)
-- | Represents a response of the operation 'post_iserver_account__accountId__orders'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Post_iserver_account__accountId__ordersResponseError' is used.
data Post_iserver_account__accountId__ordersResponse =
   Post_iserver_account__accountId__ordersResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Post_iserver_account__accountId__ordersResponse200 ([Post_iserver_account__accountId__ordersResponseBody200]) -- ^ returns an array
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/iserver\/account\/{accountId}\/orders.POST.responses.200.content.application\/json.schema.items@ in the specification.
-- 
-- 
data Post_iserver_account__accountId__ordersResponseBody200 = Post_iserver_account__accountId__ordersResponseBody200 {
  -- | id
  post_iserver_account__accountId__ordersResponseBody200Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | message: Please note here, if the message is a question, you have to reply to question in order to submit
  -- the order successfully. See more in the \"\/iserver\/reply\/{replyid}\" endpoint.
  , post_iserver_account__accountId__ordersResponseBody200Message :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_iserver_account__accountId__ordersResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (post_iserver_account__accountId__ordersResponseBody200Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("message" Data.Aeson.Types.ToJSON..=)) (post_iserver_account__accountId__ordersResponseBody200Message obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (post_iserver_account__accountId__ordersResponseBody200Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("message" Data.Aeson.Types.ToJSON..=)) (post_iserver_account__accountId__ordersResponseBody200Message obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_iserver_account__accountId__ordersResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_iserver_account__accountId__ordersResponseBody200" (\obj -> (GHC.Base.pure Post_iserver_account__accountId__ordersResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "message"))
-- | Create a new 'Post_iserver_account__accountId__ordersResponseBody200' with all required fields.
mkPost_iserver_account__accountId__ordersResponseBody200 :: Post_iserver_account__accountId__ordersResponseBody200
mkPost_iserver_account__accountId__ordersResponseBody200 = Post_iserver_account__accountId__ordersResponseBody200{post_iserver_account__accountId__ordersResponseBody200Id = GHC.Maybe.Nothing,
                                                                                                                  post_iserver_account__accountId__ordersResponseBody200Message = GHC.Maybe.Nothing}
-- | > POST /iserver/account/{accountId}/orders
-- 
-- The same as 'post_iserver_account__accountId__orders' but accepts an explicit configuration.
post_iserver_account__accountId__ordersWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ accountId: account id
  -> m (Network.HTTP.Client.Types.Response Post_iserver_account__accountId__ordersResponse) -- ^ Monadic computation which returns the result of the operation
post_iserver_account__accountId__ordersWithConfiguration config
                                                         accountId = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Post_iserver_account__accountId__ordersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_iserver_account__accountId__ordersResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ([Post_iserver_account__accountId__ordersResponseBody200]))
                                                                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/iserver/account/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel accountId)) GHC.Base.++ "/orders"))) GHC.Base.mempty)
-- | > POST /iserver/account/{accountId}/orders
-- 
-- The same as 'post_iserver_account__accountId__orders' but returns the raw 'Data.ByteString.Char8.ByteString'.
post_iserver_account__accountId__ordersRaw :: forall m . IBKR.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ accountId: account id
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_iserver_account__accountId__ordersRaw accountId = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/iserver/account/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel accountId)) GHC.Base.++ "/orders"))) GHC.Base.mempty)
-- | > POST /iserver/account/{accountId}/orders
-- 
-- The same as 'post_iserver_account__accountId__orders' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
post_iserver_account__accountId__ordersWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ accountId: account id
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_iserver_account__accountId__ordersWithConfigurationRaw config
                                                            accountId = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/iserver/account/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel accountId)) GHC.Base.++ "/orders"))) GHC.Base.mempty)
