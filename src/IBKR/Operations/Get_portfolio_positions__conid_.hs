-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_portfolio_positions__conid_
module IBKR.Operations.Get_portfolio_positions__conid_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /portfolio/positions/{conid}
-- 
-- Returns an object of all positions matching the conid for all the selected accounts. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to. \/portfolio\/accounts or \/portfolio\/subaccounts must be called prior to this endpoint.
get_portfolio_positions__conid_ :: forall m . IBKR.Common.MonadHTTP m => GHC.Types.Int -- ^ conid: contract id
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_portfolio_positions__conid_Response) -- ^ Monadic computation which returns the result of the operation
get_portfolio_positions__conid_ conid = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_portfolio_positions__conid_ResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_portfolio_positions__conid_Response200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Get_portfolio_positions__conid_ResponseBody200)
                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/portfolio/positions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel conid)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | Represents a response of the operation 'get_portfolio_positions__conid_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_portfolio_positions__conid_ResponseError' is used.
data Get_portfolio_positions__conid_Response =
   Get_portfolio_positions__conid_ResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_portfolio_positions__conid_Response200 Get_portfolio_positions__conid_ResponseBody200 -- ^ returns an object containing account and its position information
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/portfolio\/positions\/{conid}.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Get_portfolio_positions__conid_ResponseBody200 = Get_portfolio_positions__conid_ResponseBody200 {
  -- | ACCTID
  get_portfolio_positions__conid_ResponseBody200ACCTID :: (GHC.Maybe.Maybe Position)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_portfolio_positions__conid_ResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ACCTID" Data.Aeson.Types.ToJSON..=)) (get_portfolio_positions__conid_ResponseBody200ACCTID obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ACCTID" Data.Aeson.Types.ToJSON..=)) (get_portfolio_positions__conid_ResponseBody200ACCTID obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_portfolio_positions__conid_ResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_portfolio_positions__conid_ResponseBody200" (\obj -> GHC.Base.pure Get_portfolio_positions__conid_ResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ACCTID"))
-- | Create a new 'Get_portfolio_positions__conid_ResponseBody200' with all required fields.
mkGet_portfolio_positions__conid_ResponseBody200 :: Get_portfolio_positions__conid_ResponseBody200
mkGet_portfolio_positions__conid_ResponseBody200 = Get_portfolio_positions__conid_ResponseBody200{get_portfolio_positions__conid_ResponseBody200ACCTID = GHC.Maybe.Nothing}
-- | > GET /portfolio/positions/{conid}
-- 
-- The same as 'get_portfolio_positions__conid_' but accepts an explicit configuration.
get_portfolio_positions__conid_WithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Types.Int -- ^ conid: contract id
  -> m (Network.HTTP.Client.Types.Response Get_portfolio_positions__conid_Response) -- ^ Monadic computation which returns the result of the operation
get_portfolio_positions__conid_WithConfiguration config
                                                 conid = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Get_portfolio_positions__conid_ResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_portfolio_positions__conid_Response200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Get_portfolio_positions__conid_ResponseBody200)
                                                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/portfolio/positions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel conid)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /portfolio/positions/{conid}
-- 
-- The same as 'get_portfolio_positions__conid_' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_portfolio_positions__conid_Raw :: forall m . IBKR.Common.MonadHTTP m => GHC.Types.Int -- ^ conid: contract id
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_portfolio_positions__conid_Raw conid = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/portfolio/positions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel conid)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /portfolio/positions/{conid}
-- 
-- The same as 'get_portfolio_positions__conid_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_portfolio_positions__conid_WithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Types.Int -- ^ conid: contract id
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_portfolio_positions__conid_WithConfigurationRaw config
                                                    conid = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/portfolio/positions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel conid)) GHC.Base.++ ""))) GHC.Base.mempty)
