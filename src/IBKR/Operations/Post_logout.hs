-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation post_logout
module IBKR.Operations.Post_logout where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > POST /logout
-- 
-- Logs the user out of the gateway session. Any further activity requires re-authentication.
post_logout :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Post_logoutResponse) -- ^ Monadic computation which returns the result of the operation
post_logout = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Post_logoutResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_logoutResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                               Post_logoutResponseBody200)
                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/logout") GHC.Base.mempty)
-- | Represents a response of the operation 'post_logout'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Post_logoutResponseError' is used.
data Post_logoutResponse =
   Post_logoutResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Post_logoutResponse200 Post_logoutResponseBody200 -- ^ returned status indicates if user is logged in
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/logout.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Post_logoutResponseBody200 = Post_logoutResponseBody200 {
  -- | confirmed: true means username is still logged in, false means it is not
  post_logoutResponseBody200Confirmed :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_logoutResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("confirmed" Data.Aeson.Types.ToJSON..=)) (post_logoutResponseBody200Confirmed obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("confirmed" Data.Aeson.Types.ToJSON..=)) (post_logoutResponseBody200Confirmed obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_logoutResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_logoutResponseBody200" (\obj -> GHC.Base.pure Post_logoutResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "confirmed"))
-- | Create a new 'Post_logoutResponseBody200' with all required fields.
mkPost_logoutResponseBody200 :: Post_logoutResponseBody200
mkPost_logoutResponseBody200 = Post_logoutResponseBody200{post_logoutResponseBody200Confirmed = GHC.Maybe.Nothing}
-- | > POST /logout
-- 
-- The same as 'post_logout' but accepts an explicit configuration.
post_logoutWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Post_logoutResponse) -- ^ Monadic computation which returns the result of the operation
post_logoutWithConfiguration config = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Post_logoutResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_logoutResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       Post_logoutResponseBody200)
                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/logout") GHC.Base.mempty)
-- | > POST /logout
-- 
-- The same as 'post_logout' but returns the raw 'Data.ByteString.Char8.ByteString'.
post_logoutRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_logoutRaw = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/logout") GHC.Base.mempty)
-- | > POST /logout
-- 
-- The same as 'post_logout' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
post_logoutWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_logoutWithConfigurationRaw config = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/logout") GHC.Base.mempty)
