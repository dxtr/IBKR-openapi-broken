-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation post_iserver_secdef_search
module IBKR.Operations.Post_iserver_secdef_search where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > POST /iserver/secdef/search
-- 
-- Search by underlying symbol or company name. Relays back what derivative contract(s) it has. This endpoint must be called before using \/secdef\/info.
-- If company name is specified will only receive limited response: conid, companyName, companyHeader and symbol.
post_iserver_secdef_search :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Post_iserver_secdef_searchResponse) -- ^ Monadic computation which returns the result of the operation
post_iserver_secdef_search = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Post_iserver_secdef_searchResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_iserver_secdef_searchResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                            ([Post_iserver_secdef_searchResponseBody200]))
                                                                                                                                                                                  | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Post_iserver_secdef_searchResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                            Post_iserver_secdef_searchResponseBody500)
                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/iserver/secdef/search") GHC.Base.mempty)
-- | Represents a response of the operation 'post_iserver_secdef_search'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Post_iserver_secdef_searchResponseError' is used.
data Post_iserver_secdef_searchResponse =
   Post_iserver_secdef_searchResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Post_iserver_secdef_searchResponse200 ([Post_iserver_secdef_searchResponseBody200]) -- ^ returns an array of results
  | Post_iserver_secdef_searchResponse500 Post_iserver_secdef_searchResponseBody500 -- ^ error while processing the request
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/iserver\/secdef\/search.POST.responses.200.content.application\/json.schema.items@ in the specification.
-- 
-- 
data Post_iserver_secdef_searchResponseBody200 = Post_iserver_secdef_searchResponseBody200 {
  -- | companyHeader: Company Name - Exchange
  post_iserver_secdef_searchResponseBody200CompanyHeader :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | companyName
  , post_iserver_secdef_searchResponseBody200CompanyName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | conid: Contract Identifier
  , post_iserver_secdef_searchResponseBody200Conid :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | description: Exchange
  , post_iserver_secdef_searchResponseBody200Description :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | fop: List of Future Option expirations in YYYMMDD format separated by semicolon
  , post_iserver_secdef_searchResponseBody200Fop :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | opt: List of Option expirations in YYYYMMDD format separated by semicolon
  , post_iserver_secdef_searchResponseBody200Opt :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | restricted
  , post_iserver_secdef_searchResponseBody200Restricted :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | sections
  , post_iserver_secdef_searchResponseBody200Sections :: (GHC.Maybe.Maybe ([Post_iserver_secdef_searchResponseBody200Sections]))
  -- | symbol: Underlying symbol
  , post_iserver_secdef_searchResponseBody200Symbol :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | war: List of Warrant expirations in YYYYMMDD format separated by semicolon
  , post_iserver_secdef_searchResponseBody200War :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_iserver_secdef_searchResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("companyHeader" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200CompanyHeader obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("companyName" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200CompanyName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conid" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200Conid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200Description obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fop" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200Fop obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("opt" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200Opt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("restricted" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200Restricted obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sections" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200Sections obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200Symbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("war" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200War obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("companyHeader" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200CompanyHeader obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("companyName" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200CompanyName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conid" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200Conid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200Description obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fop" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200Fop obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("opt" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200Opt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("restricted" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200Restricted obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sections" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200Sections obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200Symbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("war" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200War obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_iserver_secdef_searchResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_iserver_secdef_searchResponseBody200" (\obj -> (((((((((GHC.Base.pure Post_iserver_secdef_searchResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "companyHeader")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "companyName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "conid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fop")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "opt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "restricted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sections")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "war"))
-- | Create a new 'Post_iserver_secdef_searchResponseBody200' with all required fields.
mkPost_iserver_secdef_searchResponseBody200 :: Post_iserver_secdef_searchResponseBody200
mkPost_iserver_secdef_searchResponseBody200 = Post_iserver_secdef_searchResponseBody200{post_iserver_secdef_searchResponseBody200CompanyHeader = GHC.Maybe.Nothing,
                                                                                        post_iserver_secdef_searchResponseBody200CompanyName = GHC.Maybe.Nothing,
                                                                                        post_iserver_secdef_searchResponseBody200Conid = GHC.Maybe.Nothing,
                                                                                        post_iserver_secdef_searchResponseBody200Description = GHC.Maybe.Nothing,
                                                                                        post_iserver_secdef_searchResponseBody200Fop = GHC.Maybe.Nothing,
                                                                                        post_iserver_secdef_searchResponseBody200Opt = GHC.Maybe.Nothing,
                                                                                        post_iserver_secdef_searchResponseBody200Restricted = GHC.Maybe.Nothing,
                                                                                        post_iserver_secdef_searchResponseBody200Sections = GHC.Maybe.Nothing,
                                                                                        post_iserver_secdef_searchResponseBody200Symbol = GHC.Maybe.Nothing,
                                                                                        post_iserver_secdef_searchResponseBody200War = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/secdef\/search.POST.responses.200.content.application\/json.schema.items.properties.sections.items@ in the specification.
-- 
-- 
data Post_iserver_secdef_searchResponseBody200Sections = Post_iserver_secdef_searchResponseBody200Sections {
  -- | exchange: Listing Exchange
  post_iserver_secdef_searchResponseBody200SectionsExchange :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | legSecType: For combo\'s defines the asset class for each leg
  , post_iserver_secdef_searchResponseBody200SectionsLegSecType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | months: List of expiration month(s) and year(s) in MMMYY format separated by semicolon
  , post_iserver_secdef_searchResponseBody200SectionsMonths :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | secType: Asset Class
  , post_iserver_secdef_searchResponseBody200SectionsSecType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | symbol: Underlying symbol
  , post_iserver_secdef_searchResponseBody200SectionsSymbol :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_iserver_secdef_searchResponseBody200Sections
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exchange" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200SectionsExchange obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("legSecType" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200SectionsLegSecType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("months" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200SectionsMonths obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("secType" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200SectionsSecType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200SectionsSymbol obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exchange" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200SectionsExchange obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("legSecType" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200SectionsLegSecType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("months" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200SectionsMonths obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("secType" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200SectionsSecType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody200SectionsSymbol obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_iserver_secdef_searchResponseBody200Sections
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_iserver_secdef_searchResponseBody200Sections" (\obj -> ((((GHC.Base.pure Post_iserver_secdef_searchResponseBody200Sections GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exchange")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "legSecType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "months")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "secType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "symbol"))
-- | Create a new 'Post_iserver_secdef_searchResponseBody200Sections' with all required fields.
mkPost_iserver_secdef_searchResponseBody200Sections :: Post_iserver_secdef_searchResponseBody200Sections
mkPost_iserver_secdef_searchResponseBody200Sections = Post_iserver_secdef_searchResponseBody200Sections{post_iserver_secdef_searchResponseBody200SectionsExchange = GHC.Maybe.Nothing,
                                                                                                        post_iserver_secdef_searchResponseBody200SectionsLegSecType = GHC.Maybe.Nothing,
                                                                                                        post_iserver_secdef_searchResponseBody200SectionsMonths = GHC.Maybe.Nothing,
                                                                                                        post_iserver_secdef_searchResponseBody200SectionsSecType = GHC.Maybe.Nothing,
                                                                                                        post_iserver_secdef_searchResponseBody200SectionsSymbol = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/secdef\/search.POST.responses.500.content.application\/json.schema@ in the specification.
-- 
-- 
data Post_iserver_secdef_searchResponseBody500 = Post_iserver_secdef_searchResponseBody500 {
  -- | error
  post_iserver_secdef_searchResponseBody500Error :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_iserver_secdef_searchResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody500Error obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error" Data.Aeson.Types.ToJSON..=)) (post_iserver_secdef_searchResponseBody500Error obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_iserver_secdef_searchResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_iserver_secdef_searchResponseBody500" (\obj -> GHC.Base.pure Post_iserver_secdef_searchResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "error"))
-- | Create a new 'Post_iserver_secdef_searchResponseBody500' with all required fields.
mkPost_iserver_secdef_searchResponseBody500 :: Post_iserver_secdef_searchResponseBody500
mkPost_iserver_secdef_searchResponseBody500 = Post_iserver_secdef_searchResponseBody500{post_iserver_secdef_searchResponseBody500Error = GHC.Maybe.Nothing}
-- | > POST /iserver/secdef/search
-- 
-- The same as 'post_iserver_secdef_search' but accepts an explicit configuration.
post_iserver_secdef_searchWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Post_iserver_secdef_searchResponse) -- ^ Monadic computation which returns the result of the operation
post_iserver_secdef_searchWithConfiguration config = GHC.Base.fmap (\response_3 -> GHC.Base.fmap (Data.Either.either Post_iserver_secdef_searchResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_iserver_secdef_searchResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ([Post_iserver_secdef_searchResponseBody200]))
                                                                                                                                                                                                          | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Post_iserver_secdef_searchResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Post_iserver_secdef_searchResponseBody500)
                                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_3) response_3) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/iserver/secdef/search") GHC.Base.mempty)
-- | > POST /iserver/secdef/search
-- 
-- The same as 'post_iserver_secdef_search' but returns the raw 'Data.ByteString.Char8.ByteString'.
post_iserver_secdef_searchRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_iserver_secdef_searchRaw = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/iserver/secdef/search") GHC.Base.mempty)
-- | > POST /iserver/secdef/search
-- 
-- The same as 'post_iserver_secdef_search' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
post_iserver_secdef_searchWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_iserver_secdef_searchWithConfigurationRaw config = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/iserver/secdef/search") GHC.Base.mempty)
