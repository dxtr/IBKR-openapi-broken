-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_md_snapshot
module IBKR.Operations.Get_md_snapshot where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /md/snapshot
-- 
-- Get a snapshot of Market Data for the given conid(s).See response for a list of available fields that can be requested from the fields argument.
-- Must be connected to a brokerage session before can query snapshot data.
-- First \/snapshot endpoint call for given conid(s) will initiate the market data request, make an additional request to receive field values back.
-- To receive all available fields the \/snapshot endpoint will need to be called several times.
-- To receive streaming market data the endpoint \/ws can be used. Refer to [Streaming WebSocket Data](https:\/\/interactivebrokers.github.io\/cpwebapi\/RealtimeSubscription.html) for details.
get_md_snapshot :: forall m . IBKR.Common.MonadHTTP m => Get_md_snapshotParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_md_snapshotResponse) -- ^ Monadic computation which returns the result of the operation
get_md_snapshot parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_md_snapshotResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_md_snapshotResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      Market_data)
                                                                                                                                                                       | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_md_snapshotResponse401
                                                                                                                                                                       | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_md_snapshotResponse500
                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/md/snapshot") [IBKR.Common.QueryParameter (Data.Text.pack "conids") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_md_snapshotParametersQueryConids parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                       IBKR.Common.QueryParameter (Data.Text.pack "fields") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_md_snapshotParametersQueryFields parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/md\/snapshot.GET.parameters@ in the specification.
-- 
-- 
data Get_md_snapshotParameters = Get_md_snapshotParameters {
  -- | queryFields: Represents the parameter named \'fields\'
  -- 
  -- list of fields separated by comma
  get_md_snapshotParametersQueryFields :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_md_snapshotParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFields" Data.Aeson.Types.ToJSON..=)) (get_md_snapshotParametersQueryFields obj) : ["queryConids" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "conid@exchange:instrType"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFields" Data.Aeson.Types.ToJSON..=)) (get_md_snapshotParametersQueryFields obj) : ["queryConids" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "conid@exchange:instrType"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_md_snapshotParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_md_snapshotParameters" (\obj -> GHC.Base.pure Get_md_snapshotParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryFields"))
-- | Create a new 'Get_md_snapshotParameters' with all required fields.
mkGet_md_snapshotParameters :: Get_md_snapshotParameters
mkGet_md_snapshotParameters = Get_md_snapshotParameters{get_md_snapshotParametersQueryFields = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'get_md_snapshot'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_md_snapshotResponseError' is used.
data Get_md_snapshotResponse =
   Get_md_snapshotResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_md_snapshotResponse200 Market_data -- ^ An Object
  | Get_md_snapshotResponse401 -- ^ Authentication failed
  | Get_md_snapshotResponse500 -- ^ System failed
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > GET /md/snapshot
-- 
-- The same as 'get_md_snapshot' but accepts an explicit configuration.
get_md_snapshotWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_md_snapshotParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Get_md_snapshotResponse) -- ^ Monadic computation which returns the result of the operation
get_md_snapshotWithConfiguration config
                                 parameters = GHC.Base.fmap (\response_4 -> GHC.Base.fmap (Data.Either.either Get_md_snapshotResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_md_snapshotResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       Market_data)
                                                                                                                                                                                        | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_md_snapshotResponse401
                                                                                                                                                                                        | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_md_snapshotResponse500
                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_4) response_4) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/md/snapshot") [IBKR.Common.QueryParameter (Data.Text.pack "conids") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_md_snapshotParametersQueryConids parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                              IBKR.Common.QueryParameter (Data.Text.pack "fields") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_md_snapshotParametersQueryFields parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /md/snapshot
-- 
-- The same as 'get_md_snapshot' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_md_snapshotRaw :: forall m . IBKR.Common.MonadHTTP m => Get_md_snapshotParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_md_snapshotRaw parameters = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/md/snapshot") [IBKR.Common.QueryParameter (Data.Text.pack "conids") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_md_snapshotParametersQueryConids parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                          IBKR.Common.QueryParameter (Data.Text.pack "fields") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_md_snapshotParametersQueryFields parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /md/snapshot
-- 
-- The same as 'get_md_snapshot' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_md_snapshotWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_md_snapshotParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_md_snapshotWithConfigurationRaw config
                                    parameters = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/md/snapshot") [IBKR.Common.QueryParameter (Data.Text.pack "conids") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_md_snapshotParametersQueryConids parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                 IBKR.Common.QueryParameter (Data.Text.pack "fields") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_md_snapshotParametersQueryFields parameters) (Data.Text.pack "form") GHC.Types.False])
