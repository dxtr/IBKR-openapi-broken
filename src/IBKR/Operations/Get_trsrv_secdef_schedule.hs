-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_trsrv_secdef_schedule
module IBKR.Operations.Get_trsrv_secdef_schedule where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /trsrv/secdef/schedule
-- 
-- Returns the trading schedule up to a month for the requested contract
get_trsrv_secdef_schedule :: forall m . IBKR.Common.MonadHTTP m => Get_trsrv_secdef_scheduleParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_trsrv_secdef_scheduleResponse) -- ^ Monadic computation which returns the result of the operation
get_trsrv_secdef_schedule parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_trsrv_secdef_scheduleResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_trsrv_secdef_scheduleResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Get_trsrv_secdef_scheduleResponseBody200)
                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/trsrv/secdef/schedule") [IBKR.Common.QueryParameter (Data.Text.pack "assetClass") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_trsrv_secdef_scheduleParametersQueryAssetClass parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                     IBKR.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_trsrv_secdef_scheduleParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                     IBKR.Common.QueryParameter (Data.Text.pack "exchange") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_trsrv_secdef_scheduleParametersQueryExchange parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                     IBKR.Common.QueryParameter (Data.Text.pack "exchangeFilter") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_trsrv_secdef_scheduleParametersQueryExchangeFilter parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/trsrv\/secdef\/schedule.GET.parameters@ in the specification.
-- 
-- 
data Get_trsrv_secdef_scheduleParameters = Get_trsrv_secdef_scheduleParameters {
  -- | queryAssetClass: Represents the parameter named \'assetClass\'
  -- 
  -- specify the asset class of the contract.
  -- Available values-- Stock: STK, Option: OPT, Future: FUT, Contract For Difference: CFD, Warrant: WAR, Forex: SWP, Mutual Fund: FND, Bond: BND, Inter-Commodity Spreads: ICS
  get_trsrv_secdef_scheduleParametersQueryAssetClass :: Data.Text.Internal.Text
  -- | queryExchange: Represents the parameter named \'exchange\'
  -- 
  -- Native exchange for contract, for example \'NASDAQ\' for US Stock - Apple Inc.
  , get_trsrv_secdef_scheduleParametersQueryExchange :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryExchangeFilter: Represents the parameter named \'exchangeFilter\'
  -- 
  -- Response only returns trading schedule for specified exchange
  , get_trsrv_secdef_scheduleParametersQueryExchangeFilter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | querySymbol: Represents the parameter named \'symbol\'
  -- 
  -- Underlying Symbol for specified contract, for example \'AAPL\' for US Stock - Apple Inc.
  , get_trsrv_secdef_scheduleParametersQuerySymbol :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_trsrv_secdef_scheduleParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryAssetClass" Data.Aeson.Types.ToJSON..= get_trsrv_secdef_scheduleParametersQueryAssetClass obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExchange" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleParametersQueryExchange obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExchangeFilter" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleParametersQueryExchangeFilter obj) : ["querySymbol" Data.Aeson.Types.ToJSON..= get_trsrv_secdef_scheduleParametersQuerySymbol obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryAssetClass" Data.Aeson.Types.ToJSON..= get_trsrv_secdef_scheduleParametersQueryAssetClass obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExchange" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleParametersQueryExchange obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExchangeFilter" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleParametersQueryExchangeFilter obj) : ["querySymbol" Data.Aeson.Types.ToJSON..= get_trsrv_secdef_scheduleParametersQuerySymbol obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_trsrv_secdef_scheduleParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_trsrv_secdef_scheduleParameters" (\obj -> (((GHC.Base.pure Get_trsrv_secdef_scheduleParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryAssetClass")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExchange")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExchangeFilter")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySymbol"))
-- | Create a new 'Get_trsrv_secdef_scheduleParameters' with all required fields.
mkGet_trsrv_secdef_scheduleParameters :: Data.Text.Internal.Text -- ^ 'get_trsrv_secdef_scheduleParametersQueryAssetClass'
  -> Data.Text.Internal.Text -- ^ 'get_trsrv_secdef_scheduleParametersQuerySymbol'
  -> Get_trsrv_secdef_scheduleParameters
mkGet_trsrv_secdef_scheduleParameters get_trsrv_secdef_scheduleParametersQueryAssetClass get_trsrv_secdef_scheduleParametersQuerySymbol = Get_trsrv_secdef_scheduleParameters{get_trsrv_secdef_scheduleParametersQueryAssetClass = get_trsrv_secdef_scheduleParametersQueryAssetClass,
                                                                                                                                                                              get_trsrv_secdef_scheduleParametersQueryExchange = GHC.Maybe.Nothing,
                                                                                                                                                                              get_trsrv_secdef_scheduleParametersQueryExchangeFilter = GHC.Maybe.Nothing,
                                                                                                                                                                              get_trsrv_secdef_scheduleParametersQuerySymbol = get_trsrv_secdef_scheduleParametersQuerySymbol}
-- | Represents a response of the operation 'get_trsrv_secdef_schedule'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_trsrv_secdef_scheduleResponseError' is used.
data Get_trsrv_secdef_scheduleResponse =
   Get_trsrv_secdef_scheduleResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_trsrv_secdef_scheduleResponse200 Get_trsrv_secdef_scheduleResponseBody200 -- ^ Returns an object
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/trsrv\/secdef\/schedule.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Get_trsrv_secdef_scheduleResponseBody200 = Get_trsrv_secdef_scheduleResponseBody200 {
  -- | id: Exchange parameter id
  get_trsrv_secdef_scheduleResponseBody200Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | schedules: Always contains at least one \'tradingTime\'  and zero or more \'sessionTime\' tags
  , get_trsrv_secdef_scheduleResponseBody200Schedules :: (GHC.Maybe.Maybe ([Get_trsrv_secdef_scheduleResponseBody200Schedules]))
  -- | tradeVenueId: Reference on a trade venue of given exchange parameter
  , get_trsrv_secdef_scheduleResponseBody200TradeVenueId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_trsrv_secdef_scheduleResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("schedules" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200Schedules obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tradeVenueId" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200TradeVenueId obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("schedules" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200Schedules obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tradeVenueId" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200TradeVenueId obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_trsrv_secdef_scheduleResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_trsrv_secdef_scheduleResponseBody200" (\obj -> ((GHC.Base.pure Get_trsrv_secdef_scheduleResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "schedules")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tradeVenueId"))
-- | Create a new 'Get_trsrv_secdef_scheduleResponseBody200' with all required fields.
mkGet_trsrv_secdef_scheduleResponseBody200 :: Get_trsrv_secdef_scheduleResponseBody200
mkGet_trsrv_secdef_scheduleResponseBody200 = Get_trsrv_secdef_scheduleResponseBody200{get_trsrv_secdef_scheduleResponseBody200Id = GHC.Maybe.Nothing,
                                                                                      get_trsrv_secdef_scheduleResponseBody200Schedules = GHC.Maybe.Nothing,
                                                                                      get_trsrv_secdef_scheduleResponseBody200TradeVenueId = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/trsrv\/secdef\/schedule.GET.responses.200.content.application\/json.schema.properties.schedules.items@ in the specification.
-- 
-- 
data Get_trsrv_secdef_scheduleResponseBody200Schedules = Get_trsrv_secdef_scheduleResponseBody200Schedules {
  -- | clearingCycleEndTime
  get_trsrv_secdef_scheduleResponseBody200SchedulesClearingCycleEndTime :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | sessions: If the LIQUID hours differs from the total trading day then a separate \'session\' tag is returned.
  , get_trsrv_secdef_scheduleResponseBody200SchedulesSessions :: (GHC.Maybe.Maybe Get_trsrv_secdef_scheduleResponseBody200SchedulesSessions)
  -- | tradingScheduleDate: 20000101 stands for any Sat, 20000102 stands for any Sun, ... 20000107 stands for any Fri. Any other date stands for itself.
  , get_trsrv_secdef_scheduleResponseBody200SchedulesTradingScheduleDate :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | tradingTimes: Returns tradingTime in exchange time zone.
  , get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimes :: (GHC.Maybe.Maybe Get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimes)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_trsrv_secdef_scheduleResponseBody200Schedules
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("clearingCycleEndTime" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200SchedulesClearingCycleEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sessions" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200SchedulesSessions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tradingScheduleDate" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200SchedulesTradingScheduleDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tradingTimes" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimes obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("clearingCycleEndTime" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200SchedulesClearingCycleEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sessions" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200SchedulesSessions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tradingScheduleDate" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200SchedulesTradingScheduleDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tradingTimes" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimes obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_trsrv_secdef_scheduleResponseBody200Schedules
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_trsrv_secdef_scheduleResponseBody200Schedules" (\obj -> (((GHC.Base.pure Get_trsrv_secdef_scheduleResponseBody200Schedules GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "clearingCycleEndTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sessions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tradingScheduleDate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tradingTimes"))
-- | Create a new 'Get_trsrv_secdef_scheduleResponseBody200Schedules' with all required fields.
mkGet_trsrv_secdef_scheduleResponseBody200Schedules :: Get_trsrv_secdef_scheduleResponseBody200Schedules
mkGet_trsrv_secdef_scheduleResponseBody200Schedules = Get_trsrv_secdef_scheduleResponseBody200Schedules{get_trsrv_secdef_scheduleResponseBody200SchedulesClearingCycleEndTime = GHC.Maybe.Nothing,
                                                                                                        get_trsrv_secdef_scheduleResponseBody200SchedulesSessions = GHC.Maybe.Nothing,
                                                                                                        get_trsrv_secdef_scheduleResponseBody200SchedulesTradingScheduleDate = GHC.Maybe.Nothing,
                                                                                                        get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimes = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/trsrv\/secdef\/schedule.GET.responses.200.content.application\/json.schema.properties.schedules.items.properties.sessions@ in the specification.
-- 
-- If the LIQUID hours differs from the total trading day then a separate \'session\' tag is returned.
data Get_trsrv_secdef_scheduleResponseBody200SchedulesSessions = Get_trsrv_secdef_scheduleResponseBody200SchedulesSessions {
  -- | closingTime
  get_trsrv_secdef_scheduleResponseBody200SchedulesSessionsClosingTime :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | openingTime
  , get_trsrv_secdef_scheduleResponseBody200SchedulesSessionsOpeningTime :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | prop: If the whole trading day is considered LIQUID then the value \'LIQUID\' is returned.
  , get_trsrv_secdef_scheduleResponseBody200SchedulesSessionsProp :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_trsrv_secdef_scheduleResponseBody200SchedulesSessions
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("closingTime" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200SchedulesSessionsClosingTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("openingTime" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200SchedulesSessionsOpeningTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("prop" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200SchedulesSessionsProp obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("closingTime" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200SchedulesSessionsClosingTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("openingTime" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200SchedulesSessionsOpeningTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("prop" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200SchedulesSessionsProp obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_trsrv_secdef_scheduleResponseBody200SchedulesSessions
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_trsrv_secdef_scheduleResponseBody200SchedulesSessions" (\obj -> ((GHC.Base.pure Get_trsrv_secdef_scheduleResponseBody200SchedulesSessions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "closingTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "openingTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "prop"))
-- | Create a new 'Get_trsrv_secdef_scheduleResponseBody200SchedulesSessions' with all required fields.
mkGet_trsrv_secdef_scheduleResponseBody200SchedulesSessions :: Get_trsrv_secdef_scheduleResponseBody200SchedulesSessions
mkGet_trsrv_secdef_scheduleResponseBody200SchedulesSessions = Get_trsrv_secdef_scheduleResponseBody200SchedulesSessions{get_trsrv_secdef_scheduleResponseBody200SchedulesSessionsClosingTime = GHC.Maybe.Nothing,
                                                                                                                        get_trsrv_secdef_scheduleResponseBody200SchedulesSessionsOpeningTime = GHC.Maybe.Nothing,
                                                                                                                        get_trsrv_secdef_scheduleResponseBody200SchedulesSessionsProp = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/trsrv\/secdef\/schedule.GET.responses.200.content.application\/json.schema.properties.schedules.items.properties.tradingTimes@ in the specification.
-- 
-- Returns tradingTime in exchange time zone.
data Get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimes = Get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimes {
  -- | cancelDayOrders
  get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimesCancelDayOrders :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | closingTime
  , get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimesClosingTime :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | openingTime
  , get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimesOpeningTime :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimes
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cancelDayOrders" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimesCancelDayOrders obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("closingTime" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimesClosingTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("openingTime" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimesOpeningTime obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cancelDayOrders" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimesCancelDayOrders obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("closingTime" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimesClosingTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("openingTime" Data.Aeson.Types.ToJSON..=)) (get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimesOpeningTime obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimes" (\obj -> ((GHC.Base.pure Get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cancelDayOrders")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "closingTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "openingTime"))
-- | Create a new 'Get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimes' with all required fields.
mkGet_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimes :: Get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimes
mkGet_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimes = Get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimes{get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimesCancelDayOrders = GHC.Maybe.Nothing,
                                                                                                                                get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimesClosingTime = GHC.Maybe.Nothing,
                                                                                                                                get_trsrv_secdef_scheduleResponseBody200SchedulesTradingTimesOpeningTime = GHC.Maybe.Nothing}
-- | > GET /trsrv/secdef/schedule
-- 
-- The same as 'get_trsrv_secdef_schedule' but accepts an explicit configuration.
get_trsrv_secdef_scheduleWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_trsrv_secdef_scheduleParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Get_trsrv_secdef_scheduleResponse) -- ^ Monadic computation which returns the result of the operation
get_trsrv_secdef_scheduleWithConfiguration config
                                           parameters = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Get_trsrv_secdef_scheduleResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_trsrv_secdef_scheduleResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Get_trsrv_secdef_scheduleResponseBody200)
                                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/trsrv/secdef/schedule") [IBKR.Common.QueryParameter (Data.Text.pack "assetClass") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_trsrv_secdef_scheduleParametersQueryAssetClass parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                            IBKR.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_trsrv_secdef_scheduleParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                            IBKR.Common.QueryParameter (Data.Text.pack "exchange") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_trsrv_secdef_scheduleParametersQueryExchange parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                            IBKR.Common.QueryParameter (Data.Text.pack "exchangeFilter") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_trsrv_secdef_scheduleParametersQueryExchangeFilter parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /trsrv/secdef/schedule
-- 
-- The same as 'get_trsrv_secdef_schedule' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_trsrv_secdef_scheduleRaw :: forall m . IBKR.Common.MonadHTTP m => Get_trsrv_secdef_scheduleParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_trsrv_secdef_scheduleRaw parameters = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/trsrv/secdef/schedule") [IBKR.Common.QueryParameter (Data.Text.pack "assetClass") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_trsrv_secdef_scheduleParametersQueryAssetClass parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                              IBKR.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_trsrv_secdef_scheduleParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                              IBKR.Common.QueryParameter (Data.Text.pack "exchange") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_trsrv_secdef_scheduleParametersQueryExchange parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                              IBKR.Common.QueryParameter (Data.Text.pack "exchangeFilter") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_trsrv_secdef_scheduleParametersQueryExchangeFilter parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /trsrv/secdef/schedule
-- 
-- The same as 'get_trsrv_secdef_schedule' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_trsrv_secdef_scheduleWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_trsrv_secdef_scheduleParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_trsrv_secdef_scheduleWithConfigurationRaw config
                                              parameters = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/trsrv/secdef/schedule") [IBKR.Common.QueryParameter (Data.Text.pack "assetClass") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_trsrv_secdef_scheduleParametersQueryAssetClass parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                     IBKR.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_trsrv_secdef_scheduleParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                     IBKR.Common.QueryParameter (Data.Text.pack "exchange") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_trsrv_secdef_scheduleParametersQueryExchange parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                     IBKR.Common.QueryParameter (Data.Text.pack "exchangeFilter") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_trsrv_secdef_scheduleParametersQueryExchangeFilter parameters) (Data.Text.pack "form") GHC.Types.False])
