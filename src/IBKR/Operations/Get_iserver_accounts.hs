-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_iserver_accounts
module IBKR.Operations.Get_iserver_accounts where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /iserver/accounts
-- 
-- Returns a list of accounts the user has trading access to, their respective aliases and the currently selected account. Note this endpoint must be called before modifying an order or querying open orders.
get_iserver_accounts :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_iserver_accountsResponse) -- ^ Monadic computation which returns the result of the operation
get_iserver_accounts = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_iserver_accountsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_iserver_accountsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                          Get_iserver_accountsResponseBody200)
                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/iserver/accounts") GHC.Base.mempty)
-- | Represents a response of the operation 'get_iserver_accounts'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_iserver_accountsResponseError' is used.
data Get_iserver_accountsResponse =
   Get_iserver_accountsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_iserver_accountsResponse200 Get_iserver_accountsResponseBody200 -- ^ An array of accounts
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/iserver\/accounts.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Get_iserver_accountsResponseBody200 = Get_iserver_accountsResponseBody200 {
  -- | accounts: Unique account id
  get_iserver_accountsResponseBody200Accounts :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | aliases: Account Id and its alias
  , get_iserver_accountsResponseBody200Aliases :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  -- | selectedAccount
  , get_iserver_accountsResponseBody200SelectedAccount :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_accountsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("accounts" Data.Aeson.Types.ToJSON..=)) (get_iserver_accountsResponseBody200Accounts obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("aliases" Data.Aeson.Types.ToJSON..=)) (get_iserver_accountsResponseBody200Aliases obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("selectedAccount" Data.Aeson.Types.ToJSON..=)) (get_iserver_accountsResponseBody200SelectedAccount obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("accounts" Data.Aeson.Types.ToJSON..=)) (get_iserver_accountsResponseBody200Accounts obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("aliases" Data.Aeson.Types.ToJSON..=)) (get_iserver_accountsResponseBody200Aliases obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("selectedAccount" Data.Aeson.Types.ToJSON..=)) (get_iserver_accountsResponseBody200SelectedAccount obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_accountsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_accountsResponseBody200" (\obj -> ((GHC.Base.pure Get_iserver_accountsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "accounts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "aliases")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "selectedAccount"))
-- | Create a new 'Get_iserver_accountsResponseBody200' with all required fields.
mkGet_iserver_accountsResponseBody200 :: Get_iserver_accountsResponseBody200
mkGet_iserver_accountsResponseBody200 = Get_iserver_accountsResponseBody200{get_iserver_accountsResponseBody200Accounts = GHC.Maybe.Nothing,
                                                                            get_iserver_accountsResponseBody200Aliases = GHC.Maybe.Nothing,
                                                                            get_iserver_accountsResponseBody200SelectedAccount = GHC.Maybe.Nothing}
-- | > GET /iserver/accounts
-- 
-- The same as 'get_iserver_accounts' but accepts an explicit configuration.
get_iserver_accountsWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Get_iserver_accountsResponse) -- ^ Monadic computation which returns the result of the operation
get_iserver_accountsWithConfiguration config = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Get_iserver_accountsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_iserver_accountsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  Get_iserver_accountsResponseBody200)
                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/iserver/accounts") GHC.Base.mempty)
-- | > GET /iserver/accounts
-- 
-- The same as 'get_iserver_accounts' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_iserver_accountsRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_iserver_accountsRaw = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/iserver/accounts") GHC.Base.mempty)
-- | > GET /iserver/accounts
-- 
-- The same as 'get_iserver_accounts' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_iserver_accountsWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_iserver_accountsWithConfigurationRaw config = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/iserver/accounts") GHC.Base.mempty)
