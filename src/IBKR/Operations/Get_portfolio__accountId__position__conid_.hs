-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_portfolio__accountId__position__conid_
module IBKR.Operations.Get_portfolio__accountId__position__conid_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /portfolio/{accountId}/position/{conid}
-- 
-- Returns a list of all positions matching the conid. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to.  \/portfolio\/accounts or \/portfolio\/subaccounts must be called prior to this endpoint.
get_portfolio__accountId__position__conid_ :: forall m . IBKR.Common.MonadHTTP m => Get_portfolio__accountId__position__conid_Parameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_portfolio__accountId__position__conid_Response) -- ^ Monadic computation which returns the result of the operation
get_portfolio__accountId__position__conid_ parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_portfolio__accountId__position__conid_ResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_portfolio__accountId__position__conid_Response200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Position)
                                                                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/portfolio/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (get_portfolio__accountId__position__conid_ParametersPathAccountId parameters))) GHC.Base.++ ("/position/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (get_portfolio__accountId__position__conid_ParametersPathConid parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/portfolio\/{accountId}\/position\/{conid}.GET.parameters@ in the specification.
-- 
-- 
data Get_portfolio__accountId__position__conid_Parameters = Get_portfolio__accountId__position__conid_Parameters {
  -- | pathAccountId: Represents the parameter named \'accountId\'
  -- 
  -- account id
  get_portfolio__accountId__position__conid_ParametersPathAccountId :: Data.Text.Internal.Text
  -- | pathConid: Represents the parameter named \'conid\'
  -- 
  -- contract id
  , get_portfolio__accountId__position__conid_ParametersPathConid :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_portfolio__accountId__position__conid_Parameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathAccountId" Data.Aeson.Types.ToJSON..= get_portfolio__accountId__position__conid_ParametersPathAccountId obj] : ["pathConid" Data.Aeson.Types.ToJSON..= get_portfolio__accountId__position__conid_ParametersPathConid obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathAccountId" Data.Aeson.Types.ToJSON..= get_portfolio__accountId__position__conid_ParametersPathAccountId obj] : ["pathConid" Data.Aeson.Types.ToJSON..= get_portfolio__accountId__position__conid_ParametersPathConid obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_portfolio__accountId__position__conid_Parameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_portfolio__accountId__position__conid_Parameters" (\obj -> (GHC.Base.pure Get_portfolio__accountId__position__conid_Parameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathAccountId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathConid"))
-- | Create a new 'Get_portfolio__accountId__position__conid_Parameters' with all required fields.
mkGet_portfolio__accountId__position__conid_Parameters :: Data.Text.Internal.Text -- ^ 'get_portfolio__accountId__position__conid_ParametersPathAccountId'
  -> GHC.Types.Int -- ^ 'get_portfolio__accountId__position__conid_ParametersPathConid'
  -> Get_portfolio__accountId__position__conid_Parameters
mkGet_portfolio__accountId__position__conid_Parameters get_portfolio__accountId__position__conid_ParametersPathAccountId get_portfolio__accountId__position__conid_ParametersPathConid = Get_portfolio__accountId__position__conid_Parameters{get_portfolio__accountId__position__conid_ParametersPathAccountId = get_portfolio__accountId__position__conid_ParametersPathAccountId,
                                                                                                                                                                                                                                              get_portfolio__accountId__position__conid_ParametersPathConid = get_portfolio__accountId__position__conid_ParametersPathConid}
-- | Represents a response of the operation 'get_portfolio__accountId__position__conid_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_portfolio__accountId__position__conid_ResponseError' is used.
data Get_portfolio__accountId__position__conid_Response =
   Get_portfolio__accountId__position__conid_ResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_portfolio__accountId__position__conid_Response200 Position -- ^ returns a list containing only one position for the conid
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > GET /portfolio/{accountId}/position/{conid}
-- 
-- The same as 'get_portfolio__accountId__position__conid_' but accepts an explicit configuration.
get_portfolio__accountId__position__conid_WithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_portfolio__accountId__position__conid_Parameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Get_portfolio__accountId__position__conid_Response) -- ^ Monadic computation which returns the result of the operation
get_portfolio__accountId__position__conid_WithConfiguration config
                                                            parameters = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Get_portfolio__accountId__position__conid_ResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_portfolio__accountId__position__conid_Response200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
osition)
                                                                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/portfolio/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (get_portfolio__accountId__position__conid_ParametersPathAccountId parameters))) GHC.Base.++ ("/position/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (get_portfolio__accountId__position__conid_ParametersPathConid parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
-- | > GET /portfolio/{accountId}/position/{conid}
-- 
-- The same as 'get_portfolio__accountId__position__conid_' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_portfolio__accountId__position__conid_Raw :: forall m . IBKR.Common.MonadHTTP m => Get_portfolio__accountId__position__conid_Parameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_portfolio__accountId__position__conid_Raw parameters = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/portfolio/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (get_portfolio__accountId__position__conid_ParametersPathAccountId parameters))) GHC.Base.++ ("/position/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (get_portfolio__accountId__position__conid_ParametersPathConid parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
-- | > GET /portfolio/{accountId}/position/{conid}
-- 
-- The same as 'get_portfolio__accountId__position__conid_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_portfolio__accountId__position__conid_WithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_portfolio__accountId__position__conid_Parameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_portfolio__accountId__position__conid_WithConfigurationRaw config
                                                               parameters = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/portfolio/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (get_portfolio__accountId__position__conid_ParametersPathAccountId parameters))) GHC.Base.++ ("/position/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel (get_portfolio__accountId__position__conid_ParametersPathConid parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
