-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_ccp_trades
module IBKR.Operations.Get_ccp_trades where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /ccp/trades
-- 
-- Get a list of Trades, by default, the list is from today midnight to Date.now().
get_ccp_trades :: forall m . IBKR.Common.MonadHTTP m => Get_ccp_tradesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_ccp_tradesResponse) -- ^ Monadic computation which returns the result of the operation
get_ccp_trades parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_ccp_tradesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_ccp_tradesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   Get_ccp_tradesResponseBody200)
                                                                                                                                                                     | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_ccp_tradesResponse400
                                                                                                                                                                     | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_ccp_tradesResponse401
                                                                                                                                                                     | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_ccp_tradesResponse500
                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/ccp/trades") [IBKR.Common.QueryParameter (Data.Text.pack "from") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_ccp_tradesParametersQueryFrom parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                    IBKR.Common.QueryParameter (Data.Text.pack "to") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_ccp_tradesParametersQueryTo parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/ccp\/trades.GET.parameters@ in the specification.
-- 
-- 
data Get_ccp_tradesParameters = Get_ccp_tradesParameters {
  -- | queryFrom: Represents the parameter named \'from\'
  -- 
  -- From Date (YYYYMMDD-HH:mm:ss) or offset (-1,-2,-3..)
  get_ccp_tradesParametersQueryFrom :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryTo: Represents the parameter named \'to\'
  -- 
  -- To Date (YYYYMMDD-HH:mm:ss) or offset (-1,-2,-3..). To value should be bigger than from value.
  , get_ccp_tradesParametersQueryTo :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_ccp_tradesParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFrom" Data.Aeson.Types.ToJSON..=)) (get_ccp_tradesParametersQueryFrom obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTo" Data.Aeson.Types.ToJSON..=)) (get_ccp_tradesParametersQueryTo obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFrom" Data.Aeson.Types.ToJSON..=)) (get_ccp_tradesParametersQueryFrom obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTo" Data.Aeson.Types.ToJSON..=)) (get_ccp_tradesParametersQueryTo obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_ccp_tradesParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_ccp_tradesParameters" (\obj -> (GHC.Base.pure Get_ccp_tradesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryFrom")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryTo"))
-- | Create a new 'Get_ccp_tradesParameters' with all required fields.
mkGet_ccp_tradesParameters :: Get_ccp_tradesParameters
mkGet_ccp_tradesParameters = Get_ccp_tradesParameters{get_ccp_tradesParametersQueryFrom = GHC.Maybe.Nothing,
                                                      get_ccp_tradesParametersQueryTo = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'get_ccp_trades'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_ccp_tradesResponseError' is used.
data Get_ccp_tradesResponse =
   Get_ccp_tradesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_ccp_tradesResponse200 Get_ccp_tradesResponseBody200 -- ^ An Object
  | Get_ccp_tradesResponse400 -- ^ Bad request
  | Get_ccp_tradesResponse401 -- ^ Access denied
  | Get_ccp_tradesResponse500 -- ^ System error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/ccp\/trades.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Get_ccp_tradesResponseBody200 = Get_ccp_tradesResponseBody200 {
  -- | orders
  get_ccp_tradesResponseBody200Orders :: (GHC.Maybe.Maybe ([Order_data]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_ccp_tradesResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orders" Data.Aeson.Types.ToJSON..=)) (get_ccp_tradesResponseBody200Orders obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orders" Data.Aeson.Types.ToJSON..=)) (get_ccp_tradesResponseBody200Orders obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_ccp_tradesResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_ccp_tradesResponseBody200" (\obj -> GHC.Base.pure Get_ccp_tradesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "orders"))
-- | Create a new 'Get_ccp_tradesResponseBody200' with all required fields.
mkGet_ccp_tradesResponseBody200 :: Get_ccp_tradesResponseBody200
mkGet_ccp_tradesResponseBody200 = Get_ccp_tradesResponseBody200{get_ccp_tradesResponseBody200Orders = GHC.Maybe.Nothing}
-- | > GET /ccp/trades
-- 
-- The same as 'get_ccp_trades' but accepts an explicit configuration.
get_ccp_tradesWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_ccp_tradesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Get_ccp_tradesResponse) -- ^ Monadic computation which returns the result of the operation
get_ccp_tradesWithConfiguration config
                                parameters = GHC.Base.fmap (\response_5 -> GHC.Base.fmap (Data.Either.either Get_ccp_tradesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_ccp_tradesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    Get_ccp_tradesResponseBody200)
                                                                                                                                                                                      | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_ccp_tradesResponse400
                                                                                                                                                                                      | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_ccp_tradesResponse401
                                                                                                                                                                                      | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_ccp_tradesResponse500
                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_5) response_5) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/ccp/trades") [IBKR.Common.QueryParameter (Data.Text.pack "from") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_ccp_tradesParametersQueryFrom parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                           IBKR.Common.QueryParameter (Data.Text.pack "to") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_ccp_tradesParametersQueryTo parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /ccp/trades
-- 
-- The same as 'get_ccp_trades' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_ccp_tradesRaw :: forall m . IBKR.Common.MonadHTTP m => Get_ccp_tradesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_ccp_tradesRaw parameters = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/ccp/trades") [IBKR.Common.QueryParameter (Data.Text.pack "from") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_ccp_tradesParametersQueryFrom parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                        IBKR.Common.QueryParameter (Data.Text.pack "to") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_ccp_tradesParametersQueryTo parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /ccp/trades
-- 
-- The same as 'get_ccp_trades' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_ccp_tradesWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_ccp_tradesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_ccp_tradesWithConfigurationRaw config
                                   parameters = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/ccp/trades") [IBKR.Common.QueryParameter (Data.Text.pack "from") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_ccp_tradesParametersQueryFrom parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                               IBKR.Common.QueryParameter (Data.Text.pack "to") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_ccp_tradesParametersQueryTo parameters) (Data.Text.pack "form") GHC.Types.False])
