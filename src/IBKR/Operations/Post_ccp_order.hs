-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation post_ccp_order
module IBKR.Operations.Post_ccp_order where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > POST /ccp/order
-- 
-- Submits an Order.
post_ccp_order :: forall m . IBKR.Common.MonadHTTP m => Post_ccp_orderParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Post_ccp_orderResponse) -- ^ Monadic computation which returns the result of the operation
post_ccp_order parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Post_ccp_orderResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_ccp_orderResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   Order_data)
                                                                                                                                                                     | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Post_ccp_orderResponse400
                                                                                                                                                                     | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Post_ccp_orderResponse401
                                                                                                                                                                     | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Post_ccp_orderResponse500
                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/ccp/order") [IBKR.Common.QueryParameter (Data.Text.pack "acct") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_ccp_orderParametersQueryAcct parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                    IBKR.Common.QueryParameter (Data.Text.pack "conid") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_ccp_orderParametersQueryConid parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                    IBKR.Common.QueryParameter (Data.Text.pack "ccy") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_ccp_orderParametersQueryCcy parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                    IBKR.Common.QueryParameter (Data.Text.pack "exchange") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_ccp_orderParametersQueryExchange parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                    IBKR.Common.QueryParameter (Data.Text.pack "qty") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_ccp_orderParametersQueryQty parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                    IBKR.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_ccp_orderParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                    IBKR.Common.QueryParameter (Data.Text.pack "side") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_ccp_orderParametersQuerySide parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                    IBKR.Common.QueryParameter (Data.Text.pack "price") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_ccp_orderParametersQueryPrice parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                    IBKR.Common.QueryParameter (Data.Text.pack "tif") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_ccp_orderParametersQueryTif parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/ccp\/order.POST.parameters@ in the specification.
-- 
-- 
data Post_ccp_orderParameters = Post_ccp_orderParameters {
  -- | queryAcct: Represents the parameter named \'acct\'
  -- 
  -- User Account
  post_ccp_orderParametersQueryAcct :: Data.Text.Internal.Text
  -- | queryCcy: Represents the parameter named \'ccy\'
  -- 
  -- Contract Currency
  , post_ccp_orderParametersQueryCcy :: Post_ccp_orderParametersQueryCcy
  -- | queryConid: Represents the parameter named \'conid\'
  -- 
  -- Contract identifier from IBKR\'s database.
  , post_ccp_orderParametersQueryConid :: GHC.Types.Double
  -- | queryExchange: Represents the parameter named \'exchange\'
  -- 
  -- Exchange
  , post_ccp_orderParametersQueryExchange :: Post_ccp_orderParametersQueryExchange
  -- | queryPrice: Represents the parameter named \'price\'
  -- 
  -- Order Price; required if order type is limit
  , post_ccp_orderParametersQueryPrice :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | queryQty: Represents the parameter named \'qty\'
  -- 
  -- Order Quantity
  , post_ccp_orderParametersQueryQty :: GHC.Types.Double
  -- | querySide: Represents the parameter named \'side\'
  -- 
  -- Side
  , post_ccp_orderParametersQuerySide :: (GHC.Maybe.Maybe Post_ccp_orderParametersQuerySide)
  -- | queryTif: Represents the parameter named \'tif\'
  -- 
  -- Time in Force
  , post_ccp_orderParametersQueryTif :: (GHC.Maybe.Maybe Post_ccp_orderParametersQueryTif)
  -- | queryType: Represents the parameter named \'type\'
  -- 
  -- Order Price; required if order type is limit
  , post_ccp_orderParametersQueryType :: (GHC.Maybe.Maybe Post_ccp_orderParametersQueryType)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_ccp_orderParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryAcct" Data.Aeson.Types.ToJSON..= post_ccp_orderParametersQueryAcct obj] : ["queryCcy" Data.Aeson.Types.ToJSON..= post_ccp_orderParametersQueryCcy obj] : ["queryConid" Data.Aeson.Types.ToJSON..= post_ccp_orderParametersQueryConid obj] : ["queryExchange" Data.Aeson.Types.ToJSON..= post_ccp_orderParametersQueryExchange obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPrice" Data.Aeson.Types.ToJSON..=)) (post_ccp_orderParametersQueryPrice obj) : ["queryQty" Data.Aeson.Types.ToJSON..= post_ccp_orderParametersQueryQty obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySide" Data.Aeson.Types.ToJSON..=)) (post_ccp_orderParametersQuerySide obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTif" Data.Aeson.Types.ToJSON..=)) (post_ccp_orderParametersQueryTif obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryType" Data.Aeson.Types.ToJSON..=)) (post_ccp_orderParametersQueryType obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryAcct" Data.Aeson.Types.ToJSON..= post_ccp_orderParametersQueryAcct obj] : ["queryCcy" Data.Aeson.Types.ToJSON..= post_ccp_orderParametersQueryCcy obj] : ["queryConid" Data.Aeson.Types.ToJSON..= post_ccp_orderParametersQueryConid obj] : ["queryExchange" Data.Aeson.Types.ToJSON..= post_ccp_orderParametersQueryExchange obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPrice" Data.Aeson.Types.ToJSON..=)) (post_ccp_orderParametersQueryPrice obj) : ["queryQty" Data.Aeson.Types.ToJSON..= post_ccp_orderParametersQueryQty obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySide" Data.Aeson.Types.ToJSON..=)) (post_ccp_orderParametersQuerySide obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTif" Data.Aeson.Types.ToJSON..=)) (post_ccp_orderParametersQueryTif obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryType" Data.Aeson.Types.ToJSON..=)) (post_ccp_orderParametersQueryType obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_ccp_orderParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_ccp_orderParameters" (\obj -> ((((((((GHC.Base.pure Post_ccp_orderParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryAcct")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryCcy")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryConid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryExchange")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySide")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryTif")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryType"))
-- | Create a new 'Post_ccp_orderParameters' with all required fields.
mkPost_ccp_orderParameters :: Data.Text.Internal.Text -- ^ 'post_ccp_orderParametersQueryAcct'
  -> Post_ccp_orderParametersQueryCcy -- ^ 'post_ccp_orderParametersQueryCcy'
  -> GHC.Types.Double -- ^ 'post_ccp_orderParametersQueryConid'
  -> Post_ccp_orderParametersQueryExchange -- ^ 'post_ccp_orderParametersQueryExchange'
  -> GHC.Types.Double -- ^ 'post_ccp_orderParametersQueryQty'
  -> Post_ccp_orderParameters
mkPost_ccp_orderParameters post_ccp_orderParametersQueryAcct post_ccp_orderParametersQueryCcy post_ccp_orderParametersQueryConid post_ccp_orderParametersQueryExchange post_ccp_orderParametersQueryQty = Post_ccp_orderParameters{post_ccp_orderParametersQueryAcct = post_ccp_orderParametersQueryAcct,
                                                                                                                                                                                                                                   post_ccp_orderParametersQueryCcy = post_ccp_orderParametersQueryCcy,
                                                                                                                                                                                                                                   post_ccp_orderParametersQueryConid = post_ccp_orderParametersQueryConid,
                                                                                                                                                                                                                                   post_ccp_orderParametersQueryExchange = post_ccp_orderParametersQueryExchange,
                                                                                                                                                                                                                                   post_ccp_orderParametersQueryPrice = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                   post_ccp_orderParametersQueryQty = post_ccp_orderParametersQueryQty,
                                                                                                                                                                                                                                   post_ccp_orderParametersQuerySide = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                   post_ccp_orderParametersQueryTif = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                   post_ccp_orderParametersQueryType = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/ccp\/order.POST.parameters.properties.queryCcy@ in the specification.
-- 
-- Represents the parameter named \'ccy\'
-- 
-- Contract Currency
data Post_ccp_orderParametersQueryCcy =
   Post_ccp_orderParametersQueryCcyOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Post_ccp_orderParametersQueryCcyTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Post_ccp_orderParametersQueryCcyEnumUSD -- ^ Represents the JSON value @"USD"@
  | Post_ccp_orderParametersQueryCcyEnumGBP -- ^ Represents the JSON value @"GBP"@
  | Post_ccp_orderParametersQueryCcyEnumEUR -- ^ Represents the JSON value @"EUR"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_ccp_orderParametersQueryCcy
    where toJSON (Post_ccp_orderParametersQueryCcyOther val) = val
          toJSON (Post_ccp_orderParametersQueryCcyTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (Post_ccp_orderParametersQueryCcyEnumUSD) = "USD"
          toJSON (Post_ccp_orderParametersQueryCcyEnumGBP) = "GBP"
          toJSON (Post_ccp_orderParametersQueryCcyEnumEUR) = "EUR"
instance Data.Aeson.Types.FromJSON.FromJSON Post_ccp_orderParametersQueryCcy
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "USD" -> Post_ccp_orderParametersQueryCcyEnumUSD
                                            | val GHC.Classes.== "GBP" -> Post_ccp_orderParametersQueryCcyEnumGBP
                                            | val GHC.Classes.== "EUR" -> Post_ccp_orderParametersQueryCcyEnumEUR
                                            | GHC.Base.otherwise -> Post_ccp_orderParametersQueryCcyOther val)
-- | Defines the enum schema located at @paths.\/ccp\/order.POST.parameters.properties.queryExchange@ in the specification.
-- 
-- Represents the parameter named \'exchange\'
-- 
-- Exchange
data Post_ccp_orderParametersQueryExchange =
   Post_ccp_orderParametersQueryExchangeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Post_ccp_orderParametersQueryExchangeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Post_ccp_orderParametersQueryExchangeEnumNYSE -- ^ Represents the JSON value @"NYSE"@
  | Post_ccp_orderParametersQueryExchangeEnumCBOE -- ^ Represents the JSON value @"CBOE"@
  | Post_ccp_orderParametersQueryExchangeEnumNYMEX -- ^ Represents the JSON value @"NYMEX"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_ccp_orderParametersQueryExchange
    where toJSON (Post_ccp_orderParametersQueryExchangeOther val) = val
          toJSON (Post_ccp_orderParametersQueryExchangeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (Post_ccp_orderParametersQueryExchangeEnumNYSE) = "NYSE"
          toJSON (Post_ccp_orderParametersQueryExchangeEnumCBOE) = "CBOE"
          toJSON (Post_ccp_orderParametersQueryExchangeEnumNYMEX) = "NYMEX"
instance Data.Aeson.Types.FromJSON.FromJSON Post_ccp_orderParametersQueryExchange
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "NYSE" -> Post_ccp_orderParametersQueryExchangeEnumNYSE
                                            | val GHC.Classes.== "CBOE" -> Post_ccp_orderParametersQueryExchangeEnumCBOE
                                            | val GHC.Classes.== "NYMEX" -> Post_ccp_orderParametersQueryExchangeEnumNYMEX
                                            | GHC.Base.otherwise -> Post_ccp_orderParametersQueryExchangeOther val)
-- | Defines the enum schema located at @paths.\/ccp\/order.POST.parameters.properties.querySide@ in the specification.
-- 
-- Represents the parameter named \'side\'
-- 
-- Side
data Post_ccp_orderParametersQuerySide =
   Post_ccp_orderParametersQuerySideOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Post_ccp_orderParametersQuerySideTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Post_ccp_orderParametersQuerySideEnumSell -- ^ Represents the JSON value @"sell"@
  | Post_ccp_orderParametersQuerySideEnumBuy -- ^ Represents the JSON value @"buy"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_ccp_orderParametersQuerySide
    where toJSON (Post_ccp_orderParametersQuerySideOther val) = val
          toJSON (Post_ccp_orderParametersQuerySideTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (Post_ccp_orderParametersQuerySideEnumSell) = "sell"
          toJSON (Post_ccp_orderParametersQuerySideEnumBuy) = "buy"
instance Data.Aeson.Types.FromJSON.FromJSON Post_ccp_orderParametersQuerySide
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "sell" -> Post_ccp_orderParametersQuerySideEnumSell
                                            | val GHC.Classes.== "buy" -> Post_ccp_orderParametersQuerySideEnumBuy
                                            | GHC.Base.otherwise -> Post_ccp_orderParametersQuerySideOther val)
-- | Defines the enum schema located at @paths.\/ccp\/order.POST.parameters.properties.queryTif@ in the specification.
-- 
-- Represents the parameter named \'tif\'
-- 
-- Time in Force
data Post_ccp_orderParametersQueryTif =
   Post_ccp_orderParametersQueryTifOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Post_ccp_orderParametersQueryTifTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Post_ccp_orderParametersQueryTifEnumIOC -- ^ Represents the JSON value @"IOC"@
  | Post_ccp_orderParametersQueryTifEnumGTC -- ^ Represents the JSON value @"GTC"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_ccp_orderParametersQueryTif
    where toJSON (Post_ccp_orderParametersQueryTifOther val) = val
          toJSON (Post_ccp_orderParametersQueryTifTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (Post_ccp_orderParametersQueryTifEnumIOC) = "IOC"
          toJSON (Post_ccp_orderParametersQueryTifEnumGTC) = "GTC"
instance Data.Aeson.Types.FromJSON.FromJSON Post_ccp_orderParametersQueryTif
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "IOC" -> Post_ccp_orderParametersQueryTifEnumIOC
                                            | val GHC.Classes.== "GTC" -> Post_ccp_orderParametersQueryTifEnumGTC
                                            | GHC.Base.otherwise -> Post_ccp_orderParametersQueryTifOther val)
-- | Defines the enum schema located at @paths.\/ccp\/order.POST.parameters.properties.queryType@ in the specification.
-- 
-- Represents the parameter named \'type\'
-- 
-- Order Price; required if order type is limit
data Post_ccp_orderParametersQueryType =
   Post_ccp_orderParametersQueryTypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Post_ccp_orderParametersQueryTypeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Post_ccp_orderParametersQueryTypeEnumLimit -- ^ Represents the JSON value @"limit"@
  | Post_ccp_orderParametersQueryTypeEnumMarket -- ^ Represents the JSON value @"market"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_ccp_orderParametersQueryType
    where toJSON (Post_ccp_orderParametersQueryTypeOther val) = val
          toJSON (Post_ccp_orderParametersQueryTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (Post_ccp_orderParametersQueryTypeEnumLimit) = "limit"
          toJSON (Post_ccp_orderParametersQueryTypeEnumMarket) = "market"
instance Data.Aeson.Types.FromJSON.FromJSON Post_ccp_orderParametersQueryType
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "limit" -> Post_ccp_orderParametersQueryTypeEnumLimit
                                            | val GHC.Classes.== "market" -> Post_ccp_orderParametersQueryTypeEnumMarket
                                            | GHC.Base.otherwise -> Post_ccp_orderParametersQueryTypeOther val)
-- | Represents a response of the operation 'post_ccp_order'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Post_ccp_orderResponseError' is used.
data Post_ccp_orderResponse =
   Post_ccp_orderResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Post_ccp_orderResponse200 Order_data -- ^ An Object
  | Post_ccp_orderResponse400 -- ^ Bad Request
  | Post_ccp_orderResponse401 -- ^ Access denied
  | Post_ccp_orderResponse500 -- ^ System error, for example when connection to CCP failed
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > POST /ccp/order
-- 
-- The same as 'post_ccp_order' but accepts an explicit configuration.
post_ccp_orderWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Post_ccp_orderParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Post_ccp_orderResponse) -- ^ Monadic computation which returns the result of the operation
post_ccp_orderWithConfiguration config
                                parameters = GHC.Base.fmap (\response_5 -> GHC.Base.fmap (Data.Either.either Post_ccp_orderResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_ccp_orderResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    Order_data)
                                                                                                                                                                                      | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Post_ccp_orderResponse400
                                                                                                                                                                                      | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Post_ccp_orderResponse401
                                                                                                                                                                                      | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Post_ccp_orderResponse500
                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_5) response_5) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/ccp/order") [IBKR.Common.QueryParameter (Data.Text.pack "acct") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_ccp_orderParametersQueryAcct parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                           IBKR.Common.QueryParameter (Data.Text.pack "conid") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_ccp_orderParametersQueryConid parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                           IBKR.Common.QueryParameter (Data.Text.pack "ccy") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_ccp_orderParametersQueryCcy parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                           IBKR.Common.QueryParameter (Data.Text.pack "exchange") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_ccp_orderParametersQueryExchange parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                           IBKR.Common.QueryParameter (Data.Text.pack "qty") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_ccp_orderParametersQueryQty parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                           IBKR.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_ccp_orderParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                           IBKR.Common.QueryParameter (Data.Text.pack "side") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_ccp_orderParametersQuerySide parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                           IBKR.Common.QueryParameter (Data.Text.pack "price") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_ccp_orderParametersQueryPrice parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                           IBKR.Common.QueryParameter (Data.Text.pack "tif") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_ccp_orderParametersQueryTif parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > POST /ccp/order
-- 
-- The same as 'post_ccp_order' but returns the raw 'Data.ByteString.Char8.ByteString'.
post_ccp_orderRaw :: forall m . IBKR.Common.MonadHTTP m => Post_ccp_orderParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_ccp_orderRaw parameters = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/ccp/order") [IBKR.Common.QueryParameter (Data.Text.pack "acct") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_ccp_orderParametersQueryAcct parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                        IBKR.Common.QueryParameter (Data.Text.pack "conid") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_ccp_orderParametersQueryConid parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                        IBKR.Common.QueryParameter (Data.Text.pack "ccy") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_ccp_orderParametersQueryCcy parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                        IBKR.Common.QueryParameter (Data.Text.pack "exchange") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_ccp_orderParametersQueryExchange parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                        IBKR.Common.QueryParameter (Data.Text.pack "qty") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_ccp_orderParametersQueryQty parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                        IBKR.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_ccp_orderParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                        IBKR.Common.QueryParameter (Data.Text.pack "side") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_ccp_orderParametersQuerySide parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                        IBKR.Common.QueryParameter (Data.Text.pack "price") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_ccp_orderParametersQueryPrice parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                        IBKR.Common.QueryParameter (Data.Text.pack "tif") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_ccp_orderParametersQueryTif parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > POST /ccp/order
-- 
-- The same as 'post_ccp_order' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
post_ccp_orderWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Post_ccp_orderParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_ccp_orderWithConfigurationRaw config
                                   parameters = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/ccp/order") [IBKR.Common.QueryParameter (Data.Text.pack "acct") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_ccp_orderParametersQueryAcct parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                               IBKR.Common.QueryParameter (Data.Text.pack "conid") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_ccp_orderParametersQueryConid parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                               IBKR.Common.QueryParameter (Data.Text.pack "ccy") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_ccp_orderParametersQueryCcy parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                               IBKR.Common.QueryParameter (Data.Text.pack "exchange") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_ccp_orderParametersQueryExchange parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                               IBKR.Common.QueryParameter (Data.Text.pack "qty") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_ccp_orderParametersQueryQty parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                               IBKR.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_ccp_orderParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                               IBKR.Common.QueryParameter (Data.Text.pack "side") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_ccp_orderParametersQuerySide parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                               IBKR.Common.QueryParameter (Data.Text.pack "price") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_ccp_orderParametersQueryPrice parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                               IBKR.Common.QueryParameter (Data.Text.pack "tif") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_ccp_orderParametersQueryTif parameters) (Data.Text.pack "form") GHC.Types.False])
