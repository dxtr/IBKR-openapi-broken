-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_sso_validate
module IBKR.Operations.Get_sso_validate where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /sso/validate
-- 
-- Validates the current session for the SSO user
get_sso_validate :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_sso_validateResponse) -- ^ Monadic computation which returns the result of the operation
get_sso_validate = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_sso_validateResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_sso_validateResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                              Get_sso_validateResponseBody200)
                                                                                                                                                              | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_sso_validateResponse401
                                                                                                                                                              | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_sso_validateResponse500
                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sso/validate") GHC.Base.mempty)
-- | Represents a response of the operation 'get_sso_validate'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_sso_validateResponseError' is used.
data Get_sso_validateResponse =
   Get_sso_validateResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_sso_validateResponse200 Get_sso_validateResponseBody200 -- ^ An Object
  | Get_sso_validateResponse401 -- ^ Authentication failed
  | Get_sso_validateResponse500 -- ^ System failed
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/sso\/validate.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Get_sso_validateResponseBody200 = Get_sso_validateResponseBody200 {
  -- | AUTH_TIME: Time of session validation
  get_sso_validateResponseBody200AUTH_TIME :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | LOGIN_TYPE: 1 for Live, 2 for Paper
  , get_sso_validateResponseBody200LOGIN_TYPE :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | RESULT: true if session was validated; false if not.
  , get_sso_validateResponseBody200RESULT :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | USER_ID: User ID
  , get_sso_validateResponseBody200USER_ID :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | USER_NAME: Username
  , get_sso_validateResponseBody200USER_NAME :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | expire: Time in milliseconds until session expires. Caller needs to call the again to re-validate session
  , get_sso_validateResponseBody200Expire :: (GHC.Maybe.Maybe GHC.Types.Double)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_sso_validateResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("AUTH_TIME" Data.Aeson.Types.ToJSON..=)) (get_sso_validateResponseBody200AUTH_TIME obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("LOGIN_TYPE" Data.Aeson.Types.ToJSON..=)) (get_sso_validateResponseBody200LOGIN_TYPE obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("RESULT" Data.Aeson.Types.ToJSON..=)) (get_sso_validateResponseBody200RESULT obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("USER_ID" Data.Aeson.Types.ToJSON..=)) (get_sso_validateResponseBody200USER_ID obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("USER_NAME" Data.Aeson.Types.ToJSON..=)) (get_sso_validateResponseBody200USER_NAME obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expire" Data.Aeson.Types.ToJSON..=)) (get_sso_validateResponseBody200Expire obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("AUTH_TIME" Data.Aeson.Types.ToJSON..=)) (get_sso_validateResponseBody200AUTH_TIME obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("LOGIN_TYPE" Data.Aeson.Types.ToJSON..=)) (get_sso_validateResponseBody200LOGIN_TYPE obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("RESULT" Data.Aeson.Types.ToJSON..=)) (get_sso_validateResponseBody200RESULT obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("USER_ID" Data.Aeson.Types.ToJSON..=)) (get_sso_validateResponseBody200USER_ID obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("USER_NAME" Data.Aeson.Types.ToJSON..=)) (get_sso_validateResponseBody200USER_NAME obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expire" Data.Aeson.Types.ToJSON..=)) (get_sso_validateResponseBody200Expire obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_sso_validateResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_sso_validateResponseBody200" (\obj -> (((((GHC.Base.pure Get_sso_validateResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "AUTH_TIME")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "LOGIN_TYPE")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "RESULT")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "USER_ID")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "USER_NAME")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expire"))
-- | Create a new 'Get_sso_validateResponseBody200' with all required fields.
mkGet_sso_validateResponseBody200 :: Get_sso_validateResponseBody200
mkGet_sso_validateResponseBody200 = Get_sso_validateResponseBody200{get_sso_validateResponseBody200AUTH_TIME = GHC.Maybe.Nothing,
                                                                    get_sso_validateResponseBody200LOGIN_TYPE = GHC.Maybe.Nothing,
                                                                    get_sso_validateResponseBody200RESULT = GHC.Maybe.Nothing,
                                                                    get_sso_validateResponseBody200USER_ID = GHC.Maybe.Nothing,
                                                                    get_sso_validateResponseBody200USER_NAME = GHC.Maybe.Nothing,
                                                                    get_sso_validateResponseBody200Expire = GHC.Maybe.Nothing}
-- | > GET /sso/validate
-- 
-- The same as 'get_sso_validate' but accepts an explicit configuration.
get_sso_validateWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Get_sso_validateResponse) -- ^ Monadic computation which returns the result of the operation
get_sso_validateWithConfiguration config = GHC.Base.fmap (\response_4 -> GHC.Base.fmap (Data.Either.either Get_sso_validateResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_sso_validateResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                      Get_sso_validateResponseBody200)
                                                                                                                                                                                      | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_sso_validateResponse401
                                                                                                                                                                                      | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_sso_validateResponse500
                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_4) response_4) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sso/validate") GHC.Base.mempty)
-- | > GET /sso/validate
-- 
-- The same as 'get_sso_validate' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_sso_validateRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_sso_validateRaw = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sso/validate") GHC.Base.mempty)
-- | > GET /sso/validate
-- 
-- The same as 'get_sso_validate' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_sso_validateWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_sso_validateWithConfigurationRaw config = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sso/validate") GHC.Base.mempty)
