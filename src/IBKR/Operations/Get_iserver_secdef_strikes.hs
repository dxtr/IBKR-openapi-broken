-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_iserver_secdef_strikes
module IBKR.Operations.Get_iserver_secdef_strikes where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /iserver/secdef/strikes
-- 
-- Query strikes for Options\/Warrants. For the conid of the underlying contract, available contract months and exchanges use \"\/iserver\/secdef\/search\"
get_iserver_secdef_strikes :: forall m . IBKR.Common.MonadHTTP m => Get_iserver_secdef_strikesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_iserver_secdef_strikesResponse) -- ^ Monadic computation which returns the result of the operation
get_iserver_secdef_strikes parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_iserver_secdef_strikesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_iserver_secdef_strikesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       Get_iserver_secdef_strikesResponseBody200)
                                                                                                                                                                                             | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Get_iserver_secdef_strikesResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                       Get_iserver_secdef_strikesResponseBody500)
                                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/iserver/secdef/strikes") [IBKR.Common.QueryParameter (Data.Text.pack "conid") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_secdef_strikesParametersQueryConid parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                        IBKR.Common.QueryParameter (Data.Text.pack "sectype") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_secdef_strikesParametersQuerySectype parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                        IBKR.Common.QueryParameter (Data.Text.pack "month") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_secdef_strikesParametersQueryMonth parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                        IBKR.Common.QueryParameter (Data.Text.pack "exchange") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_secdef_strikesParametersQueryExchange parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/iserver\/secdef\/strikes.GET.parameters@ in the specification.
-- 
-- 
data Get_iserver_secdef_strikesParameters = Get_iserver_secdef_strikesParameters {
  -- | queryConid: Represents the parameter named \'conid\'
  -- 
  -- contract id of the underlying contract
  get_iserver_secdef_strikesParametersQueryConid :: Data.Text.Internal.Text
  -- | queryExchange: Represents the parameter named \'exchange\'
  -- 
  -- optional, default is SMART
  , get_iserver_secdef_strikesParametersQueryExchange :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryMonth: Represents the parameter named \'month\'
  -- 
  -- contract month
  , get_iserver_secdef_strikesParametersQueryMonth :: Data.Text.Internal.Text
  -- | querySectype: Represents the parameter named \'sectype\'
  -- 
  -- OPT\/WAR
  , get_iserver_secdef_strikesParametersQuerySectype :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_secdef_strikesParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryConid" Data.Aeson.Types.ToJSON..= get_iserver_secdef_strikesParametersQueryConid obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExchange" Data.Aeson.Types.ToJSON..=)) (get_iserver_secdef_strikesParametersQueryExchange obj) : ["queryMonth" Data.Aeson.Types.ToJSON..= get_iserver_secdef_strikesParametersQueryMonth obj] : ["querySectype" Data.Aeson.Types.ToJSON..= get_iserver_secdef_strikesParametersQuerySectype obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryConid" Data.Aeson.Types.ToJSON..= get_iserver_secdef_strikesParametersQueryConid obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExchange" Data.Aeson.Types.ToJSON..=)) (get_iserver_secdef_strikesParametersQueryExchange obj) : ["queryMonth" Data.Aeson.Types.ToJSON..= get_iserver_secdef_strikesParametersQueryMonth obj] : ["querySectype" Data.Aeson.Types.ToJSON..= get_iserver_secdef_strikesParametersQuerySectype obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_secdef_strikesParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_secdef_strikesParameters" (\obj -> (((GHC.Base.pure Get_iserver_secdef_strikesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryConid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExchange")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryMonth")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySectype"))
-- | Create a new 'Get_iserver_secdef_strikesParameters' with all required fields.
mkGet_iserver_secdef_strikesParameters :: Data.Text.Internal.Text -- ^ 'get_iserver_secdef_strikesParametersQueryConid'
  -> Data.Text.Internal.Text -- ^ 'get_iserver_secdef_strikesParametersQueryMonth'
  -> Data.Text.Internal.Text -- ^ 'get_iserver_secdef_strikesParametersQuerySectype'
  -> Get_iserver_secdef_strikesParameters
mkGet_iserver_secdef_strikesParameters get_iserver_secdef_strikesParametersQueryConid get_iserver_secdef_strikesParametersQueryMonth get_iserver_secdef_strikesParametersQuerySectype = Get_iserver_secdef_strikesParameters{get_iserver_secdef_strikesParametersQueryConid = get_iserver_secdef_strikesParametersQueryConid,
                                                                                                                                                                                                                             get_iserver_secdef_strikesParametersQueryExchange = GHC.Maybe.Nothing,
                                                                                                                                                                                                                             get_iserver_secdef_strikesParametersQueryMonth = get_iserver_secdef_strikesParametersQueryMonth,
                                                                                                                                                                                                                             get_iserver_secdef_strikesParametersQuerySectype = get_iserver_secdef_strikesParametersQuerySectype}
-- | Represents a response of the operation 'get_iserver_secdef_strikes'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_iserver_secdef_strikesResponseError' is used.
data Get_iserver_secdef_strikesResponse =
   Get_iserver_secdef_strikesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_iserver_secdef_strikesResponse200 Get_iserver_secdef_strikesResponseBody200 -- ^ returns an object contains call\/put strike prices
  | Get_iserver_secdef_strikesResponse500 Get_iserver_secdef_strikesResponseBody500 -- ^ error while processing the request
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/iserver\/secdef\/strikes.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Get_iserver_secdef_strikesResponseBody200 = Get_iserver_secdef_strikesResponseBody200 {
  -- | call
  get_iserver_secdef_strikesResponseBody200Call :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | put
  , get_iserver_secdef_strikesResponseBody200Put :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_secdef_strikesResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("call" Data.Aeson.Types.ToJSON..=)) (get_iserver_secdef_strikesResponseBody200Call obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("put" Data.Aeson.Types.ToJSON..=)) (get_iserver_secdef_strikesResponseBody200Put obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("call" Data.Aeson.Types.ToJSON..=)) (get_iserver_secdef_strikesResponseBody200Call obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("put" Data.Aeson.Types.ToJSON..=)) (get_iserver_secdef_strikesResponseBody200Put obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_secdef_strikesResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_secdef_strikesResponseBody200" (\obj -> (GHC.Base.pure Get_iserver_secdef_strikesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "call")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "put"))
-- | Create a new 'Get_iserver_secdef_strikesResponseBody200' with all required fields.
mkGet_iserver_secdef_strikesResponseBody200 :: Get_iserver_secdef_strikesResponseBody200
mkGet_iserver_secdef_strikesResponseBody200 = Get_iserver_secdef_strikesResponseBody200{get_iserver_secdef_strikesResponseBody200Call = GHC.Maybe.Nothing,
                                                                                        get_iserver_secdef_strikesResponseBody200Put = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/iserver\/secdef\/strikes.GET.responses.500.content.application\/json.schema@ in the specification.
-- 
-- 
data Get_iserver_secdef_strikesResponseBody500 = Get_iserver_secdef_strikesResponseBody500 {
  -- | error
  get_iserver_secdef_strikesResponseBody500Error :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_iserver_secdef_strikesResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error" Data.Aeson.Types.ToJSON..=)) (get_iserver_secdef_strikesResponseBody500Error obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error" Data.Aeson.Types.ToJSON..=)) (get_iserver_secdef_strikesResponseBody500Error obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_iserver_secdef_strikesResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_iserver_secdef_strikesResponseBody500" (\obj -> GHC.Base.pure Get_iserver_secdef_strikesResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "error"))
-- | Create a new 'Get_iserver_secdef_strikesResponseBody500' with all required fields.
mkGet_iserver_secdef_strikesResponseBody500 :: Get_iserver_secdef_strikesResponseBody500
mkGet_iserver_secdef_strikesResponseBody500 = Get_iserver_secdef_strikesResponseBody500{get_iserver_secdef_strikesResponseBody500Error = GHC.Maybe.Nothing}
-- | > GET /iserver/secdef/strikes
-- 
-- The same as 'get_iserver_secdef_strikes' but accepts an explicit configuration.
get_iserver_secdef_strikesWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_iserver_secdef_strikesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Get_iserver_secdef_strikesResponse) -- ^ Monadic computation which returns the result of the operation
get_iserver_secdef_strikesWithConfiguration config
                                            parameters = GHC.Base.fmap (\response_3 -> GHC.Base.fmap (Data.Either.either Get_iserver_secdef_strikesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_iserver_secdef_strikesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Get_iserver_secdef_strikesResponseBody200)
                                                                                                                                                                                                              | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Get_iserver_secdef_strikesResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Get_iserver_secdef_strikesResponseBody500)
                                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_3) response_3) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/iserver/secdef/strikes") [IBKR.Common.QueryParameter (Data.Text.pack "conid") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_secdef_strikesParametersQueryConid parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                               IBKR.Common.QueryParameter (Data.Text.pack "sectype") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_secdef_strikesParametersQuerySectype parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                               IBKR.Common.QueryParameter (Data.Text.pack "month") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_secdef_strikesParametersQueryMonth parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                               IBKR.Common.QueryParameter (Data.Text.pack "exchange") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_secdef_strikesParametersQueryExchange parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /iserver/secdef/strikes
-- 
-- The same as 'get_iserver_secdef_strikes' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_iserver_secdef_strikesRaw :: forall m . IBKR.Common.MonadHTTP m => Get_iserver_secdef_strikesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_iserver_secdef_strikesRaw parameters = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/iserver/secdef/strikes") [IBKR.Common.QueryParameter (Data.Text.pack "conid") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_secdef_strikesParametersQueryConid parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                IBKR.Common.QueryParameter (Data.Text.pack "sectype") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_secdef_strikesParametersQuerySectype parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                IBKR.Common.QueryParameter (Data.Text.pack "month") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_secdef_strikesParametersQueryMonth parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                IBKR.Common.QueryParameter (Data.Text.pack "exchange") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_secdef_strikesParametersQueryExchange parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /iserver/secdef/strikes
-- 
-- The same as 'get_iserver_secdef_strikes' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_iserver_secdef_strikesWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Get_iserver_secdef_strikesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_iserver_secdef_strikesWithConfigurationRaw config
                                               parameters = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/iserver/secdef/strikes") [IBKR.Common.QueryParameter (Data.Text.pack "conid") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_secdef_strikesParametersQueryConid parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                       IBKR.Common.QueryParameter (Data.Text.pack "sectype") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_secdef_strikesParametersQuerySectype parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                       IBKR.Common.QueryParameter (Data.Text.pack "month") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_iserver_secdef_strikesParametersQueryMonth parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                       IBKR.Common.QueryParameter (Data.Text.pack "exchange") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_iserver_secdef_strikesParametersQueryExchange parameters) (Data.Text.pack "form") GHC.Types.False])
