-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation post_iserver_account__accountId__alert
module IBKR.Operations.Post_iserver_account__accountId__alert where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > POST /iserver/account/{accountId}/alert
-- 
-- Please note here, DO NOT pass orderId when creating a new alert, toolId is only required for MTA alert
post_iserver_account__accountId__alert :: forall m . IBKR.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ accountId: account id
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Post_iserver_account__accountId__alertResponse) -- ^ Monadic computation which returns the result of the operation
post_iserver_account__accountId__alert accountId = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Post_iserver_account__accountId__alertResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_iserver_account__accountId__alertResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Post_iserver_account__accountId__alertResponseBody200)
                                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/iserver/account/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel accountId)) GHC.Base.++ "/alert"))) GHC.Base.mempty)
-- | Represents a response of the operation 'post_iserver_account__accountId__alert'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Post_iserver_account__accountId__alertResponseError' is used.
data Post_iserver_account__accountId__alertResponse =
   Post_iserver_account__accountId__alertResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Post_iserver_account__accountId__alertResponse200 Post_iserver_account__accountId__alertResponseBody200 -- ^ returns an object
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/iserver\/account\/{accountId}\/alert.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Post_iserver_account__accountId__alertResponseBody200 = Post_iserver_account__accountId__alertResponseBody200 {
  -- | order_id
  post_iserver_account__accountId__alertResponseBody200Order_id :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | order_status
  , post_iserver_account__accountId__alertResponseBody200Order_status :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | request_id
  , post_iserver_account__accountId__alertResponseBody200Request_id :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | success
  , post_iserver_account__accountId__alertResponseBody200Success :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | text
  , post_iserver_account__accountId__alertResponseBody200Text :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | warning_message
  , post_iserver_account__accountId__alertResponseBody200Warning_message :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_iserver_account__accountId__alertResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("order_id" Data.Aeson.Types.ToJSON..=)) (post_iserver_account__accountId__alertResponseBody200Order_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("order_status" Data.Aeson.Types.ToJSON..=)) (post_iserver_account__accountId__alertResponseBody200Order_status obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_id" Data.Aeson.Types.ToJSON..=)) (post_iserver_account__accountId__alertResponseBody200Request_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("success" Data.Aeson.Types.ToJSON..=)) (post_iserver_account__accountId__alertResponseBody200Success obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("text" Data.Aeson.Types.ToJSON..=)) (post_iserver_account__accountId__alertResponseBody200Text obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("warning_message" Data.Aeson.Types.ToJSON..=)) (post_iserver_account__accountId__alertResponseBody200Warning_message obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("order_id" Data.Aeson.Types.ToJSON..=)) (post_iserver_account__accountId__alertResponseBody200Order_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("order_status" Data.Aeson.Types.ToJSON..=)) (post_iserver_account__accountId__alertResponseBody200Order_status obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_id" Data.Aeson.Types.ToJSON..=)) (post_iserver_account__accountId__alertResponseBody200Request_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("success" Data.Aeson.Types.ToJSON..=)) (post_iserver_account__accountId__alertResponseBody200Success obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("text" Data.Aeson.Types.ToJSON..=)) (post_iserver_account__accountId__alertResponseBody200Text obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("warning_message" Data.Aeson.Types.ToJSON..=)) (post_iserver_account__accountId__alertResponseBody200Warning_message obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_iserver_account__accountId__alertResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_iserver_account__accountId__alertResponseBody200" (\obj -> (((((GHC.Base.pure Post_iserver_account__accountId__alertResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "order_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "order_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "success")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "text")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "warning_message"))
-- | Create a new 'Post_iserver_account__accountId__alertResponseBody200' with all required fields.
mkPost_iserver_account__accountId__alertResponseBody200 :: Post_iserver_account__accountId__alertResponseBody200
mkPost_iserver_account__accountId__alertResponseBody200 = Post_iserver_account__accountId__alertResponseBody200{post_iserver_account__accountId__alertResponseBody200Order_id = GHC.Maybe.Nothing,
                                                                                                                post_iserver_account__accountId__alertResponseBody200Order_status = GHC.Maybe.Nothing,
                                                                                                                post_iserver_account__accountId__alertResponseBody200Request_id = GHC.Maybe.Nothing,
                                                                                                                post_iserver_account__accountId__alertResponseBody200Success = GHC.Maybe.Nothing,
                                                                                                                post_iserver_account__accountId__alertResponseBody200Text = GHC.Maybe.Nothing,
                                                                                                                post_iserver_account__accountId__alertResponseBody200Warning_message = GHC.Maybe.Nothing}
-- | > POST /iserver/account/{accountId}/alert
-- 
-- The same as 'post_iserver_account__accountId__alert' but accepts an explicit configuration.
post_iserver_account__accountId__alertWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ accountId: account id
  -> m (Network.HTTP.Client.Types.Response Post_iserver_account__accountId__alertResponse) -- ^ Monadic computation which returns the result of the operation
post_iserver_account__accountId__alertWithConfiguration config
                                                        accountId = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Post_iserver_account__accountId__alertResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_iserver_account__accountId__alertResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Post_iserver_account__accountId__alertResponseBody200)
                                                                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/iserver/account/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel accountId)) GHC.Base.++ "/alert"))) GHC.Base.mempty)
-- | > POST /iserver/account/{accountId}/alert
-- 
-- The same as 'post_iserver_account__accountId__alert' but returns the raw 'Data.ByteString.Char8.ByteString'.
post_iserver_account__accountId__alertRaw :: forall m . IBKR.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ accountId: account id
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_iserver_account__accountId__alertRaw accountId = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/iserver/account/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel accountId)) GHC.Base.++ "/alert"))) GHC.Base.mempty)
-- | > POST /iserver/account/{accountId}/alert
-- 
-- The same as 'post_iserver_account__accountId__alert' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
post_iserver_account__accountId__alertWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ accountId: account id
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_iserver_account__accountId__alertWithConfigurationRaw config
                                                           accountId = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/iserver/account/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ IBKR.Common.stringifyModel accountId)) GHC.Base.++ "/alert"))) GHC.Base.mempty)
