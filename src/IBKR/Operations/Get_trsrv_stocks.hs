-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_trsrv_stocks
module IBKR.Operations.Get_trsrv_stocks where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified IBKR.Common
import IBKR.Types

-- | > GET /trsrv/stocks
-- 
-- Returns an object contains all stock contracts for given symbol(s)
get_trsrv_stocks :: forall m . IBKR.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ symbols: list of upper-sensitive symbols separated by comma
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Get_trsrv_stocksResponse) -- ^ Monadic computation which returns the result of the operation
get_trsrv_stocks symbols = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_trsrv_stocksResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_trsrv_stocksResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      Get_trsrv_stocksResponseBody200)
                                                                                                                                                                      | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Get_trsrv_stocksResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      Get_trsrv_stocksResponseBody500)
                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/trsrv/stocks") [IBKR.Common.QueryParameter (Data.Text.pack "symbols") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON symbols) (Data.Text.pack "form") GHC.Types.False])
-- | Represents a response of the operation 'get_trsrv_stocks'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_trsrv_stocksResponseError' is used.
data Get_trsrv_stocksResponse =
   Get_trsrv_stocksResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_trsrv_stocksResponse200 Get_trsrv_stocksResponseBody200 -- ^ returns an object with symbols
  | Get_trsrv_stocksResponse500 Get_trsrv_stocksResponseBody500 -- ^ error while processing the request
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/trsrv\/stocks.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Get_trsrv_stocksResponseBody200 = Get_trsrv_stocksResponseBody200 {
  -- | symbol: This is an array of object(s), there could be multiple results under same symbol
  get_trsrv_stocksResponseBody200Symbol :: (GHC.Maybe.Maybe Stocks)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_trsrv_stocksResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol" Data.Aeson.Types.ToJSON..=)) (get_trsrv_stocksResponseBody200Symbol obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol" Data.Aeson.Types.ToJSON..=)) (get_trsrv_stocksResponseBody200Symbol obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_trsrv_stocksResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_trsrv_stocksResponseBody200" (\obj -> GHC.Base.pure Get_trsrv_stocksResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "symbol"))
-- | Create a new 'Get_trsrv_stocksResponseBody200' with all required fields.
mkGet_trsrv_stocksResponseBody200 :: Get_trsrv_stocksResponseBody200
mkGet_trsrv_stocksResponseBody200 = Get_trsrv_stocksResponseBody200{get_trsrv_stocksResponseBody200Symbol = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/trsrv\/stocks.GET.responses.500.content.application\/json.schema@ in the specification.
-- 
-- 
data Get_trsrv_stocksResponseBody500 = Get_trsrv_stocksResponseBody500 {
  -- | error
  get_trsrv_stocksResponseBody500Error :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_trsrv_stocksResponseBody500
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error" Data.Aeson.Types.ToJSON..=)) (get_trsrv_stocksResponseBody500Error obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error" Data.Aeson.Types.ToJSON..=)) (get_trsrv_stocksResponseBody500Error obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_trsrv_stocksResponseBody500
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_trsrv_stocksResponseBody500" (\obj -> GHC.Base.pure Get_trsrv_stocksResponseBody500 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "error"))
-- | Create a new 'Get_trsrv_stocksResponseBody500' with all required fields.
mkGet_trsrv_stocksResponseBody500 :: Get_trsrv_stocksResponseBody500
mkGet_trsrv_stocksResponseBody500 = Get_trsrv_stocksResponseBody500{get_trsrv_stocksResponseBody500Error = GHC.Maybe.Nothing}
-- | > GET /trsrv/stocks
-- 
-- The same as 'get_trsrv_stocks' but accepts an explicit configuration.
get_trsrv_stocksWithConfiguration :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ symbols: list of upper-sensitive symbols separated by comma
  -> m (Network.HTTP.Client.Types.Response Get_trsrv_stocksResponse) -- ^ Monadic computation which returns the result of the operation
get_trsrv_stocksWithConfiguration config
                                  symbols = GHC.Base.fmap (\response_3 -> GHC.Base.fmap (Data.Either.either Get_trsrv_stocksResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_trsrv_stocksResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       Get_trsrv_stocksResponseBody200)
                                                                                                                                                                                       | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Get_trsrv_stocksResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       Get_trsrv_stocksResponseBody500)
                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_3) response_3) (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/trsrv/stocks") [IBKR.Common.QueryParameter (Data.Text.pack "symbols") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON symbols) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /trsrv/stocks
-- 
-- The same as 'get_trsrv_stocks' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_trsrv_stocksRaw :: forall m . IBKR.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ symbols: list of upper-sensitive symbols separated by comma
  -> IBKR.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_trsrv_stocksRaw symbols = GHC.Base.id (IBKR.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/trsrv/stocks") [IBKR.Common.QueryParameter (Data.Text.pack "symbols") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON symbols) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /trsrv/stocks
-- 
-- The same as 'get_trsrv_stocks' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_trsrv_stocksWithConfigurationRaw :: forall m . IBKR.Common.MonadHTTP m => IBKR.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ symbols: list of upper-sensitive symbols separated by comma
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_trsrv_stocksWithConfigurationRaw config
                                     symbols = GHC.Base.id (IBKR.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/trsrv/stocks") [IBKR.Common.QueryParameter (Data.Text.pack "symbols") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON symbols) (Data.Text.pack "form") GHC.Types.False])
