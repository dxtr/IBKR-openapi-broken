-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Stocks
module IBKR.Types.Stocks where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified IBKR.Common
import IBKR.TypeAlias

-- | Defines the object schema located at @components.schemas.stocks.items@ in the specification.
-- 
-- future contract information
data StocksItem = StocksItem {
  -- | assetClass
  stocksItemAssetClass :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | chineseName: company name in Chinese
  , stocksItemChineseName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | contracts: array of contracts from different exchanges
  , stocksItemContracts :: (GHC.Maybe.Maybe ([StocksItemContracts]))
  -- | name: company name
  , stocksItemName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON StocksItem
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assetClass" Data.Aeson.Types.ToJSON..=)) (stocksItemAssetClass obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("chineseName" Data.Aeson.Types.ToJSON..=)) (stocksItemChineseName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("contracts" Data.Aeson.Types.ToJSON..=)) (stocksItemContracts obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (stocksItemName obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assetClass" Data.Aeson.Types.ToJSON..=)) (stocksItemAssetClass obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("chineseName" Data.Aeson.Types.ToJSON..=)) (stocksItemChineseName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("contracts" Data.Aeson.Types.ToJSON..=)) (stocksItemContracts obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (stocksItemName obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON StocksItem
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "StocksItem" (\obj -> (((GHC.Base.pure StocksItem GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "assetClass")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "chineseName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "contracts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name"))
-- | Create a new 'StocksItem' with all required fields.
mkStocksItem :: StocksItem
mkStocksItem = StocksItem{stocksItemAssetClass = GHC.Maybe.Nothing,
                          stocksItemChineseName = GHC.Maybe.Nothing,
                          stocksItemContracts = GHC.Maybe.Nothing,
                          stocksItemName = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.stocks.items.properties.contracts.items@ in the specification.
-- 
-- 
data StocksItemContracts = StocksItemContracts {
  -- | conid: conid of the stock contract
  stocksItemContractsConid :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | exchange
  , stocksItemContractsExchange :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON StocksItemContracts
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conid" Data.Aeson.Types.ToJSON..=)) (stocksItemContractsConid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exchange" Data.Aeson.Types.ToJSON..=)) (stocksItemContractsExchange obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conid" Data.Aeson.Types.ToJSON..=)) (stocksItemContractsConid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exchange" Data.Aeson.Types.ToJSON..=)) (stocksItemContractsExchange obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON StocksItemContracts
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "StocksItemContracts" (\obj -> (GHC.Base.pure StocksItemContracts GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "conid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exchange"))
-- | Create a new 'StocksItemContracts' with all required fields.
mkStocksItemContracts :: StocksItemContracts
mkStocksItemContracts = StocksItemContracts{stocksItemContractsConid = GHC.Maybe.Nothing,
                                            stocksItemContractsExchange = GHC.Maybe.Nothing}
-- | Defines an alias for the schema located at @components.schemas.stocks@ in the specification.
-- 
-- This is an array of object(s), there could be multiple results under same symbol
type Stocks = [StocksItem]
