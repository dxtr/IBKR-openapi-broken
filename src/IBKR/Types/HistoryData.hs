-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema HistoryData
module IBKR.Types.HistoryData where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified IBKR.Common
import IBKR.TypeAlias

-- | Defines the object schema located at @components.schemas.history-data@ in the specification.
-- 
-- 
data History_data = History_data {
  -- | barLength: The number of seconds in a bar
  history_dataBarLength :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | data
  , history_dataData :: (GHC.Maybe.Maybe ([History_dataData]))
  -- | high: High value during this time series with format %h\/%v\/%t. %h is the high price (scaled by priceFactor), %v is volume
  -- (volume factor will always be 100 (reported volume = actual volume\/100)) and %t is minutes from start time of the chart
  , history_dataHigh :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | low: Low value during this time series with format %l\/%v\/%t. %l is the low price (scaled by priceFactor), %v is volume
  -- (volume factor will always be 100 (reported volume = actual volume\/100)) and %t is minutes from start time of the chart
  , history_dataLow :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | mdAvailability: Market Data Availability. The field may contain two chars. The first char is the primary code: S = Streaming, R = Realtime, D = Delayed,
  -- Z = Frozen, Y = Frozen Delayed. The second char is the secondary code: P = Snapshot Available, p = Consolidated.
  , history_dataMdAvailability :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | messageVersion
  , history_dataMessageVersion :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | mktDataDelay: The time it takes, in milliseconds, to process the historical data request
  , history_dataMktDataDelay :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | negativeCapable
  , history_dataNegativeCapable :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | outsideRth: The historical data returned includes outside of regular trading hours
  , history_dataOutsideRth :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | points: total number of points
  , history_dataPoints :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | priceDisplayRule
  , history_dataPriceDisplayRule :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | priceDisplayValue
  , history_dataPriceDisplayValue :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | priceFactor: priceFactor is price increment obtained from display rule
  , history_dataPriceFactor :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | startTime: start date time in the format YYYYMMDD-HH:mm:ss
  , history_dataStartTime :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | symbol: Underlying symbol
  , history_dataSymbol :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | text: companyName
  , history_dataText :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | timePeriod: The duration for the historical data request
  , history_dataTimePeriod :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | tradingDayDuration: The number of seconds in the trading day
  , history_dataTradingDayDuration :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | travelTime
  , history_dataTravelTime :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | volumeFactor
  , history_dataVolumeFactor :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON History_data
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("barLength" Data.Aeson.Types.ToJSON..=)) (history_dataBarLength obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("data" Data.Aeson.Types.ToJSON..=)) (history_dataData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("high" Data.Aeson.Types.ToJSON..=)) (history_dataHigh obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("low" Data.Aeson.Types.ToJSON..=)) (history_dataLow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mdAvailability" Data.Aeson.Types.ToJSON..=)) (history_dataMdAvailability obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("messageVersion" Data.Aeson.Types.ToJSON..=)) (history_dataMessageVersion obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mktDataDelay" Data.Aeson.Types.ToJSON..=)) (history_dataMktDataDelay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("negativeCapable" Data.Aeson.Types.ToJSON..=)) (history_dataNegativeCapable obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("outsideRth" Data.Aeson.Types.ToJSON..=)) (history_dataOutsideRth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("points" Data.Aeson.Types.ToJSON..=)) (history_dataPoints obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("priceDisplayRule" Data.Aeson.Types.ToJSON..=)) (history_dataPriceDisplayRule obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("priceDisplayValue" Data.Aeson.Types.ToJSON..=)) (history_dataPriceDisplayValue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("priceFactor" Data.Aeson.Types.ToJSON..=)) (history_dataPriceFactor obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("startTime" Data.Aeson.Types.ToJSON..=)) (history_dataStartTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol" Data.Aeson.Types.ToJSON..=)) (history_dataSymbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("text" Data.Aeson.Types.ToJSON..=)) (history_dataText obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("timePeriod" Data.Aeson.Types.ToJSON..=)) (history_dataTimePeriod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tradingDayDuration" Data.Aeson.Types.ToJSON..=)) (history_dataTradingDayDuration obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("travelTime" Data.Aeson.Types.ToJSON..=)) (history_dataTravelTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("volumeFactor" Data.Aeson.Types.ToJSON..=)) (history_dataVolumeFactor obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("barLength" Data.Aeson.Types.ToJSON..=)) (history_dataBarLength obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("data" Data.Aeson.Types.ToJSON..=)) (history_dataData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("high" Data.Aeson.Types.ToJSON..=)) (history_dataHigh obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("low" Data.Aeson.Types.ToJSON..=)) (history_dataLow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mdAvailability" Data.Aeson.Types.ToJSON..=)) (history_dataMdAvailability obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("messageVersion" Data.Aeson.Types.ToJSON..=)) (history_dataMessageVersion obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mktDataDelay" Data.Aeson.Types.ToJSON..=)) (history_dataMktDataDelay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("negativeCapable" Data.Aeson.Types.ToJSON..=)) (history_dataNegativeCapable obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("outsideRth" Data.Aeson.Types.ToJSON..=)) (history_dataOutsideRth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("points" Data.Aeson.Types.ToJSON..=)) (history_dataPoints obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("priceDisplayRule" Data.Aeson.Types.ToJSON..=)) (history_dataPriceDisplayRule obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("priceDisplayValue" Data.Aeson.Types.ToJSON..=)) (history_dataPriceDisplayValue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("priceFactor" Data.Aeson.Types.ToJSON..=)) (history_dataPriceFactor obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("startTime" Data.Aeson.Types.ToJSON..=)) (history_dataStartTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol" Data.Aeson.Types.ToJSON..=)) (history_dataSymbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("text" Data.Aeson.Types.ToJSON..=)) (history_dataText obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("timePeriod" Data.Aeson.Types.ToJSON..=)) (history_dataTimePeriod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tradingDayDuration" Data.Aeson.Types.ToJSON..=)) (history_dataTradingDayDuration obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("travelTime" Data.Aeson.Types.ToJSON..=)) (history_dataTravelTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("volumeFactor" Data.Aeson.Types.ToJSON..=)) (history_dataVolumeFactor obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON History_data
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "History_data" (\obj -> (((((((((((((((((((GHC.Base.pure History_data GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "barLength")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "high")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "low")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mdAvailability")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "messageVersion")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mktDataDelay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "negativeCapable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "outsideRth")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "points")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "priceDisplayRule")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "priceDisplayValue")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "priceFactor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "startTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "text")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "timePeriod")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tradingDayDuration")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "travelTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "volumeFactor"))
-- | Create a new 'History_data' with all required fields.
mkHistory_data :: History_data
mkHistory_data = History_data{history_dataBarLength = GHC.Maybe.Nothing,
                              history_dataData = GHC.Maybe.Nothing,
                              history_dataHigh = GHC.Maybe.Nothing,
                              history_dataLow = GHC.Maybe.Nothing,
                              history_dataMdAvailability = GHC.Maybe.Nothing,
                              history_dataMessageVersion = GHC.Maybe.Nothing,
                              history_dataMktDataDelay = GHC.Maybe.Nothing,
                              history_dataNegativeCapable = GHC.Maybe.Nothing,
                              history_dataOutsideRth = GHC.Maybe.Nothing,
                              history_dataPoints = GHC.Maybe.Nothing,
                              history_dataPriceDisplayRule = GHC.Maybe.Nothing,
                              history_dataPriceDisplayValue = GHC.Maybe.Nothing,
                              history_dataPriceFactor = GHC.Maybe.Nothing,
                              history_dataStartTime = GHC.Maybe.Nothing,
                              history_dataSymbol = GHC.Maybe.Nothing,
                              history_dataText = GHC.Maybe.Nothing,
                              history_dataTimePeriod = GHC.Maybe.Nothing,
                              history_dataTradingDayDuration = GHC.Maybe.Nothing,
                              history_dataTravelTime = GHC.Maybe.Nothing,
                              history_dataVolumeFactor = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.history-data.properties.data.items@ in the specification.
-- 
-- 
data History_dataData = History_dataData {
  -- | c: close price
  history_dataDataC :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | h: high price
  , history_dataDataH :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | l: low price
  , history_dataDataL :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | o: open price
  , history_dataDataO :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | t: unix time stamp
  , history_dataDataT :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | v: volume
  , history_dataDataV :: (GHC.Maybe.Maybe GHC.Types.Double)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON History_dataData
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("c" Data.Aeson.Types.ToJSON..=)) (history_dataDataC obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("h" Data.Aeson.Types.ToJSON..=)) (history_dataDataH obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("l" Data.Aeson.Types.ToJSON..=)) (history_dataDataL obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("o" Data.Aeson.Types.ToJSON..=)) (history_dataDataO obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("t" Data.Aeson.Types.ToJSON..=)) (history_dataDataT obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("v" Data.Aeson.Types.ToJSON..=)) (history_dataDataV obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("c" Data.Aeson.Types.ToJSON..=)) (history_dataDataC obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("h" Data.Aeson.Types.ToJSON..=)) (history_dataDataH obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("l" Data.Aeson.Types.ToJSON..=)) (history_dataDataL obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("o" Data.Aeson.Types.ToJSON..=)) (history_dataDataO obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("t" Data.Aeson.Types.ToJSON..=)) (history_dataDataT obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("v" Data.Aeson.Types.ToJSON..=)) (history_dataDataV obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON History_dataData
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "History_dataData" (\obj -> (((((GHC.Base.pure History_dataData GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "c")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "h")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "l")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "o")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "t")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "v"))
-- | Create a new 'History_dataData' with all required fields.
mkHistory_dataData :: History_dataData
mkHistory_dataData = History_dataData{history_dataDataC = GHC.Maybe.Nothing,
                                      history_dataDataH = GHC.Maybe.Nothing,
                                      history_dataDataL = GHC.Maybe.Nothing,
                                      history_dataDataO = GHC.Maybe.Nothing,
                                      history_dataDataT = GHC.Maybe.Nothing,
                                      history_dataDataV = GHC.Maybe.Nothing}
