-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Secdef
module IBKR.Types.Secdef where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified IBKR.Common
import IBKR.TypeAlias

-- | Defines the object schema located at @components.schemas.secdef.items@ in the specification.
-- 
-- security definition information.
data SecdefItem = SecdefItem {
  -- | allExchanges: List of exchanges and venues contract trades.
  secdefItemAllExchanges :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | assetClass: Group of financial instruments which have similar financial characteristics and behave similar in the marketplace.
  , secdefItemAssetClass :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | chineseName: HTML encoded company description in Chinese.
  , secdefItemChineseName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | conid: IBKR contract identifier.
  , secdefItemConid :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | crossCurrency: Defines if a derivative contract has a different currency.
  , secdefItemCrossCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | currency: Currency contract trades in.
  , secdefItemCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | expiry: Specific data contract expires.
  , secdefItemExpiry :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | fullName: Formatted company name with underlying symbol, expiration, strike, right.
  , secdefItemFullName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | group: Potential characteristic of each product.
  , secdefItemGroup :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | hasOptions: If contract has an option.
  , secdefItemHasOptions :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | incrementRules: Price increment value contract trades.
  , secdefItemIncrementRules :: (GHC.Maybe.Maybe SecdefItemIncrementRules)
  -- | isUS: If contract is a US contract. Currently supported for stocks, options and warrants.
  , secdefItemIsUS :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | lastTradingDay: Final day derivative contract can be traded before delivery of the underlying asset or cash settlement.
  , secdefItemLastTradingDay :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | listingExchange: Main trading venue.
  , secdefItemListingExchange :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | multiplier: Multiplier for total premium paid or received for derivative contract.
  , secdefItemMultiplier :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | name: Company Name.
  , secdefItemName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | putOrCall: Defines the right to buy or sell of the underlying security.
  , secdefItemPutOrCall :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | sector: The category of the economy.
  , secdefItemSector :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | sectorGroup: Stock Group contract belongs too.
  , secdefItemSectorGroup :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | strike: Set price at which a derivative contract can be bought or sold.
  , secdefItemStrike :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | ticker: Contract symbol.
  , secdefItemTicker :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | time
  , secdefItemTime :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | type: Stock type.
  , secdefItemType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | undComp: Company name for underlying contract.
  , secdefItemUndComp :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | undConid: Underlying contract identifier.
  , secdefItemUndConid :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | undSym: IBKR Symbol for underlying contract.
  , secdefItemUndSym :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SecdefItem
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allExchanges" Data.Aeson.Types.ToJSON..=)) (secdefItemAllExchanges obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assetClass" Data.Aeson.Types.ToJSON..=)) (secdefItemAssetClass obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("chineseName" Data.Aeson.Types.ToJSON..=)) (secdefItemChineseName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conid" Data.Aeson.Types.ToJSON..=)) (secdefItemConid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("crossCurrency" Data.Aeson.Types.ToJSON..=)) (secdefItemCrossCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (secdefItemCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expiry" Data.Aeson.Types.ToJSON..=)) (secdefItemExpiry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fullName" Data.Aeson.Types.ToJSON..=)) (secdefItemFullName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group" Data.Aeson.Types.ToJSON..=)) (secdefItemGroup obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hasOptions" Data.Aeson.Types.ToJSON..=)) (secdefItemHasOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("incrementRules" Data.Aeson.Types.ToJSON..=)) (secdefItemIncrementRules obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("isUS" Data.Aeson.Types.ToJSON..=)) (secdefItemIsUS obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lastTradingDay" Data.Aeson.Types.ToJSON..=)) (secdefItemLastTradingDay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("listingExchange" Data.Aeson.Types.ToJSON..=)) (secdefItemListingExchange obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("multiplier" Data.Aeson.Types.ToJSON..=)) (secdefItemMultiplier obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (secdefItemName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("putOrCall" Data.Aeson.Types.ToJSON..=)) (secdefItemPutOrCall obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sector" Data.Aeson.Types.ToJSON..=)) (secdefItemSector obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sectorGroup" Data.Aeson.Types.ToJSON..=)) (secdefItemSectorGroup obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("strike" Data.Aeson.Types.ToJSON..=)) (secdefItemStrike obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ticker" Data.Aeson.Types.ToJSON..=)) (secdefItemTicker obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("time" Data.Aeson.Types.ToJSON..=)) (secdefItemTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (secdefItemType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("undComp" Data.Aeson.Types.ToJSON..=)) (secdefItemUndComp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("undConid" Data.Aeson.Types.ToJSON..=)) (secdefItemUndConid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("undSym" Data.Aeson.Types.ToJSON..=)) (secdefItemUndSym obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allExchanges" Data.Aeson.Types.ToJSON..=)) (secdefItemAllExchanges obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assetClass" Data.Aeson.Types.ToJSON..=)) (secdefItemAssetClass obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("chineseName" Data.Aeson.Types.ToJSON..=)) (secdefItemChineseName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conid" Data.Aeson.Types.ToJSON..=)) (secdefItemConid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("crossCurrency" Data.Aeson.Types.ToJSON..=)) (secdefItemCrossCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (secdefItemCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expiry" Data.Aeson.Types.ToJSON..=)) (secdefItemExpiry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fullName" Data.Aeson.Types.ToJSON..=)) (secdefItemFullName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group" Data.Aeson.Types.ToJSON..=)) (secdefItemGroup obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hasOptions" Data.Aeson.Types.ToJSON..=)) (secdefItemHasOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("incrementRules" Data.Aeson.Types.ToJSON..=)) (secdefItemIncrementRules obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("isUS" Data.Aeson.Types.ToJSON..=)) (secdefItemIsUS obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lastTradingDay" Data.Aeson.Types.ToJSON..=)) (secdefItemLastTradingDay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("listingExchange" Data.Aeson.Types.ToJSON..=)) (secdefItemListingExchange obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("multiplier" Data.Aeson.Types.ToJSON..=)) (secdefItemMultiplier obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (secdefItemName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("putOrCall" Data.Aeson.Types.ToJSON..=)) (secdefItemPutOrCall obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sector" Data.Aeson.Types.ToJSON..=)) (secdefItemSector obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sectorGroup" Data.Aeson.Types.ToJSON..=)) (secdefItemSectorGroup obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("strike" Data.Aeson.Types.ToJSON..=)) (secdefItemStrike obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ticker" Data.Aeson.Types.ToJSON..=)) (secdefItemTicker obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("time" Data.Aeson.Types.ToJSON..=)) (secdefItemTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (secdefItemType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("undComp" Data.Aeson.Types.ToJSON..=)) (secdefItemUndComp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("undConid" Data.Aeson.Types.ToJSON..=)) (secdefItemUndConid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("undSym" Data.Aeson.Types.ToJSON..=)) (secdefItemUndSym obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SecdefItem
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SecdefItem" (\obj -> (((((((((((((((((((((((((GHC.Base.pure SecdefItem GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "allExchanges")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "assetClass")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "chineseName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "conid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "crossCurrency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expiry")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fullName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "group")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "hasOptions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "incrementRules")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "isUS")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "lastTradingDay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "listingExchange")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "multiplier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "putOrCall")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sector")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sectorGroup")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "strike")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ticker")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "time")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "undComp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "undConid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "undSym"))
-- | Create a new 'SecdefItem' with all required fields.
mkSecdefItem :: SecdefItem
mkSecdefItem = SecdefItem{secdefItemAllExchanges = GHC.Maybe.Nothing,
                          secdefItemAssetClass = GHC.Maybe.Nothing,
                          secdefItemChineseName = GHC.Maybe.Nothing,
                          secdefItemConid = GHC.Maybe.Nothing,
                          secdefItemCrossCurrency = GHC.Maybe.Nothing,
                          secdefItemCurrency = GHC.Maybe.Nothing,
                          secdefItemExpiry = GHC.Maybe.Nothing,
                          secdefItemFullName = GHC.Maybe.Nothing,
                          secdefItemGroup = GHC.Maybe.Nothing,
                          secdefItemHasOptions = GHC.Maybe.Nothing,
                          secdefItemIncrementRules = GHC.Maybe.Nothing,
                          secdefItemIsUS = GHC.Maybe.Nothing,
                          secdefItemLastTradingDay = GHC.Maybe.Nothing,
                          secdefItemListingExchange = GHC.Maybe.Nothing,
                          secdefItemMultiplier = GHC.Maybe.Nothing,
                          secdefItemName = GHC.Maybe.Nothing,
                          secdefItemPutOrCall = GHC.Maybe.Nothing,
                          secdefItemSector = GHC.Maybe.Nothing,
                          secdefItemSectorGroup = GHC.Maybe.Nothing,
                          secdefItemStrike = GHC.Maybe.Nothing,
                          secdefItemTicker = GHC.Maybe.Nothing,
                          secdefItemTime = GHC.Maybe.Nothing,
                          secdefItemType = GHC.Maybe.Nothing,
                          secdefItemUndComp = GHC.Maybe.Nothing,
                          secdefItemUndConid = GHC.Maybe.Nothing,
                          secdefItemUndSym = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.secdef.items.properties.incrementRules@ in the specification.
-- 
-- Price increment value contract trades.
data SecdefItemIncrementRules = SecdefItemIncrementRules {
  -- | increment: The minimum increment value for contract price.
  secdefItemIncrementRulesIncrement :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | lowerEdge: The minimum contract price on the market that supports the specified increment.
  , secdefItemIncrementRulesLowerEdge :: (GHC.Maybe.Maybe GHC.Types.Double)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SecdefItemIncrementRules
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("increment" Data.Aeson.Types.ToJSON..=)) (secdefItemIncrementRulesIncrement obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lowerEdge" Data.Aeson.Types.ToJSON..=)) (secdefItemIncrementRulesLowerEdge obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("increment" Data.Aeson.Types.ToJSON..=)) (secdefItemIncrementRulesIncrement obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lowerEdge" Data.Aeson.Types.ToJSON..=)) (secdefItemIncrementRulesLowerEdge obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SecdefItemIncrementRules
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SecdefItemIncrementRules" (\obj -> (GHC.Base.pure SecdefItemIncrementRules GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "increment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "lowerEdge"))
-- | Create a new 'SecdefItemIncrementRules' with all required fields.
mkSecdefItemIncrementRules :: SecdefItemIncrementRules
mkSecdefItemIncrementRules = SecdefItemIncrementRules{secdefItemIncrementRulesIncrement = GHC.Maybe.Nothing,
                                                      secdefItemIncrementRulesLowerEdge = GHC.Maybe.Nothing}
-- | Defines an alias for the schema located at @components.schemas.secdef@ in the specification.
-- 
-- 
type Secdef = [SecdefItem]
