-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema PositionData
module IBKR.Types.PositionData where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified IBKR.Common
import IBKR.TypeAlias

-- | Defines the object schema located at @components.schemas.position-data@ in the specification.
-- 
-- 
data Position_data = Position_data {
  -- | avgCost: Average cost of the position.
  position_dataAvgCost :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | conid: Contract identifier from IBKR\'s database.
  , position_dataConid :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | position: Number of shares or quantity of the position.
  , position_dataPosition :: (GHC.Maybe.Maybe GHC.Types.Double)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Position_data
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avgCost" Data.Aeson.Types.ToJSON..=)) (position_dataAvgCost obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conid" Data.Aeson.Types.ToJSON..=)) (position_dataConid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("position" Data.Aeson.Types.ToJSON..=)) (position_dataPosition obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avgCost" Data.Aeson.Types.ToJSON..=)) (position_dataAvgCost obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conid" Data.Aeson.Types.ToJSON..=)) (position_dataConid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("position" Data.Aeson.Types.ToJSON..=)) (position_dataPosition obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Position_data
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Position_data" (\obj -> ((GHC.Base.pure Position_data GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "avgCost")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "conid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "position"))
-- | Create a new 'Position_data' with all required fields.
mkPosition_data :: Position_data
mkPosition_data = Position_data{position_dataAvgCost = GHC.Maybe.Nothing,
                                position_dataConid = GHC.Maybe.Nothing,
                                position_dataPosition = GHC.Maybe.Nothing}
