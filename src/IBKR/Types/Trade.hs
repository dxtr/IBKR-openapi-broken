-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Trade
module IBKR.Types.Trade where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified IBKR.Common
import IBKR.TypeAlias

-- | Defines the object schema located at @components.schemas.trade@ in the specification.
-- 
-- 
data Trade = Trade {
  -- | account: accountCode
  tradeAccount :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | acountCode: Account Number
  , tradeAcountCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | clearing_id: Firm which will settle the trade. For IBExecution customers only.
  , tradeClearing_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | clearing_name: Specifies the true beneficiary of the order. For IBExecution customers only.
  , tradeClearing_name :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | commission: Commission of the order
  , tradeCommission :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | company_name: Contracts company name
  , tradeCompany_name :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | conid: IBKR\'s contract identifier
  , tradeConid :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | conidex: conid and exchange. Format supports conid or conid\@exchange
  , tradeConidex :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | contract_description_1: Format contract name
  , tradeContract_description_1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | exchange: Exchange or venue of order
  , tradeExchange :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | execution_id: execution identifier for the order
  , tradeExecution_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | liquidation_trade: If order adds liquidity to the market.
  , tradeLiquidation_trade :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | net_amount: Net cost of the order, including contract multiplier and quantity.
  , tradeNet_amount :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | order_description: Formatted description of the order \"%side% %size% \@ %price% on %exchange%\".
  , tradeOrder_description :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | order_ref: User defined string used to identify the order. Value is set using \"cOID\" field while placing an order.
  , tradeOrder_ref :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | position: Total quantity owned for this contract
  , tradePosition :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | price: Average Price
  , tradePrice :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | sec_type: Asset class
  , tradeSec_type :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | side: The side of the market of the order.
  --   * B - Buy contract near posted ask price
  --   * S - Sell contract near posted bid price
  --   * X - Option expired
  , tradeSide :: (GHC.Maybe.Maybe TradeSide)
  -- | size: Quantity of the order
  , tradeSize :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | submitter: User that submitted order
  , tradeSubmitter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | symbol: Underlying Symbol
  , tradeSymbol :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | trade_time: Time of Status update in format \"YYYYMMDD-hh:mm:ss\".
  , tradeTrade_time :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | trade_time_r: Time of status update in format unix time.
  , tradeTrade_time_r :: (GHC.Maybe.Maybe GHC.Types.Double)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Trade
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (tradeAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acountCode" Data.Aeson.Types.ToJSON..=)) (tradeAcountCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("clearing_id" Data.Aeson.Types.ToJSON..=)) (tradeClearing_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("clearing_name" Data.Aeson.Types.ToJSON..=)) (tradeClearing_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("commission" Data.Aeson.Types.ToJSON..=)) (tradeCommission obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("company_name" Data.Aeson.Types.ToJSON..=)) (tradeCompany_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conid" Data.Aeson.Types.ToJSON..=)) (tradeConid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conidex" Data.Aeson.Types.ToJSON..=)) (tradeConidex obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("contract_description_1" Data.Aeson.Types.ToJSON..=)) (tradeContract_description_1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exchange" Data.Aeson.Types.ToJSON..=)) (tradeExchange obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_id" Data.Aeson.Types.ToJSON..=)) (tradeExecution_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("liquidation_trade" Data.Aeson.Types.ToJSON..=)) (tradeLiquidation_trade obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_amount" Data.Aeson.Types.ToJSON..=)) (tradeNet_amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("order_description" Data.Aeson.Types.ToJSON..=)) (tradeOrder_description obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("order_ref" Data.Aeson.Types.ToJSON..=)) (tradeOrder_ref obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("position" Data.Aeson.Types.ToJSON..=)) (tradePosition obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("price" Data.Aeson.Types.ToJSON..=)) (tradePrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sec_type" Data.Aeson.Types.ToJSON..=)) (tradeSec_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("side" Data.Aeson.Types.ToJSON..=)) (tradeSide obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("size" Data.Aeson.Types.ToJSON..=)) (tradeSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("submitter" Data.Aeson.Types.ToJSON..=)) (tradeSubmitter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol" Data.Aeson.Types.ToJSON..=)) (tradeSymbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trade_time" Data.Aeson.Types.ToJSON..=)) (tradeTrade_time obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trade_time_r" Data.Aeson.Types.ToJSON..=)) (tradeTrade_time_r obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (tradeAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acountCode" Data.Aeson.Types.ToJSON..=)) (tradeAcountCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("clearing_id" Data.Aeson.Types.ToJSON..=)) (tradeClearing_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("clearing_name" Data.Aeson.Types.ToJSON..=)) (tradeClearing_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("commission" Data.Aeson.Types.ToJSON..=)) (tradeCommission obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("company_name" Data.Aeson.Types.ToJSON..=)) (tradeCompany_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conid" Data.Aeson.Types.ToJSON..=)) (tradeConid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conidex" Data.Aeson.Types.ToJSON..=)) (tradeConidex obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("contract_description_1" Data.Aeson.Types.ToJSON..=)) (tradeContract_description_1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exchange" Data.Aeson.Types.ToJSON..=)) (tradeExchange obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_id" Data.Aeson.Types.ToJSON..=)) (tradeExecution_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("liquidation_trade" Data.Aeson.Types.ToJSON..=)) (tradeLiquidation_trade obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("net_amount" Data.Aeson.Types.ToJSON..=)) (tradeNet_amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("order_description" Data.Aeson.Types.ToJSON..=)) (tradeOrder_description obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("order_ref" Data.Aeson.Types.ToJSON..=)) (tradeOrder_ref obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("position" Data.Aeson.Types.ToJSON..=)) (tradePosition obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("price" Data.Aeson.Types.ToJSON..=)) (tradePrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sec_type" Data.Aeson.Types.ToJSON..=)) (tradeSec_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("side" Data.Aeson.Types.ToJSON..=)) (tradeSide obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("size" Data.Aeson.Types.ToJSON..=)) (tradeSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("submitter" Data.Aeson.Types.ToJSON..=)) (tradeSubmitter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol" Data.Aeson.Types.ToJSON..=)) (tradeSymbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trade_time" Data.Aeson.Types.ToJSON..=)) (tradeTrade_time obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trade_time_r" Data.Aeson.Types.ToJSON..=)) (tradeTrade_time_r obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Trade
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Trade" (\obj -> (((((((((((((((((((((((GHC.Base.pure Trade GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "acountCode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "clearing_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "clearing_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "commission")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "company_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "conid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "conidex")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "contract_description_1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exchange")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "execution_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "liquidation_trade")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "net_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "order_description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "order_ref")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "position")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sec_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "side")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "submitter")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "trade_time")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "trade_time_r"))
-- | Create a new 'Trade' with all required fields.
mkTrade :: Trade
mkTrade = Trade{tradeAccount = GHC.Maybe.Nothing,
                tradeAcountCode = GHC.Maybe.Nothing,
                tradeClearing_id = GHC.Maybe.Nothing,
                tradeClearing_name = GHC.Maybe.Nothing,
                tradeCommission = GHC.Maybe.Nothing,
                tradeCompany_name = GHC.Maybe.Nothing,
                tradeConid = GHC.Maybe.Nothing,
                tradeConidex = GHC.Maybe.Nothing,
                tradeContract_description_1 = GHC.Maybe.Nothing,
                tradeExchange = GHC.Maybe.Nothing,
                tradeExecution_id = GHC.Maybe.Nothing,
                tradeLiquidation_trade = GHC.Maybe.Nothing,
                tradeNet_amount = GHC.Maybe.Nothing,
                tradeOrder_description = GHC.Maybe.Nothing,
                tradeOrder_ref = GHC.Maybe.Nothing,
                tradePosition = GHC.Maybe.Nothing,
                tradePrice = GHC.Maybe.Nothing,
                tradeSec_type = GHC.Maybe.Nothing,
                tradeSide = GHC.Maybe.Nothing,
                tradeSize = GHC.Maybe.Nothing,
                tradeSubmitter = GHC.Maybe.Nothing,
                tradeSymbol = GHC.Maybe.Nothing,
                tradeTrade_time = GHC.Maybe.Nothing,
                tradeTrade_time_r = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.trade.properties.side@ in the specification.
-- 
-- The side of the market of the order.
--   * B - Buy contract near posted ask price
--   * S - Sell contract near posted bid price
--   * X - Option expired
data TradeSide =
   TradeSideOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | TradeSideTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | TradeSideEnumB -- ^ Represents the JSON value @"B"@
  | TradeSideEnumS -- ^ Represents the JSON value @"S"@
  | TradeSideEnumX -- ^ Represents the JSON value @"X"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TradeSide
    where toJSON (TradeSideOther val) = val
          toJSON (TradeSideTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (TradeSideEnumB) = "B"
          toJSON (TradeSideEnumS) = "S"
          toJSON (TradeSideEnumX) = "X"
instance Data.Aeson.Types.FromJSON.FromJSON TradeSide
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "B" -> TradeSideEnumB
                                            | val GHC.Classes.== "S" -> TradeSideEnumS
                                            | val GHC.Classes.== "X" -> TradeSideEnumX
                                            | GHC.Base.otherwise -> TradeSideOther val)
