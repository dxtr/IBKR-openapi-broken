-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema OrderData
module IBKR.Types.OrderData where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified IBKR.Common
import IBKR.TypeAlias

-- | Defines the object schema located at @components.schemas.order-data@ in the specification.
-- 
-- 
data Order_data = Order_data {
  -- | account: Account number
  order_dataAccount :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | avgPrice: Average fill price
  , order_dataAvgPrice :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | clientOrderId
  , order_dataClientOrderId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | commCurr: Commission currency
  , order_dataCommCurr :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | comms: Commissions
  , order_dataComms :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | conid: Contract identifier from IBKR\'s database.
  , order_dataConid :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | cumQty: Cumulative fill quantity
  , order_dataCumQty :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | currency: Trading currency
  , order_dataCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | exchange: Exchange or venue
  , order_dataExchange :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | execId
  , order_dataExecId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | execType
  , order_dataExecType :: (GHC.Maybe.Maybe Order_dataExecType)
  -- | lastPrice: Price of the last partial fill
  , order_dataLastPrice :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | lastShares: Quantity of the last partial fill
  , order_dataLastShares :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | leavesQty: Remaining quantity to be filled
  , order_dataLeavesQty :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | listingExchange: Listing Exchange
  , order_dataListingExchange :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | orderId: Order identifier
  , order_dataOrderId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | orderQty: Quantity of active order
  , order_dataOrderQty :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | orderStatus
  , order_dataOrderStatus :: (GHC.Maybe.Maybe Order_dataOrderStatus)
  -- | orderType
  , order_dataOrderType :: (GHC.Maybe.Maybe Order_dataOrderType)
  -- | price: Price of active order
  , order_dataPrice :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | rcptTime: Time of receipt in GMT, format YYYYMMDD-hh:mm:ss
  , order_dataRcptTime :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | realizedPnl: Realized PnL
  , order_dataRealizedPnl :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | secType: Contracts asset class
  , order_dataSecType :: (GHC.Maybe.Maybe Order_dataSecType)
  -- | side
  , order_dataSide :: (GHC.Maybe.Maybe Order_dataSide)
  -- | symbol: Underlying symbol for contract
  , order_dataSymbol :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | text: error message
  , order_dataText :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | tif: Time in Force
  , order_dataTif :: (GHC.Maybe.Maybe Order_dataTif)
  -- | txTime: Time of transaction in GMT, format YYYYMMDD-hh:m:ss
  , order_dataTxTime :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | warnings
  , order_dataWarnings :: (GHC.Maybe.Maybe Order_dataWarnings)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Order_data
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (order_dataAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avgPrice" Data.Aeson.Types.ToJSON..=)) (order_dataAvgPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("clientOrderId" Data.Aeson.Types.ToJSON..=)) (order_dataClientOrderId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("commCurr" Data.Aeson.Types.ToJSON..=)) (order_dataCommCurr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("comms" Data.Aeson.Types.ToJSON..=)) (order_dataComms obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conid" Data.Aeson.Types.ToJSON..=)) (order_dataConid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cumQty" Data.Aeson.Types.ToJSON..=)) (order_dataCumQty obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (order_dataCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exchange" Data.Aeson.Types.ToJSON..=)) (order_dataExchange obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execId" Data.Aeson.Types.ToJSON..=)) (order_dataExecId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execType" Data.Aeson.Types.ToJSON..=)) (order_dataExecType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lastPrice" Data.Aeson.Types.ToJSON..=)) (order_dataLastPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lastShares" Data.Aeson.Types.ToJSON..=)) (order_dataLastShares obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("leavesQty" Data.Aeson.Types.ToJSON..=)) (order_dataLeavesQty obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("listingExchange" Data.Aeson.Types.ToJSON..=)) (order_dataListingExchange obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderId" Data.Aeson.Types.ToJSON..=)) (order_dataOrderId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderQty" Data.Aeson.Types.ToJSON..=)) (order_dataOrderQty obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderStatus" Data.Aeson.Types.ToJSON..=)) (order_dataOrderStatus obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderType" Data.Aeson.Types.ToJSON..=)) (order_dataOrderType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("price" Data.Aeson.Types.ToJSON..=)) (order_dataPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("rcptTime" Data.Aeson.Types.ToJSON..=)) (order_dataRcptTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("realizedPnl" Data.Aeson.Types.ToJSON..=)) (order_dataRealizedPnl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("secType" Data.Aeson.Types.ToJSON..=)) (order_dataSecType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("side" Data.Aeson.Types.ToJSON..=)) (order_dataSide obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol" Data.Aeson.Types.ToJSON..=)) (order_dataSymbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("text" Data.Aeson.Types.ToJSON..=)) (order_dataText obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tif" Data.Aeson.Types.ToJSON..=)) (order_dataTif obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("txTime" Data.Aeson.Types.ToJSON..=)) (order_dataTxTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("warnings" Data.Aeson.Types.ToJSON..=)) (order_dataWarnings obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (order_dataAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("avgPrice" Data.Aeson.Types.ToJSON..=)) (order_dataAvgPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("clientOrderId" Data.Aeson.Types.ToJSON..=)) (order_dataClientOrderId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("commCurr" Data.Aeson.Types.ToJSON..=)) (order_dataCommCurr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("comms" Data.Aeson.Types.ToJSON..=)) (order_dataComms obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conid" Data.Aeson.Types.ToJSON..=)) (order_dataConid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cumQty" Data.Aeson.Types.ToJSON..=)) (order_dataCumQty obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (order_dataCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exchange" Data.Aeson.Types.ToJSON..=)) (order_dataExchange obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execId" Data.Aeson.Types.ToJSON..=)) (order_dataExecId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execType" Data.Aeson.Types.ToJSON..=)) (order_dataExecType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lastPrice" Data.Aeson.Types.ToJSON..=)) (order_dataLastPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lastShares" Data.Aeson.Types.ToJSON..=)) (order_dataLastShares obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("leavesQty" Data.Aeson.Types.ToJSON..=)) (order_dataLeavesQty obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("listingExchange" Data.Aeson.Types.ToJSON..=)) (order_dataListingExchange obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderId" Data.Aeson.Types.ToJSON..=)) (order_dataOrderId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderQty" Data.Aeson.Types.ToJSON..=)) (order_dataOrderQty obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderStatus" Data.Aeson.Types.ToJSON..=)) (order_dataOrderStatus obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderType" Data.Aeson.Types.ToJSON..=)) (order_dataOrderType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("price" Data.Aeson.Types.ToJSON..=)) (order_dataPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("rcptTime" Data.Aeson.Types.ToJSON..=)) (order_dataRcptTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("realizedPnl" Data.Aeson.Types.ToJSON..=)) (order_dataRealizedPnl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("secType" Data.Aeson.Types.ToJSON..=)) (order_dataSecType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("side" Data.Aeson.Types.ToJSON..=)) (order_dataSide obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol" Data.Aeson.Types.ToJSON..=)) (order_dataSymbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("text" Data.Aeson.Types.ToJSON..=)) (order_dataText obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tif" Data.Aeson.Types.ToJSON..=)) (order_dataTif obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("txTime" Data.Aeson.Types.ToJSON..=)) (order_dataTxTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("warnings" Data.Aeson.Types.ToJSON..=)) (order_dataWarnings obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Order_data
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Order_data" (\obj -> ((((((((((((((((((((((((((((GHC.Base.pure Order_data GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "avgPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "clientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "commCurr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "comms")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "conid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cumQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exchange")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "execId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "execType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "lastPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "lastShares")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "leavesQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "listingExchange")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "orderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "orderQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "orderStatus")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "orderType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "rcptTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "realizedPnl")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "secType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "side")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "text")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tif")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "txTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "warnings"))
-- | Create a new 'Order_data' with all required fields.
mkOrder_data :: Order_data
mkOrder_data = Order_data{order_dataAccount = GHC.Maybe.Nothing,
                          order_dataAvgPrice = GHC.Maybe.Nothing,
                          order_dataClientOrderId = GHC.Maybe.Nothing,
                          order_dataCommCurr = GHC.Maybe.Nothing,
                          order_dataComms = GHC.Maybe.Nothing,
                          order_dataConid = GHC.Maybe.Nothing,
                          order_dataCumQty = GHC.Maybe.Nothing,
                          order_dataCurrency = GHC.Maybe.Nothing,
                          order_dataExchange = GHC.Maybe.Nothing,
                          order_dataExecId = GHC.Maybe.Nothing,
                          order_dataExecType = GHC.Maybe.Nothing,
                          order_dataLastPrice = GHC.Maybe.Nothing,
                          order_dataLastShares = GHC.Maybe.Nothing,
                          order_dataLeavesQty = GHC.Maybe.Nothing,
                          order_dataListingExchange = GHC.Maybe.Nothing,
                          order_dataOrderId = GHC.Maybe.Nothing,
                          order_dataOrderQty = GHC.Maybe.Nothing,
                          order_dataOrderStatus = GHC.Maybe.Nothing,
                          order_dataOrderType = GHC.Maybe.Nothing,
                          order_dataPrice = GHC.Maybe.Nothing,
                          order_dataRcptTime = GHC.Maybe.Nothing,
                          order_dataRealizedPnl = GHC.Maybe.Nothing,
                          order_dataSecType = GHC.Maybe.Nothing,
                          order_dataSide = GHC.Maybe.Nothing,
                          order_dataSymbol = GHC.Maybe.Nothing,
                          order_dataText = GHC.Maybe.Nothing,
                          order_dataTif = GHC.Maybe.Nothing,
                          order_dataTxTime = GHC.Maybe.Nothing,
                          order_dataWarnings = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.order-data.properties.execType@ in the specification.
-- 
-- 
data Order_dataExecType =
   Order_dataExecTypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Order_dataExecTypeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Order_dataExecTypeEnum_1__Invalid_ -- ^ Represents the JSON value @"-1 \"Invalid\""@
  | Order_dataExecTypeEnum0__New_ -- ^ Represents the JSON value @"0 \"New\""@
  | Order_dataExecTypeEnum1__Partially_Filled_ -- ^ Represents the JSON value @"1 \"Partially Filled\""@
  | Order_dataExecTypeEnum2__Filled_ -- ^ Represents the JSON value @"2 \"Filled\""@
  | Order_dataExecTypeEnum3__Done_for_the_Day_ -- ^ Represents the JSON value @"3 \"Done for the Day\""@
  | Order_dataExecTypeEnum4__Canceled_ -- ^ Represents the JSON value @"4 \"Canceled\""@
  | Order_dataExecTypeEnum5__Replaced_ -- ^ Represents the JSON value @"5 \"Replaced\""@
  | Order_dataExecTypeEnum6__Pending_Cancel_ -- ^ Represents the JSON value @"6 \"Pending Cancel\""@
  | Order_dataExecTypeEnum7__Stopped_ -- ^ Represents the JSON value @"7 \"Stopped\""@
  | Order_dataExecTypeEnum8__Rejected_ -- ^ Represents the JSON value @"8 \"Rejected\""@
  | Order_dataExecTypeEnum9__Suspended_ -- ^ Represents the JSON value @"9 \"Suspended\""@
  | Order_dataExecTypeEnumA__Pending_New_ -- ^ Represents the JSON value @"A \"Pending New\""@
  | Order_dataExecTypeEnumB__Calculated_ -- ^ Represents the JSON value @"B \"Calculated\""@
  | Order_dataExecTypeEnumC__Expired_ -- ^ Represents the JSON value @"C \"Expired\""@
  | Order_dataExecTypeEnumD__Restated_ -- ^ Represents the JSON value @"D \"Restated\""@
  | Order_dataExecTypeEnumE__Pending_Replace_ -- ^ Represents the JSON value @"E \"Pending Replace\""@
  | Order_dataExecTypeEnumF__Trade_ -- ^ Represents the JSON value @"F \"Trade\""@
  | Order_dataExecTypeEnumG__Trade_Correct_ -- ^ Represents the JSON value @"G \"Trade Correct\""@
  | Order_dataExecTypeEnumH__Trade_Cancel_ -- ^ Represents the JSON value @"H \"Trade Cancel\""@
  | Order_dataExecTypeEnumI__Order_Status_ -- ^ Represents the JSON value @"I \"Order Status\""@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Order_dataExecType
    where toJSON (Order_dataExecTypeOther val) = val
          toJSON (Order_dataExecTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (Order_dataExecTypeEnum_1__Invalid_) = "-1 \"Invalid\""
          toJSON (Order_dataExecTypeEnum0__New_) = "0 \"New\""
          toJSON (Order_dataExecTypeEnum1__Partially_Filled_) = "1 \"Partially Filled\""
          toJSON (Order_dataExecTypeEnum2__Filled_) = "2 \"Filled\""
          toJSON (Order_dataExecTypeEnum3__Done_for_the_Day_) = "3 \"Done for the Day\""
          toJSON (Order_dataExecTypeEnum4__Canceled_) = "4 \"Canceled\""
          toJSON (Order_dataExecTypeEnum5__Replaced_) = "5 \"Replaced\""
          toJSON (Order_dataExecTypeEnum6__Pending_Cancel_) = "6 \"Pending Cancel\""
          toJSON (Order_dataExecTypeEnum7__Stopped_) = "7 \"Stopped\""
          toJSON (Order_dataExecTypeEnum8__Rejected_) = "8 \"Rejected\""
          toJSON (Order_dataExecTypeEnum9__Suspended_) = "9 \"Suspended\""
          toJSON (Order_dataExecTypeEnumA__Pending_New_) = "A \"Pending New\""
          toJSON (Order_dataExecTypeEnumB__Calculated_) = "B \"Calculated\""
          toJSON (Order_dataExecTypeEnumC__Expired_) = "C \"Expired\""
          toJSON (Order_dataExecTypeEnumD__Restated_) = "D \"Restated\""
          toJSON (Order_dataExecTypeEnumE__Pending_Replace_) = "E \"Pending Replace\""
          toJSON (Order_dataExecTypeEnumF__Trade_) = "F \"Trade\""
          toJSON (Order_dataExecTypeEnumG__Trade_Correct_) = "G \"Trade Correct\""
          toJSON (Order_dataExecTypeEnumH__Trade_Cancel_) = "H \"Trade Cancel\""
          toJSON (Order_dataExecTypeEnumI__Order_Status_) = "I \"Order Status\""
instance Data.Aeson.Types.FromJSON.FromJSON Order_dataExecType
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "-1 \"Invalid\"" -> Order_dataExecTypeEnum_1__Invalid_
                                            | val GHC.Classes.== "0 \"New\"" -> Order_dataExecTypeEnum0__New_
                                            | val GHC.Classes.== "1 \"Partially Filled\"" -> Order_dataExecTypeEnum1__Partially_Filled_
                                            | val GHC.Classes.== "2 \"Filled\"" -> Order_dataExecTypeEnum2__Filled_
                                            | val GHC.Classes.== "3 \"Done for the Day\"" -> Order_dataExecTypeEnum3__Done_for_the_Day_
                                            | val GHC.Classes.== "4 \"Canceled\"" -> Order_dataExecTypeEnum4__Canceled_
                                            | val GHC.Classes.== "5 \"Replaced\"" -> Order_dataExecTypeEnum5__Replaced_
                                            | val GHC.Classes.== "6 \"Pending Cancel\"" -> Order_dataExecTypeEnum6__Pending_Cancel_
                                            | val GHC.Classes.== "7 \"Stopped\"" -> Order_dataExecTypeEnum7__Stopped_
                                            | val GHC.Classes.== "8 \"Rejected\"" -> Order_dataExecTypeEnum8__Rejected_
                                            | val GHC.Classes.== "9 \"Suspended\"" -> Order_dataExecTypeEnum9__Suspended_
                                            | val GHC.Classes.== "A \"Pending New\"" -> Order_dataExecTypeEnumA__Pending_New_
                                            | val GHC.Classes.== "B \"Calculated\"" -> Order_dataExecTypeEnumB__Calculated_
                                            | val GHC.Classes.== "C \"Expired\"" -> Order_dataExecTypeEnumC__Expired_
                                            | val GHC.Classes.== "D \"Restated\"" -> Order_dataExecTypeEnumD__Restated_
                                            | val GHC.Classes.== "E \"Pending Replace\"" -> Order_dataExecTypeEnumE__Pending_Replace_
                                            | val GHC.Classes.== "F \"Trade\"" -> Order_dataExecTypeEnumF__Trade_
                                            | val GHC.Classes.== "G \"Trade Correct\"" -> Order_dataExecTypeEnumG__Trade_Correct_
                                            | val GHC.Classes.== "H \"Trade Cancel\"" -> Order_dataExecTypeEnumH__Trade_Cancel_
                                            | val GHC.Classes.== "I \"Order Status\"" -> Order_dataExecTypeEnumI__Order_Status_
                                            | GHC.Base.otherwise -> Order_dataExecTypeOther val)
-- | Defines the enum schema located at @components.schemas.order-data.properties.orderStatus@ in the specification.
-- 
-- 
data Order_dataOrderStatus =
   Order_dataOrderStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Order_dataOrderStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Order_dataOrderStatusEnum_1__Invalid_Order_Status_ -- ^ Represents the JSON value @"-1 \"Invalid Order Status\""@
  | Order_dataOrderStatusEnum0__New_ -- ^ Represents the JSON value @"0 \"New\""@
  | Order_dataOrderStatusEnum1__Partially_Filled_ -- ^ Represents the JSON value @"1 \"Partially Filled\""@
  | Order_dataOrderStatusEnum2__Filled_ -- ^ Represents the JSON value @"2 \"Filled\""@
  | Order_dataOrderStatusEnum3__Done_for_the_Day_ -- ^ Represents the JSON value @"3 \"Done for the Day\""@
  | Order_dataOrderStatusEnum4__Canceled_ -- ^ Represents the JSON value @"4 \"Canceled\""@
  | Order_dataOrderStatusEnum5__Replaced_ -- ^ Represents the JSON value @"5 \"Replaced\""@
  | Order_dataOrderStatusEnum6__Pending_Cancel_ -- ^ Represents the JSON value @"6 \"Pending Cancel\""@
  | Order_dataOrderStatusEnum7__Stopped_ -- ^ Represents the JSON value @"7 \"Stopped\""@
  | Order_dataOrderStatusEnum8__Rejected_ -- ^ Represents the JSON value @"8 \"Rejected\""@
  | Order_dataOrderStatusEnum9__Suspended_ -- ^ Represents the JSON value @"9 \"Suspended\""@
  | Order_dataOrderStatusEnumA__Pending_New_ -- ^ Represents the JSON value @"A \"Pending New\""@
  | Order_dataOrderStatusEnumB__Calculated_ -- ^ Represents the JSON value @"B \"Calculated\""@
  | Order_dataOrderStatusEnumC__Expired_ -- ^ Represents the JSON value @"C \"Expired\""@
  | Order_dataOrderStatusEnumD__Restated_ -- ^ Represents the JSON value @"D \"Restated\""@
  | Order_dataOrderStatusEnumE__Pending_Replace_ -- ^ Represents the JSON value @"E \"Pending Replace\""@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Order_dataOrderStatus
    where toJSON (Order_dataOrderStatusOther val) = val
          toJSON (Order_dataOrderStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (Order_dataOrderStatusEnum_1__Invalid_Order_Status_) = "-1 \"Invalid Order Status\""
          toJSON (Order_dataOrderStatusEnum0__New_) = "0 \"New\""
          toJSON (Order_dataOrderStatusEnum1__Partially_Filled_) = "1 \"Partially Filled\""
          toJSON (Order_dataOrderStatusEnum2__Filled_) = "2 \"Filled\""
          toJSON (Order_dataOrderStatusEnum3__Done_for_the_Day_) = "3 \"Done for the Day\""
          toJSON (Order_dataOrderStatusEnum4__Canceled_) = "4 \"Canceled\""
          toJSON (Order_dataOrderStatusEnum5__Replaced_) = "5 \"Replaced\""
          toJSON (Order_dataOrderStatusEnum6__Pending_Cancel_) = "6 \"Pending Cancel\""
          toJSON (Order_dataOrderStatusEnum7__Stopped_) = "7 \"Stopped\""
          toJSON (Order_dataOrderStatusEnum8__Rejected_) = "8 \"Rejected\""
          toJSON (Order_dataOrderStatusEnum9__Suspended_) = "9 \"Suspended\""
          toJSON (Order_dataOrderStatusEnumA__Pending_New_) = "A \"Pending New\""
          toJSON (Order_dataOrderStatusEnumB__Calculated_) = "B \"Calculated\""
          toJSON (Order_dataOrderStatusEnumC__Expired_) = "C \"Expired\""
          toJSON (Order_dataOrderStatusEnumD__Restated_) = "D \"Restated\""
          toJSON (Order_dataOrderStatusEnumE__Pending_Replace_) = "E \"Pending Replace\""
instance Data.Aeson.Types.FromJSON.FromJSON Order_dataOrderStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "-1 \"Invalid Order Status\"" -> Order_dataOrderStatusEnum_1__Invalid_Order_Status_
                                            | val GHC.Classes.== "0 \"New\"" -> Order_dataOrderStatusEnum0__New_
                                            | val GHC.Classes.== "1 \"Partially Filled\"" -> Order_dataOrderStatusEnum1__Partially_Filled_
                                            | val GHC.Classes.== "2 \"Filled\"" -> Order_dataOrderStatusEnum2__Filled_
                                            | val GHC.Classes.== "3 \"Done for the Day\"" -> Order_dataOrderStatusEnum3__Done_for_the_Day_
                                            | val GHC.Classes.== "4 \"Canceled\"" -> Order_dataOrderStatusEnum4__Canceled_
                                            | val GHC.Classes.== "5 \"Replaced\"" -> Order_dataOrderStatusEnum5__Replaced_
                                            | val GHC.Classes.== "6 \"Pending Cancel\"" -> Order_dataOrderStatusEnum6__Pending_Cancel_
                                            | val GHC.Classes.== "7 \"Stopped\"" -> Order_dataOrderStatusEnum7__Stopped_
                                            | val GHC.Classes.== "8 \"Rejected\"" -> Order_dataOrderStatusEnum8__Rejected_
                                            | val GHC.Classes.== "9 \"Suspended\"" -> Order_dataOrderStatusEnum9__Suspended_
                                            | val GHC.Classes.== "A \"Pending New\"" -> Order_dataOrderStatusEnumA__Pending_New_
                                            | val GHC.Classes.== "B \"Calculated\"" -> Order_dataOrderStatusEnumB__Calculated_
                                            | val GHC.Classes.== "C \"Expired\"" -> Order_dataOrderStatusEnumC__Expired_
                                            | val GHC.Classes.== "D \"Restated\"" -> Order_dataOrderStatusEnumD__Restated_
                                            | val GHC.Classes.== "E \"Pending Replace\"" -> Order_dataOrderStatusEnumE__Pending_Replace_
                                            | GHC.Base.otherwise -> Order_dataOrderStatusOther val)
-- | Defines the enum schema located at @components.schemas.order-data.properties.orderType@ in the specification.
-- 
-- 
data Order_dataOrderType =
   Order_dataOrderTypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Order_dataOrderTypeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Order_dataOrderTypeEnum1__Market_ -- ^ Represents the JSON value @"1 \"Market\""@
  | Order_dataOrderTypeEnum2__Limit_ -- ^ Represents the JSON value @"2 \"Limit\""@
  | Order_dataOrderTypeEnum3__Stop_ -- ^ Represents the JSON value @"3 \"Stop\""@
  | Order_dataOrderTypeEnum4__Stop_Limit_ -- ^ Represents the JSON value @"4 \"Stop Limit\""@
  | Order_dataOrderTypeEnum5__Market_on_Close_ -- ^ Represents the JSON value @"5 \"Market on Close\""@
  | Order_dataOrderTypeEnum6__With_or_Without_ -- ^ Represents the JSON value @"6 \"With or Without\""@
  | Order_dataOrderTypeEnum7__Limit_or_Better_ -- ^ Represents the JSON value @"7 \"Limit or Better\""@
  | Order_dataOrderTypeEnum8__Limit_With_or_Without_ -- ^ Represents the JSON value @"8 \"Limit With or Without\""@
  | Order_dataOrderTypeEnum9__On_Basis_ -- ^ Represents the JSON value @"9 \"On Basis\""@
  | Order_dataOrderTypeEnumA__On_Close_ -- ^ Represents the JSON value @"A \"On Close\""@
  | Order_dataOrderTypeEnumB__Limit_On_Close_ -- ^ Represents the JSON value @"B \"Limit On Close\""@
  | Order_dataOrderTypeEnumC__Forex_Market_ -- ^ Represents the JSON value @"C \"Forex Market\""@
  | Order_dataOrderTypeEnumD__Previously_Quoted_ -- ^ Represents the JSON value @"D \"Previously Quoted\""@
  | Order_dataOrderTypeEnumE__Previously_Indicated_ -- ^ Represents the JSON value @"E \"Previously Indicated\""@
  | Order_dataOrderTypeEnumF__Forex_Limit_ -- ^ Represents the JSON value @"F \"Forex Limit\""@
  | Order_dataOrderTypeEnumG__Forex_Swap_ -- ^ Represents the JSON value @"G \"Forex Swap\""@
  | Order_dataOrderTypeEnumH__Forex_Previously_Quoted_ -- ^ Represents the JSON value @"H \"Forex Previously Quoted\""@
  | Order_dataOrderTypeEnumI__Funari_ -- ^ Represents the JSON value @"I \"Funari\""@
  | Order_dataOrderTypeEnumK__Market_To_Limit_ -- ^ Represents the JSON value @"K \"Market To Limit\""@
  | Order_dataOrderTypeEnumP__Pegged_ -- ^ Represents the JSON value @"P \"Pegged\""@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Order_dataOrderType
    where toJSON (Order_dataOrderTypeOther val) = val
          toJSON (Order_dataOrderTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (Order_dataOrderTypeEnum1__Market_) = "1 \"Market\""
          toJSON (Order_dataOrderTypeEnum2__Limit_) = "2 \"Limit\""
          toJSON (Order_dataOrderTypeEnum3__Stop_) = "3 \"Stop\""
          toJSON (Order_dataOrderTypeEnum4__Stop_Limit_) = "4 \"Stop Limit\""
          toJSON (Order_dataOrderTypeEnum5__Market_on_Close_) = "5 \"Market on Close\""
          toJSON (Order_dataOrderTypeEnum6__With_or_Without_) = "6 \"With or Without\""
          toJSON (Order_dataOrderTypeEnum7__Limit_or_Better_) = "7 \"Limit or Better\""
          toJSON (Order_dataOrderTypeEnum8__Limit_With_or_Without_) = "8 \"Limit With or Without\""
          toJSON (Order_dataOrderTypeEnum9__On_Basis_) = "9 \"On Basis\""
          toJSON (Order_dataOrderTypeEnumA__On_Close_) = "A \"On Close\""
          toJSON (Order_dataOrderTypeEnumB__Limit_On_Close_) = "B \"Limit On Close\""
          toJSON (Order_dataOrderTypeEnumC__Forex_Market_) = "C \"Forex Market\""
          toJSON (Order_dataOrderTypeEnumD__Previously_Quoted_) = "D \"Previously Quoted\""
          toJSON (Order_dataOrderTypeEnumE__Previously_Indicated_) = "E \"Previously Indicated\""
          toJSON (Order_dataOrderTypeEnumF__Forex_Limit_) = "F \"Forex Limit\""
          toJSON (Order_dataOrderTypeEnumG__Forex_Swap_) = "G \"Forex Swap\""
          toJSON (Order_dataOrderTypeEnumH__Forex_Previously_Quoted_) = "H \"Forex Previously Quoted\""
          toJSON (Order_dataOrderTypeEnumI__Funari_) = "I \"Funari\""
          toJSON (Order_dataOrderTypeEnumK__Market_To_Limit_) = "K \"Market To Limit\""
          toJSON (Order_dataOrderTypeEnumP__Pegged_) = "P \"Pegged\""
instance Data.Aeson.Types.FromJSON.FromJSON Order_dataOrderType
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "1 \"Market\"" -> Order_dataOrderTypeEnum1__Market_
                                            | val GHC.Classes.== "2 \"Limit\"" -> Order_dataOrderTypeEnum2__Limit_
                                            | val GHC.Classes.== "3 \"Stop\"" -> Order_dataOrderTypeEnum3__Stop_
                                            | val GHC.Classes.== "4 \"Stop Limit\"" -> Order_dataOrderTypeEnum4__Stop_Limit_
                                            | val GHC.Classes.== "5 \"Market on Close\"" -> Order_dataOrderTypeEnum5__Market_on_Close_
                                            | val GHC.Classes.== "6 \"With or Without\"" -> Order_dataOrderTypeEnum6__With_or_Without_
                                            | val GHC.Classes.== "7 \"Limit or Better\"" -> Order_dataOrderTypeEnum7__Limit_or_Better_
                                            | val GHC.Classes.== "8 \"Limit With or Without\"" -> Order_dataOrderTypeEnum8__Limit_With_or_Without_
                                            | val GHC.Classes.== "9 \"On Basis\"" -> Order_dataOrderTypeEnum9__On_Basis_
                                            | val GHC.Classes.== "A \"On Close\"" -> Order_dataOrderTypeEnumA__On_Close_
                                            | val GHC.Classes.== "B \"Limit On Close\"" -> Order_dataOrderTypeEnumB__Limit_On_Close_
                                            | val GHC.Classes.== "C \"Forex Market\"" -> Order_dataOrderTypeEnumC__Forex_Market_
                                            | val GHC.Classes.== "D \"Previously Quoted\"" -> Order_dataOrderTypeEnumD__Previously_Quoted_
                                            | val GHC.Classes.== "E \"Previously Indicated\"" -> Order_dataOrderTypeEnumE__Previously_Indicated_
                                            | val GHC.Classes.== "F \"Forex Limit\"" -> Order_dataOrderTypeEnumF__Forex_Limit_
                                            | val GHC.Classes.== "G \"Forex Swap\"" -> Order_dataOrderTypeEnumG__Forex_Swap_
                                            | val GHC.Classes.== "H \"Forex Previously Quoted\"" -> Order_dataOrderTypeEnumH__Forex_Previously_Quoted_
                                            | val GHC.Classes.== "I \"Funari\"" -> Order_dataOrderTypeEnumI__Funari_
                                            | val GHC.Classes.== "K \"Market To Limit\"" -> Order_dataOrderTypeEnumK__Market_To_Limit_
                                            | val GHC.Classes.== "P \"Pegged\"" -> Order_dataOrderTypeEnumP__Pegged_
                                            | GHC.Base.otherwise -> Order_dataOrderTypeOther val)
-- | Defines the enum schema located at @components.schemas.order-data.properties.secType@ in the specification.
-- 
-- Contracts asset class
data Order_dataSecType =
   Order_dataSecTypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Order_dataSecTypeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Order_dataSecTypeEnumCS__Stock_ -- ^ Represents the JSON value @"CS \"Stock\""@
  | Order_dataSecTypeEnumCASH__Forex_ -- ^ Represents the JSON value @"CASH \"Forex\""@
  | Order_dataSecTypeEnumCFD__Contract_for_Difference_ -- ^ Represents the JSON value @"CFD \"Contract for Difference\""@
  | Order_dataSecTypeEnumFUT__Future_ -- ^ Represents the JSON value @"FUT \"Future\""@
  | Order_dataSecTypeEnumOPT__Option_ -- ^ Represents the JSON value @"OPT \"Option\""@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Order_dataSecType
    where toJSON (Order_dataSecTypeOther val) = val
          toJSON (Order_dataSecTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (Order_dataSecTypeEnumCS__Stock_) = "CS \"Stock\""
          toJSON (Order_dataSecTypeEnumCASH__Forex_) = "CASH \"Forex\""
          toJSON (Order_dataSecTypeEnumCFD__Contract_for_Difference_) = "CFD \"Contract for Difference\""
          toJSON (Order_dataSecTypeEnumFUT__Future_) = "FUT \"Future\""
          toJSON (Order_dataSecTypeEnumOPT__Option_) = "OPT \"Option\""
instance Data.Aeson.Types.FromJSON.FromJSON Order_dataSecType
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "CS \"Stock\"" -> Order_dataSecTypeEnumCS__Stock_
                                            | val GHC.Classes.== "CASH \"Forex\"" -> Order_dataSecTypeEnumCASH__Forex_
                                            | val GHC.Classes.== "CFD \"Contract for Difference\"" -> Order_dataSecTypeEnumCFD__Contract_for_Difference_
                                            | val GHC.Classes.== "FUT \"Future\"" -> Order_dataSecTypeEnumFUT__Future_
                                            | val GHC.Classes.== "OPT \"Option\"" -> Order_dataSecTypeEnumOPT__Option_
                                            | GHC.Base.otherwise -> Order_dataSecTypeOther val)
-- | Defines the enum schema located at @components.schemas.order-data.properties.side@ in the specification.
-- 
-- 
data Order_dataSide =
   Order_dataSideOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Order_dataSideTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Order_dataSideEnum1__Buy_ -- ^ Represents the JSON value @"1 \"Buy\""@
  | Order_dataSideEnum2__Sell_ -- ^ Represents the JSON value @"2 \"Sell\""@
  | Order_dataSideEnum3__Buy_Minus_ -- ^ Represents the JSON value @"3 \"Buy Minus\""@
  | Order_dataSideEnum4__Sell_Plus_ -- ^ Represents the JSON value @"4 \"Sell Plus\""@
  | Order_dataSideEnum5__Sell_Short_ -- ^ Represents the JSON value @"5 \"Sell Short\""@
  | Order_dataSideEnum6__Sell_Short_Exempt_ -- ^ Represents the JSON value @"6 \"Sell Short Exempt\""@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Order_dataSide
    where toJSON (Order_dataSideOther val) = val
          toJSON (Order_dataSideTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (Order_dataSideEnum1__Buy_) = "1 \"Buy\""
          toJSON (Order_dataSideEnum2__Sell_) = "2 \"Sell\""
          toJSON (Order_dataSideEnum3__Buy_Minus_) = "3 \"Buy Minus\""
          toJSON (Order_dataSideEnum4__Sell_Plus_) = "4 \"Sell Plus\""
          toJSON (Order_dataSideEnum5__Sell_Short_) = "5 \"Sell Short\""
          toJSON (Order_dataSideEnum6__Sell_Short_Exempt_) = "6 \"Sell Short Exempt\""
instance Data.Aeson.Types.FromJSON.FromJSON Order_dataSide
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "1 \"Buy\"" -> Order_dataSideEnum1__Buy_
                                            | val GHC.Classes.== "2 \"Sell\"" -> Order_dataSideEnum2__Sell_
                                            | val GHC.Classes.== "3 \"Buy Minus\"" -> Order_dataSideEnum3__Buy_Minus_
                                            | val GHC.Classes.== "4 \"Sell Plus\"" -> Order_dataSideEnum4__Sell_Plus_
                                            | val GHC.Classes.== "5 \"Sell Short\"" -> Order_dataSideEnum5__Sell_Short_
                                            | val GHC.Classes.== "6 \"Sell Short Exempt\"" -> Order_dataSideEnum6__Sell_Short_Exempt_
                                            | GHC.Base.otherwise -> Order_dataSideOther val)
-- | Defines the enum schema located at @components.schemas.order-data.properties.tif@ in the specification.
-- 
-- Time in Force
data Order_dataTif =
   Order_dataTifOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Order_dataTifTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Order_dataTifEnum0__Day_ -- ^ Represents the JSON value @"0 \"Day\""@
  | Order_dataTifEnum1__GTC_ -- ^ Represents the JSON value @"1 \"GTC\""@
  | Order_dataTifEnum2__At_the_Opening_ -- ^ Represents the JSON value @"2 \"At the Opening\""@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Order_dataTif
    where toJSON (Order_dataTifOther val) = val
          toJSON (Order_dataTifTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (Order_dataTifEnum0__Day_) = "0 \"Day\""
          toJSON (Order_dataTifEnum1__GTC_) = "1 \"GTC\""
          toJSON (Order_dataTifEnum2__At_the_Opening_) = "2 \"At the Opening\""
instance Data.Aeson.Types.FromJSON.FromJSON Order_dataTif
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "0 \"Day\"" -> Order_dataTifEnum0__Day_
                                            | val GHC.Classes.== "1 \"GTC\"" -> Order_dataTifEnum1__GTC_
                                            | val GHC.Classes.== "2 \"At the Opening\"" -> Order_dataTifEnum2__At_the_Opening_
                                            | GHC.Base.otherwise -> Order_dataTifOther val)
-- | Defines the object schema located at @components.schemas.order-data.properties.warnings@ in the specification.
-- 
-- 
data Order_dataWarnings = Order_dataWarnings {
  -- | PRICECAP
  order_dataWarningsPRICECAP :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | TIME
  , order_dataWarningsTIME :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Order_dataWarnings
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("PRICECAP" Data.Aeson.Types.ToJSON..=)) (order_dataWarningsPRICECAP obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("TIME" Data.Aeson.Types.ToJSON..=)) (order_dataWarningsTIME obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("PRICECAP" Data.Aeson.Types.ToJSON..=)) (order_dataWarningsPRICECAP obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("TIME" Data.Aeson.Types.ToJSON..=)) (order_dataWarningsTIME obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Order_dataWarnings
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Order_dataWarnings" (\obj -> (GHC.Base.pure Order_dataWarnings GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "PRICECAP")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "TIME"))
-- | Create a new 'Order_dataWarnings' with all required fields.
mkOrder_dataWarnings :: Order_dataWarnings
mkOrder_dataWarnings = Order_dataWarnings{order_dataWarningsPRICECAP = GHC.Maybe.Nothing,
                                          order_dataWarningsTIME = GHC.Maybe.Nothing}
