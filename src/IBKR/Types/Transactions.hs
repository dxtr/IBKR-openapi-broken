-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Transactions
module IBKR.Types.Transactions where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified IBKR.Common
import IBKR.TypeAlias

-- | Defines the object schema located at @components.schemas.transactions@ in the specification.
-- 
-- account transactions
data Transactions = Transactions {
  -- | currency: same as request
  transactionsCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | from: Period start date. Epoch time, GMT
  , transactionsFrom :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | id: will always be getTransactions
  , transactionsId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | includesRealTime: Indicates whether current day and realtime data is included in the result
  , transactionsIncludesRealTime :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | to: Period end date. Epoch time, GMT
  , transactionsTo :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | transactions: Sorted by date descending
  , transactionsTransactions :: (GHC.Maybe.Maybe ([TransactionsTransactions]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Transactions
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (transactionsCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("from" Data.Aeson.Types.ToJSON..=)) (transactionsFrom obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (transactionsId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("includesRealTime" Data.Aeson.Types.ToJSON..=)) (transactionsIncludesRealTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("to" Data.Aeson.Types.ToJSON..=)) (transactionsTo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transactions" Data.Aeson.Types.ToJSON..=)) (transactionsTransactions obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (transactionsCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("from" Data.Aeson.Types.ToJSON..=)) (transactionsFrom obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (transactionsId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("includesRealTime" Data.Aeson.Types.ToJSON..=)) (transactionsIncludesRealTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("to" Data.Aeson.Types.ToJSON..=)) (transactionsTo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transactions" Data.Aeson.Types.ToJSON..=)) (transactionsTransactions obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Transactions
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Transactions" (\obj -> (((((GHC.Base.pure Transactions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "from")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "includesRealTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "to")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transactions"))
-- | Create a new 'Transactions' with all required fields.
mkTransactions :: Transactions
mkTransactions = Transactions{transactionsCurrency = GHC.Maybe.Nothing,
                              transactionsFrom = GHC.Maybe.Nothing,
                              transactionsId = GHC.Maybe.Nothing,
                              transactionsIncludesRealTime = GHC.Maybe.Nothing,
                              transactionsTo = GHC.Maybe.Nothing,
                              transactionsTransactions = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.transactions.properties.transactions.items@ in the specification.
-- 
-- 
data TransactionsTransactions = TransactionsTransactions {
  -- | acctid
  transactionsTransactionsAcctid :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | amt: Raw value, no formatting. Transaction amount. For trades does not include commission.
  -- In asset currency
  , transactionsTransactionsAmt :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | conid
  , transactionsTransactionsConid :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | cur: currency code
  , transactionsTransactionsCur :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | date: Date of transaction.  Epoch time, GMT
  , transactionsTransactionsDate :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | desc: Transaction description
  , transactionsTransactionsDesc :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | fxRate: Conversion rate from asset currency to response currency
  , transactionsTransactionsFxRate :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | pr: In asset currency. Not be applicable for all transaction types.
  , transactionsTransactionsPr :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | qty: Not applicable for all transaction types
  , transactionsTransactionsQty :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | type: Transaction Type Name: Examples: \"Sell\", \"Buy\", \"Corporate Action\",
  -- \"Dividend Payment\", \"Transfer\", \"Payment in Lieu\"
  -- Dividends and Transfers do not have price and quantity in response
  , transactionsTransactionsType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TransactionsTransactions
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acctid" Data.Aeson.Types.ToJSON..=)) (transactionsTransactionsAcctid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amt" Data.Aeson.Types.ToJSON..=)) (transactionsTransactionsAmt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conid" Data.Aeson.Types.ToJSON..=)) (transactionsTransactionsConid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cur" Data.Aeson.Types.ToJSON..=)) (transactionsTransactionsCur obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("date" Data.Aeson.Types.ToJSON..=)) (transactionsTransactionsDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("desc" Data.Aeson.Types.ToJSON..=)) (transactionsTransactionsDesc obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fxRate" Data.Aeson.Types.ToJSON..=)) (transactionsTransactionsFxRate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pr" Data.Aeson.Types.ToJSON..=)) (transactionsTransactionsPr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("qty" Data.Aeson.Types.ToJSON..=)) (transactionsTransactionsQty obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (transactionsTransactionsType obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acctid" Data.Aeson.Types.ToJSON..=)) (transactionsTransactionsAcctid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amt" Data.Aeson.Types.ToJSON..=)) (transactionsTransactionsAmt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conid" Data.Aeson.Types.ToJSON..=)) (transactionsTransactionsConid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cur" Data.Aeson.Types.ToJSON..=)) (transactionsTransactionsCur obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("date" Data.Aeson.Types.ToJSON..=)) (transactionsTransactionsDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("desc" Data.Aeson.Types.ToJSON..=)) (transactionsTransactionsDesc obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fxRate" Data.Aeson.Types.ToJSON..=)) (transactionsTransactionsFxRate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pr" Data.Aeson.Types.ToJSON..=)) (transactionsTransactionsPr obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("qty" Data.Aeson.Types.ToJSON..=)) (transactionsTransactionsQty obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (transactionsTransactionsType obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON TransactionsTransactions
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TransactionsTransactions" (\obj -> (((((((((GHC.Base.pure TransactionsTransactions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "acctid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "conid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cur")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "desc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fxRate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "qty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))
-- | Create a new 'TransactionsTransactions' with all required fields.
mkTransactionsTransactions :: TransactionsTransactions
mkTransactionsTransactions = TransactionsTransactions{transactionsTransactionsAcctid = GHC.Maybe.Nothing,
                                                      transactionsTransactionsAmt = GHC.Maybe.Nothing,
                                                      transactionsTransactionsConid = GHC.Maybe.Nothing,
                                                      transactionsTransactionsCur = GHC.Maybe.Nothing,
                                                      transactionsTransactionsDate = GHC.Maybe.Nothing,
                                                      transactionsTransactionsDesc = GHC.Maybe.Nothing,
                                                      transactionsTransactionsFxRate = GHC.Maybe.Nothing,
                                                      transactionsTransactionsPr = GHC.Maybe.Nothing,
                                                      transactionsTransactionsQty = GHC.Maybe.Nothing,
                                                      transactionsTransactionsType = GHC.Maybe.Nothing}
