-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Contract
module IBKR.Types.Contract where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified IBKR.Common
import IBKR.TypeAlias

-- | Defines the object schema located at @components.schemas.contract@ in the specification.
-- 
-- Contains all details of the contract, including rules you can use when placing orders
data Contract = Contract {
  -- | category
  contractCategory :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | companyName
  , contractCompanyName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | company_name: Contracts company name
  , contractCompany_name :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | con_id: same as that in request
  , contractCon_id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | currency
  , contractCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | exchange
  , contractExchange :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | industry
  , contractIndustry :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | instrument_type: for example STK
  , contractInstrument_type :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | local_symbol: for exmple FB
  , contractLocal_symbol :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | r_t_h: true means you can trade outside RTH(regular trading hours)
  , contractR_t_h :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | rules
  , contractRules :: (GHC.Maybe.Maybe ContractRules)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Contract
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("category" Data.Aeson.Types.ToJSON..=)) (contractCategory obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("companyName" Data.Aeson.Types.ToJSON..=)) (contractCompanyName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("company_name" Data.Aeson.Types.ToJSON..=)) (contractCompany_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("con_id" Data.Aeson.Types.ToJSON..=)) (contractCon_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (contractCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exchange" Data.Aeson.Types.ToJSON..=)) (contractExchange obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("industry" Data.Aeson.Types.ToJSON..=)) (contractIndustry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("instrument_type" Data.Aeson.Types.ToJSON..=)) (contractInstrument_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local_symbol" Data.Aeson.Types.ToJSON..=)) (contractLocal_symbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("r_t_h" Data.Aeson.Types.ToJSON..=)) (contractR_t_h obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("rules" Data.Aeson.Types.ToJSON..=)) (contractRules obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("category" Data.Aeson.Types.ToJSON..=)) (contractCategory obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("companyName" Data.Aeson.Types.ToJSON..=)) (contractCompanyName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("company_name" Data.Aeson.Types.ToJSON..=)) (contractCompany_name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("con_id" Data.Aeson.Types.ToJSON..=)) (contractCon_id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (contractCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exchange" Data.Aeson.Types.ToJSON..=)) (contractExchange obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("industry" Data.Aeson.Types.ToJSON..=)) (contractIndustry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("instrument_type" Data.Aeson.Types.ToJSON..=)) (contractInstrument_type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local_symbol" Data.Aeson.Types.ToJSON..=)) (contractLocal_symbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("r_t_h" Data.Aeson.Types.ToJSON..=)) (contractR_t_h obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("rules" Data.Aeson.Types.ToJSON..=)) (contractRules obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Contract
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Contract" (\obj -> ((((((((((GHC.Base.pure Contract GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "category")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "companyName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "company_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "con_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exchange")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "industry")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "instrument_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "local_symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "r_t_h")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "rules"))
-- | Create a new 'Contract' with all required fields.
mkContract :: Contract
mkContract = Contract{contractCategory = GHC.Maybe.Nothing,
                      contractCompanyName = GHC.Maybe.Nothing,
                      contractCompany_name = GHC.Maybe.Nothing,
                      contractCon_id = GHC.Maybe.Nothing,
                      contractCurrency = GHC.Maybe.Nothing,
                      contractExchange = GHC.Maybe.Nothing,
                      contractIndustry = GHC.Maybe.Nothing,
                      contractInstrument_type = GHC.Maybe.Nothing,
                      contractLocal_symbol = GHC.Maybe.Nothing,
                      contractR_t_h = GHC.Maybe.Nothing,
                      contractRules = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.contract.properties.rules@ in the specification.
-- 
-- 
data ContractRules = ContractRules {
  -- | defaultSize: default quantity you can use to place an order
  contractRulesDefaultSize :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | displaySize
  , contractRulesDisplaySize :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | increment
  , contractRulesIncrement :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | limitPrice: default limit price you can use to prefill your order
  , contractRulesLimitPrice :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | orderTypes
  , contractRulesOrderTypes :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | orderTypesOutside
  , contractRulesOrderTypesOutside :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | preview: if you can preview the order or not with the whatif endpoint
  , contractRulesPreview :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | sizeIncrement
  , contractRulesSizeIncrement :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | stopprice: default stop price you can use to prefill your order
  , contractRulesStopprice :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | tifTypes
  , contractRulesTifTypes :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ContractRules
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("defaultSize" Data.Aeson.Types.ToJSON..=)) (contractRulesDefaultSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("displaySize" Data.Aeson.Types.ToJSON..=)) (contractRulesDisplaySize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("increment" Data.Aeson.Types.ToJSON..=)) (contractRulesIncrement obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("limitPrice" Data.Aeson.Types.ToJSON..=)) (contractRulesLimitPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderTypes" Data.Aeson.Types.ToJSON..=)) (contractRulesOrderTypes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderTypesOutside" Data.Aeson.Types.ToJSON..=)) (contractRulesOrderTypesOutside obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preview" Data.Aeson.Types.ToJSON..=)) (contractRulesPreview obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sizeIncrement" Data.Aeson.Types.ToJSON..=)) (contractRulesSizeIncrement obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stopprice" Data.Aeson.Types.ToJSON..=)) (contractRulesStopprice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tifTypes" Data.Aeson.Types.ToJSON..=)) (contractRulesTifTypes obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("defaultSize" Data.Aeson.Types.ToJSON..=)) (contractRulesDefaultSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("displaySize" Data.Aeson.Types.ToJSON..=)) (contractRulesDisplaySize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("increment" Data.Aeson.Types.ToJSON..=)) (contractRulesIncrement obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("limitPrice" Data.Aeson.Types.ToJSON..=)) (contractRulesLimitPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderTypes" Data.Aeson.Types.ToJSON..=)) (contractRulesOrderTypes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("orderTypesOutside" Data.Aeson.Types.ToJSON..=)) (contractRulesOrderTypesOutside obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preview" Data.Aeson.Types.ToJSON..=)) (contractRulesPreview obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sizeIncrement" Data.Aeson.Types.ToJSON..=)) (contractRulesSizeIncrement obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stopprice" Data.Aeson.Types.ToJSON..=)) (contractRulesStopprice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tifTypes" Data.Aeson.Types.ToJSON..=)) (contractRulesTifTypes obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ContractRules
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ContractRules" (\obj -> (((((((((GHC.Base.pure ContractRules GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "defaultSize")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "displaySize")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "increment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "limitPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "orderTypes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "orderTypesOutside")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "preview")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sizeIncrement")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "stopprice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tifTypes"))
-- | Create a new 'ContractRules' with all required fields.
mkContractRules :: ContractRules
mkContractRules = ContractRules{contractRulesDefaultSize = GHC.Maybe.Nothing,
                                contractRulesDisplaySize = GHC.Maybe.Nothing,
                                contractRulesIncrement = GHC.Maybe.Nothing,
                                contractRulesLimitPrice = GHC.Maybe.Nothing,
                                contractRulesOrderTypes = GHC.Maybe.Nothing,
                                contractRulesOrderTypesOutside = GHC.Maybe.Nothing,
                                contractRulesPreview = GHC.Maybe.Nothing,
                                contractRulesSizeIncrement = GHC.Maybe.Nothing,
                                contractRulesStopprice = GHC.Maybe.Nothing,
                                contractRulesTifTypes = GHC.Maybe.Nothing}
