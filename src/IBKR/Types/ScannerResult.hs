-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ScannerResult
module IBKR.Types.ScannerResult where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified IBKR.Common
import IBKR.TypeAlias

-- | Defines the object schema located at @components.schemas.scanner-result@ in the specification.
-- 
-- 
data Scanner_result = Scanner_result {
  -- | Contracts: Contains list of contracts matching the scanner query
  scanner_resultContracts :: (GHC.Maybe.Maybe Scanner_resultContracts)
  -- | id
  , scanner_resultId :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | offset
  , scanner_resultOffset :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | position
  , scanner_resultPosition :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | scanTime
  , scanner_resultScanTime :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | size
  , scanner_resultSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | total
  , scanner_resultTotal :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Scanner_result
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("Contracts" Data.Aeson.Types.ToJSON..=)) (scanner_resultContracts obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (scanner_resultId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("offset" Data.Aeson.Types.ToJSON..=)) (scanner_resultOffset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("position" Data.Aeson.Types.ToJSON..=)) (scanner_resultPosition obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("scanTime" Data.Aeson.Types.ToJSON..=)) (scanner_resultScanTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("size" Data.Aeson.Types.ToJSON..=)) (scanner_resultSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total" Data.Aeson.Types.ToJSON..=)) (scanner_resultTotal obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("Contracts" Data.Aeson.Types.ToJSON..=)) (scanner_resultContracts obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (scanner_resultId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("offset" Data.Aeson.Types.ToJSON..=)) (scanner_resultOffset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("position" Data.Aeson.Types.ToJSON..=)) (scanner_resultPosition obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("scanTime" Data.Aeson.Types.ToJSON..=)) (scanner_resultScanTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("size" Data.Aeson.Types.ToJSON..=)) (scanner_resultSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total" Data.Aeson.Types.ToJSON..=)) (scanner_resultTotal obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Scanner_result
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Scanner_result" (\obj -> ((((((GHC.Base.pure Scanner_result GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "Contracts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "offset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "position")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "scanTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "total"))
-- | Create a new 'Scanner_result' with all required fields.
mkScanner_result :: Scanner_result
mkScanner_result = Scanner_result{scanner_resultContracts = GHC.Maybe.Nothing,
                                  scanner_resultId = GHC.Maybe.Nothing,
                                  scanner_resultOffset = GHC.Maybe.Nothing,
                                  scanner_resultPosition = GHC.Maybe.Nothing,
                                  scanner_resultScanTime = GHC.Maybe.Nothing,
                                  scanner_resultSize = GHC.Maybe.Nothing,
                                  scanner_resultTotal = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.scanner-result.properties.Contracts@ in the specification.
-- 
-- Contains list of contracts matching the scanner query
data Scanner_resultContracts = Scanner_resultContracts {
  -- | Contract
  scanner_resultContractsContract :: (GHC.Maybe.Maybe ([Scanner_resultContractsContract]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Scanner_resultContracts
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("Contract" Data.Aeson.Types.ToJSON..=)) (scanner_resultContractsContract obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("Contract" Data.Aeson.Types.ToJSON..=)) (scanner_resultContractsContract obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Scanner_resultContracts
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Scanner_resultContracts" (\obj -> GHC.Base.pure Scanner_resultContracts GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "Contract"))
-- | Create a new 'Scanner_resultContracts' with all required fields.
mkScanner_resultContracts :: Scanner_resultContracts
mkScanner_resultContracts = Scanner_resultContracts{scanner_resultContractsContract = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.scanner-result.properties.Contracts.properties.Contract.items@ in the specification.
-- 
-- 
data Scanner_resultContractsContract = Scanner_resultContractsContract {
  -- | contractID
  scanner_resultContractsContractContractID :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | distance
  , scanner_resultContractsContractDistance :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | inScanTime
  , scanner_resultContractsContractInScanTime :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Scanner_resultContractsContract
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("contractID" Data.Aeson.Types.ToJSON..=)) (scanner_resultContractsContractContractID obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("distance" Data.Aeson.Types.ToJSON..=)) (scanner_resultContractsContractDistance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("inScanTime" Data.Aeson.Types.ToJSON..=)) (scanner_resultContractsContractInScanTime obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("contractID" Data.Aeson.Types.ToJSON..=)) (scanner_resultContractsContractContractID obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("distance" Data.Aeson.Types.ToJSON..=)) (scanner_resultContractsContractDistance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("inScanTime" Data.Aeson.Types.ToJSON..=)) (scanner_resultContractsContractInScanTime obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Scanner_resultContractsContract
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Scanner_resultContractsContract" (\obj -> ((GHC.Base.pure Scanner_resultContractsContract GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "contractID")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "distance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "inScanTime"))
-- | Create a new 'Scanner_resultContractsContract' with all required fields.
mkScanner_resultContractsContract :: Scanner_resultContractsContract
mkScanner_resultContractsContract = Scanner_resultContractsContract{scanner_resultContractsContractContractID = GHC.Maybe.Nothing,
                                                                    scanner_resultContractsContractDistance = GHC.Maybe.Nothing,
                                                                    scanner_resultContractsContractInScanTime = GHC.Maybe.Nothing}
