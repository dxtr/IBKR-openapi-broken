-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Notifications
module IBKR.Types.Notifications where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified IBKR.Common
import IBKR.TypeAlias

-- | Defines the object schema located at @components.schemas.notifications.items@ in the specification.
-- 
-- notification
data NotificationsItem = NotificationsItem {
  -- | D: notification date
  notificationsItemD :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | FC: FYI code, we can use it to find whether the disclaimer is accepted or not in settings
  , notificationsItemFC :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ID: unique way to reference this notification
  , notificationsItemID :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | MD: content of notification
  , notificationsItemMD :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | MS: title of notification
  , notificationsItemMS :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | R: 0-unread, 1-read
  , notificationsItemR :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON NotificationsItem
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("D" Data.Aeson.Types.ToJSON..=)) (notificationsItemD obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("FC" Data.Aeson.Types.ToJSON..=)) (notificationsItemFC obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ID" Data.Aeson.Types.ToJSON..=)) (notificationsItemID obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("MD" Data.Aeson.Types.ToJSON..=)) (notificationsItemMD obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("MS" Data.Aeson.Types.ToJSON..=)) (notificationsItemMS obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("R" Data.Aeson.Types.ToJSON..=)) (notificationsItemR obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("D" Data.Aeson.Types.ToJSON..=)) (notificationsItemD obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("FC" Data.Aeson.Types.ToJSON..=)) (notificationsItemFC obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ID" Data.Aeson.Types.ToJSON..=)) (notificationsItemID obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("MD" Data.Aeson.Types.ToJSON..=)) (notificationsItemMD obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("MS" Data.Aeson.Types.ToJSON..=)) (notificationsItemMS obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("R" Data.Aeson.Types.ToJSON..=)) (notificationsItemR obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON NotificationsItem
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "NotificationsItem" (\obj -> (((((GHC.Base.pure NotificationsItem GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "D")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "FC")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ID")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "MD")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "MS")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "R"))
-- | Create a new 'NotificationsItem' with all required fields.
mkNotificationsItem :: NotificationsItem
mkNotificationsItem = NotificationsItem{notificationsItemD = GHC.Maybe.Nothing,
                                        notificationsItemFC = GHC.Maybe.Nothing,
                                        notificationsItemID = GHC.Maybe.Nothing,
                                        notificationsItemMD = GHC.Maybe.Nothing,
                                        notificationsItemMS = GHC.Maybe.Nothing,
                                        notificationsItemR = GHC.Maybe.Nothing}
-- | Defines an alias for the schema located at @components.schemas.notifications@ in the specification.
-- 
-- 
type Notifications = [NotificationsItem]
