-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Ledger
module IBKR.Types.Ledger where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified IBKR.Common
import IBKR.TypeAlias

-- | Defines the object schema located at @components.schemas.ledger@ in the specification.
-- 
-- 
data Ledger = Ledger {
  -- | acctcode
  ledgerAcctcode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | cashbalance
  , ledgerCashbalance :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | commoditymarketvalue
  , ledgerCommoditymarketvalue :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | corporatebondsmarketvalue
  , ledgerCorporatebondsmarketvalue :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | currency
  , ledgerCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | exchangerate
  , ledgerExchangerate :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | funds
  , ledgerFunds :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | futuremarketvalue
  , ledgerFuturemarketvalue :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | interest
  , ledgerInterest :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | issueroptionsmarketvalue
  , ledgerIssueroptionsmarketvalue :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | key
  , ledgerKey :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | moneyfunds
  , ledgerMoneyfunds :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | netliquidationvalue
  , ledgerNetliquidationvalue :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | realizedpnl
  , ledgerRealizedpnl :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | sessionid
  , ledgerSessionid :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | settledcash
  , ledgerSettledcash :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | severity
  , ledgerSeverity :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | stockmarketvalue
  , ledgerStockmarketvalue :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | timestamp
  , ledgerTimestamp :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | unrealizedpnl
  , ledgerUnrealizedpnl :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | warrantsmarketvalue
  , ledgerWarrantsmarketvalue :: (GHC.Maybe.Maybe GHC.Types.Double)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Ledger
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acctcode" Data.Aeson.Types.ToJSON..=)) (ledgerAcctcode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashbalance" Data.Aeson.Types.ToJSON..=)) (ledgerCashbalance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("commoditymarketvalue" Data.Aeson.Types.ToJSON..=)) (ledgerCommoditymarketvalue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("corporatebondsmarketvalue" Data.Aeson.Types.ToJSON..=)) (ledgerCorporatebondsmarketvalue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (ledgerCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exchangerate" Data.Aeson.Types.ToJSON..=)) (ledgerExchangerate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funds" Data.Aeson.Types.ToJSON..=)) (ledgerFunds obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("futuremarketvalue" Data.Aeson.Types.ToJSON..=)) (ledgerFuturemarketvalue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interest" Data.Aeson.Types.ToJSON..=)) (ledgerInterest obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("issueroptionsmarketvalue" Data.Aeson.Types.ToJSON..=)) (ledgerIssueroptionsmarketvalue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("key" Data.Aeson.Types.ToJSON..=)) (ledgerKey obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("moneyfunds" Data.Aeson.Types.ToJSON..=)) (ledgerMoneyfunds obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("netliquidationvalue" Data.Aeson.Types.ToJSON..=)) (ledgerNetliquidationvalue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("realizedpnl" Data.Aeson.Types.ToJSON..=)) (ledgerRealizedpnl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sessionid" Data.Aeson.Types.ToJSON..=)) (ledgerSessionid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settledcash" Data.Aeson.Types.ToJSON..=)) (ledgerSettledcash obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("severity" Data.Aeson.Types.ToJSON..=)) (ledgerSeverity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stockmarketvalue" Data.Aeson.Types.ToJSON..=)) (ledgerStockmarketvalue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("timestamp" Data.Aeson.Types.ToJSON..=)) (ledgerTimestamp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unrealizedpnl" Data.Aeson.Types.ToJSON..=)) (ledgerUnrealizedpnl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("warrantsmarketvalue" Data.Aeson.Types.ToJSON..=)) (ledgerWarrantsmarketvalue obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acctcode" Data.Aeson.Types.ToJSON..=)) (ledgerAcctcode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashbalance" Data.Aeson.Types.ToJSON..=)) (ledgerCashbalance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("commoditymarketvalue" Data.Aeson.Types.ToJSON..=)) (ledgerCommoditymarketvalue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("corporatebondsmarketvalue" Data.Aeson.Types.ToJSON..=)) (ledgerCorporatebondsmarketvalue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (ledgerCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exchangerate" Data.Aeson.Types.ToJSON..=)) (ledgerExchangerate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funds" Data.Aeson.Types.ToJSON..=)) (ledgerFunds obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("futuremarketvalue" Data.Aeson.Types.ToJSON..=)) (ledgerFuturemarketvalue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interest" Data.Aeson.Types.ToJSON..=)) (ledgerInterest obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("issueroptionsmarketvalue" Data.Aeson.Types.ToJSON..=)) (ledgerIssueroptionsmarketvalue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("key" Data.Aeson.Types.ToJSON..=)) (ledgerKey obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("moneyfunds" Data.Aeson.Types.ToJSON..=)) (ledgerMoneyfunds obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("netliquidationvalue" Data.Aeson.Types.ToJSON..=)) (ledgerNetliquidationvalue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("realizedpnl" Data.Aeson.Types.ToJSON..=)) (ledgerRealizedpnl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sessionid" Data.Aeson.Types.ToJSON..=)) (ledgerSessionid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settledcash" Data.Aeson.Types.ToJSON..=)) (ledgerSettledcash obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("severity" Data.Aeson.Types.ToJSON..=)) (ledgerSeverity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stockmarketvalue" Data.Aeson.Types.ToJSON..=)) (ledgerStockmarketvalue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("timestamp" Data.Aeson.Types.ToJSON..=)) (ledgerTimestamp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unrealizedpnl" Data.Aeson.Types.ToJSON..=)) (ledgerUnrealizedpnl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("warrantsmarketvalue" Data.Aeson.Types.ToJSON..=)) (ledgerWarrantsmarketvalue obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Ledger
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Ledger" (\obj -> ((((((((((((((((((((GHC.Base.pure Ledger GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "acctcode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cashbalance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "commoditymarketvalue")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "corporatebondsmarketvalue")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exchangerate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "funds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "futuremarketvalue")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "interest")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "issueroptionsmarketvalue")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "moneyfunds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "netliquidationvalue")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "realizedpnl")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sessionid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "settledcash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "severity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "stockmarketvalue")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "timestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "unrealizedpnl")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "warrantsmarketvalue"))
-- | Create a new 'Ledger' with all required fields.
mkLedger :: Ledger
mkLedger = Ledger{ledgerAcctcode = GHC.Maybe.Nothing,
                  ledgerCashbalance = GHC.Maybe.Nothing,
                  ledgerCommoditymarketvalue = GHC.Maybe.Nothing,
                  ledgerCorporatebondsmarketvalue = GHC.Maybe.Nothing,
                  ledgerCurrency = GHC.Maybe.Nothing,
                  ledgerExchangerate = GHC.Maybe.Nothing,
                  ledgerFunds = GHC.Maybe.Nothing,
                  ledgerFuturemarketvalue = GHC.Maybe.Nothing,
                  ledgerInterest = GHC.Maybe.Nothing,
                  ledgerIssueroptionsmarketvalue = GHC.Maybe.Nothing,
                  ledgerKey = GHC.Maybe.Nothing,
                  ledgerMoneyfunds = GHC.Maybe.Nothing,
                  ledgerNetliquidationvalue = GHC.Maybe.Nothing,
                  ledgerRealizedpnl = GHC.Maybe.Nothing,
                  ledgerSessionid = GHC.Maybe.Nothing,
                  ledgerSettledcash = GHC.Maybe.Nothing,
                  ledgerSeverity = GHC.Maybe.Nothing,
                  ledgerStockmarketvalue = GHC.Maybe.Nothing,
                  ledgerTimestamp = GHC.Maybe.Nothing,
                  ledgerUnrealizedpnl = GHC.Maybe.Nothing,
                  ledgerWarrantsmarketvalue = GHC.Maybe.Nothing}
