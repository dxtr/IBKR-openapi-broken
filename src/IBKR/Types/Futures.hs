-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Futures
module IBKR.Types.Futures where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified IBKR.Common
import IBKR.TypeAlias

-- | Defines the object schema located at @components.schemas.futures.items@ in the specification.
-- 
-- future contract information
data FuturesItem = FuturesItem {
  -- | conid: conid of the future contract
  futuresItemConid :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | expirationDate
  , futuresItemExpirationDate :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ltd: last trading day
  , futuresItemLtd :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | symbol
  , futuresItemSymbol :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | underlyingConid
  , futuresItemUnderlyingConid :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON FuturesItem
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conid" Data.Aeson.Types.ToJSON..=)) (futuresItemConid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expirationDate" Data.Aeson.Types.ToJSON..=)) (futuresItemExpirationDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ltd" Data.Aeson.Types.ToJSON..=)) (futuresItemLtd obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol" Data.Aeson.Types.ToJSON..=)) (futuresItemSymbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("underlyingConid" Data.Aeson.Types.ToJSON..=)) (futuresItemUnderlyingConid obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("conid" Data.Aeson.Types.ToJSON..=)) (futuresItemConid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expirationDate" Data.Aeson.Types.ToJSON..=)) (futuresItemExpirationDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ltd" Data.Aeson.Types.ToJSON..=)) (futuresItemLtd obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol" Data.Aeson.Types.ToJSON..=)) (futuresItemSymbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("underlyingConid" Data.Aeson.Types.ToJSON..=)) (futuresItemUnderlyingConid obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON FuturesItem
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "FuturesItem" (\obj -> ((((GHC.Base.pure FuturesItem GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "conid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expirationDate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ltd")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "underlyingConid"))
-- | Create a new 'FuturesItem' with all required fields.
mkFuturesItem :: FuturesItem
mkFuturesItem = FuturesItem{futuresItemConid = GHC.Maybe.Nothing,
                            futuresItemExpirationDate = GHC.Maybe.Nothing,
                            futuresItemLtd = GHC.Maybe.Nothing,
                            futuresItemSymbol = GHC.Maybe.Nothing,
                            futuresItemUnderlyingConid = GHC.Maybe.Nothing}
-- | Defines an alias for the schema located at @components.schemas.futures@ in the specification.
-- 
-- 
type Futures = [FuturesItem]
